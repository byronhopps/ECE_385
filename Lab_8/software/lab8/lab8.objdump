
lab8.elf:     file format elf32-littlenios2
lab8.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1000022c

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00011ed4 memsz 0x00011ed4 flags r-x
    LOAD off    0x00012ef4 vaddr 0x10011ef4 paddr 0x100139e0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000154cc vaddr 0x100154cc paddr 0x100154cc align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000020c  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011250  1000022c  1000022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  1001147c  1001147c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  10011ef4  100139e0  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  100154cc  100154cc  000154cc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000149e0  2**0
                  CONTENTS
  7 .sdram        00000000  10015630  10015630  000149e0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000149e0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d50  00000000  00000000  00014a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000237e7  00000000  00000000  00015758  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008ff0  00000000  00000000  00038f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b21b  00000000  00000000  00041f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002328  00000000  00000000  0004d14c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000378b  00000000  00000000  0004f474  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  00052bff  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0006994c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001388  00000000  00000000  00069990  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006e0fe  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006e101  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006e10d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006e10e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006e10f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006e113  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006e117  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006e11b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006e126  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006e131  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006e13c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  0006e144  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00081c83  00000000  00000000  0006e168  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
1000022c l    d  .text	00000000 .text
1001147c l    d  .rodata	00000000 .rodata
10011ef4 l    d  .rwdata	00000000 .rwdata
100154cc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10015630 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab8_bsp//obj/HAL/src/crt0.o
10000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
100154cc l     O .bss	00000002 ctl_reg.3318
100154ce l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10011c3a l     O .rodata	00000010 zeroes.4181
10011c4a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
10004654 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
100061fc l     F .text	00000008 __fp_lock
10006204 l     F .text	00000008 __fp_unlock
10006218 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
10011ef4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
10012338 l     O .rwdata	00000020 lc_ctype_charset
10012318 l     O .rwdata	00000020 lc_message_charset
10012358 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
10011c7c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
10009748 l     F .text	000000fc __sprint_r.part.0
10011db0 l     O .rodata	00000010 blanks.4125
10011da0 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
1000c24c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
1000eb9c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
1000ecc4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
1000ecf0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
1000edf8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
1000eef4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
1000efd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
1000f1bc l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
100139d0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
1000f470 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
1000f5c0 l     F .text	00000038 alt_dev_reg
10012940 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
1000f89c l     F .text	00000204 altera_avalon_jtag_uart_irq
1000faa0 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10010374 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
1001080c l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10010964 l     F .text	00000050 alt_get_errno
100109b4 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10015504 g     O .bss	00000004 alt_instruction_exception_handler
10008d88 g     F .text	00000074 _mprec_log10
10008e74 g     F .text	0000008c __any_on
1000b174 g     F .text	00000054 _isatty_r
10011c88 g     O .rodata	00000028 __mprec_tinytens
1000f104 g     F .text	00000078 alt_main
100022a0 g     F .text	000000b8 _puts_r
10015530 g     O .bss	00000100 alt_irq
1000b1c8 g     F .text	0000005c _lseek_r
100139e0 g       *ABS*	00000000 __flash_rwdata_start
1000d5bc g     F .text	00000084 .hidden __eqdf2
10015630 g       *ABS*	00000000 __alt_heap_start
10002264 g     F .text	0000003c printf
1000b3f0 g     F .text	0000009c _wcrtomb_r
10009640 g     F .text	0000005c __sseek
10006560 g     F .text	00000010 __sinit
1000b280 g     F .text	00000154 __swbuf_r
10006fd8 g     F .text	0000007c _setlocale_r
100063b8 g     F .text	00000078 __sfmoreglue
1000f19c g     F .text	00000020 __malloc_unlock
1000213c g     F .text	00000080 UsbGetRetryCnt
10007c38 g     F .text	0000015c memmove
10000268 g     F .text	00000050 IO_init
10006548 g     F .text	00000018 _cleanup
10007eb8 g     F .text	000000a8 _Balloc
1000d640 g     F .text	000000e0 .hidden __gtdf2
10010da4 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
1000b11c g     F .text	00000058 _fstat_r
100154e8 g     O .bss	00000004 errno
100095bc g     F .text	00000008 __seofread
100154f0 g     O .bss	00000004 alt_argv
1001b9a0 g       *ABS*	00000000 _gp
1000f440 g     F .text	00000030 usleep
100127c0 g     O .rwdata	00000180 alt_fd_list
10010dc4 g     F .text	00000090 alt_find_dev
10007b00 g     F .text	00000138 memcpy
1000620c g     F .text	0000000c _cleanup_r
1000e9c4 g     F .text	000000d0 .hidden __floatsidf
100108ec g     F .text	00000078 alt_io_redirect
1000d720 g     F .text	000000e0 .hidden __ltdf2
1001147c g       *ABS*	00000000 __DTOR_END__
10002358 g     F .text	00000014 puts
1001103c g     F .text	0000009c alt_exception_cause_generated_bad_addr
100094a0 g     F .text	00000074 __fpclassifyd
10008ce4 g     F .text	000000a4 __ratio
1000ac80 g     F .text	00000024 __vfiprintf_internal
1000fc9c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
10002238 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
1000c368 g     F .text	00000008 .hidden __udivsi3
1000ee48 g     F .text	000000ac isatty
10011cd8 g     O .rodata	000000c8 __mprec_tens
10007054 g     F .text	0000000c __locale_charset
100154e4 g     O .bss	00000004 __malloc_top_pad
100017dc g     F .text	00000264 UsbGetConfigDesc2
100139a8 g     O .rwdata	00000004 __mb_cur_max
10007084 g     F .text	0000000c _localeconv_r
100082e0 g     F .text	0000003c __i2b
100069c4 g     F .text	000004a4 __sfvwrite_r
10009514 g     F .text	00000054 _sbrk_r
1000b224 g     F .text	0000005c _read_r
100139c8 g     O .rwdata	00000004 alt_max_fd
1000ae2c g     F .text	00000100 _fclose_r
100061cc g     F .text	00000030 fflush
100154e0 g     O .bss	00000004 __malloc_max_sbrked_mem
1000c3a0 g     F .text	0000089c .hidden __adddf3
10008a8c g     F .text	0000011c __b2d
1000bc30 g     F .text	0000061c .hidden __umoddi3
1000f028 g     F .text	000000dc lseek
100139a0 g     O .rwdata	00000004 _global_impure_ptr
10008f00 g     F .text	000005a0 _realloc_r
10015630 g       *ABS*	00000000 __bss_end
1001071c g     F .text	000000f0 alt_iic_isr_register
10010ca0 g     F .text	00000104 alt_tick
1000b5f0 g     F .text	00000640 .hidden __udivdi3
1000af40 g     F .text	00000184 _fputwc_r
10011cb0 g     O .rodata	00000028 __mprec_bigtens
100080c4 g     F .text	00000104 __s2b
1000ea94 g     F .text	000000a4 .hidden __floatunsidf
10008834 g     F .text	00000060 __mcmp
1000123c g     F .text	000000fc UsbSetAddress
10006580 g     F .text	00000018 __fp_lock_all
100106d0 g     F .text	0000004c alt_ic_irq_enabled
10010c08 g     F .text	00000098 alt_alarm_stop
100154f8 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d0 alt_irq_handler
10012798 g     O .rwdata	00000028 alt_dev_null
10010358 g     F .text	0000001c alt_dcache_flush_all
100081c8 g     F .text	00000068 __hi0bits
10000330 g     F .text	00000074 IO_read
1000e93c g     F .text	00000088 .hidden __fixdfsi
100139e0 g       *ABS*	00000000 __ram_rwdata_end
100139c0 g     O .rwdata	00000008 alt_dev_list
1000f4c0 g     F .text	00000100 write
10011ef4 g       *ABS*	00000000 __ram_rodata_end
1000ed40 g     F .text	000000b8 fstat
1000d720 g     F .text	000000e0 .hidden __ledf2
100021bc g     F .text	0000007c UsbPrintMem
100085ac g     F .text	00000140 __pow5mult
1000985c g     F .text	00001424 ___vfiprintf_internal_r
100154d8 g     O .bss	00000004 __nlocale_changed
1000c370 g     F .text	00000008 .hidden __umodsi3
10015630 g       *ABS*	00000000 end
1000f7d8 g     F .text	000000c4 altera_avalon_jtag_uart_init
100001cc g     F .exceptions	00000060 alt_instruction_exception_entry
1001147c g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
1000eb38 g     F .text	00000064 .hidden __clzsi2
1000fea8 g     F .text	00000218 altera_avalon_jtag_uart_write
10006570 g     F .text	00000004 __sfp_lock_acquire
10007a18 g     F .text	000000e8 memchr
10002404 g     F .text	000020fc ___vfprintf_internal_r
10001b3c g     F .text	000000fc UsbClassRequest
100066d4 g     F .text	000002f0 _free_r
10007060 g     F .text	00000010 __locale_mb_cur_max
100112b4 g     F .text	00000194 __call_exitprocs
100154d4 g     O .bss	00000004 __mlocale_changed
100139ac g     O .rwdata	00000004 __malloc_sbrk_base
1000022c g     F .text	0000003c _start
100154fc g     O .bss	00000004 _alt_tick_rate
100086ec g     F .text	00000148 __lshift
10015500 g     O .bss	00000004 _alt_nticks
1000f20c g     F .text	00000104 read
1000f62c g     F .text	00000048 alt_sys_init
100111a0 g     F .text	00000114 __register_exitproc
1000831c g     F .text	00000290 __multiply
1000fb48 g     F .text	00000068 altera_avalon_jtag_uart_close
1000c378 g     F .text	00000028 .hidden __mulsi3
10011ef4 g       *ABS*	00000000 __ram_rwdata_start
1001147c g       *ABS*	00000000 __ram_rodata_start
10015508 g     O .bss	00000028 __malloc_current_mallinfo
10008ba8 g     F .text	0000013c __d2b
10001338 g     F .text	00000144 UsbGetDeviceDesc1
1000f674 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10010f68 g     F .text	000000d4 alt_get_fd
10010200 g     F .text	00000158 alt_busy_sleep
1000ad00 g     F .text	00000054 _close_r
10011124 g     F .text	0000007c memcmp
1000f734 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10015630 g       *ABS*	00000000 __alt_stack_base
1000f784 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10004524 g     F .text	00000130 __swsetup_r
1000cc3c g     F .text	00000980 .hidden __divdf3
10006430 g     F .text	00000118 __sfp
10008dfc g     F .text	00000078 __copybits
10012390 g     O .rwdata	00000408 __malloc_av_
1000657c g     F .text	00000004 __sinit_lock_release
1000d800 g     F .text	0000086c .hidden __muldf3
10009568 g     F .text	00000054 __sread
100020b8 g     F .text	00000084 UsbWaitTDListDone
10010e54 g     F .text	00000114 alt_find_file
100103c4 g     F .text	000000a4 alt_dev_llist_insert
1000f17c g     F .text	00000020 __malloc_lock
1000f390 g     F .text	000000b0 sbrk
10005fa4 g     F .text	00000228 _fflush_r
1000ad54 g     F .text	000000d8 _calloc_r
100154cc g       *ABS*	00000000 __bss_start
10007d94 g     F .text	00000124 memset
100003a4 g     F .text	00000d4c main
100154f4 g     O .bss	00000004 alt_envp
100154dc g     O .bss	00000004 __malloc_max_total_mem
1000f6d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001a40 g     F .text	000000fc UsbSetConfig
1000b3d4 g     F .text	0000001c __swbuf
1000969c g     F .text	00000008 __sclose
18000000 g       *ABS*	00000000 __alt_heap_limit
1000af2c g     F .text	00000014 fclose
1000487c g     F .text	00001728 _dtoa_r
10007270 g     F .text	000007a8 _malloc_r
1000b564 g     F .text	00000030 __ascii_wctomb
100139cc g     O .rwdata	00000004 alt_errno
10006e68 g     F .text	000000b8 _fwalk
1000c2b8 g     F .text	00000054 .hidden __divsi3
100065b0 g     F .text	00000124 _malloc_trim_r
10001c38 g     F .text	00000144 UsbGetHidDesc
1001147c g       *ABS*	00000000 __CTOR_END__
100096a4 g     F .text	000000a4 strcmp
1001147c g       *ABS*	00000000 __flash_rodata_start
1001147c g       *ABS*	00000000 __DTOR_LIST__
1000d5bc g     F .text	00000084 .hidden __nedf2
10001148 g     F .text	00000044 UsbRead
1000f5f8 g     F .text	00000034 alt_irq_init
1000f310 g     F .text	00000080 alt_release_fd
10011dc0 g     O .rodata	00000100 .hidden __clz_tab
100154d0 g     O .bss	00000004 _PathLocale
100110d8 g     F .text	00000014 atexit
1000aca4 g     F .text	0000005c _write_r
10007090 g     F .text	0000001c setlocale
100139a4 g     O .rwdata	00000004 _impure_ptr
100154ec g     O .bss	00000004 alt_argc
100104c4 g     F .text	0000005c _do_dtors
1000707c g     F .text	00000008 __locale_cjk_lang
10000020 g       .exceptions	00000000 alt_irq_entry
10008a2c g     F .text	00000060 __ulp
10006598 g     F .text	00000018 __fp_unlock_all
100139b8 g     O .rwdata	00000008 alt_fs_list
10001d7c g     F .text	0000033c UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
100070ac g     F .text	0000000c localeconv
1001053c g     F .text	00000050 alt_ic_isr_register
100139e0 g       *ABS*	00000000 _edata
10015630 g       *ABS*	00000000 _end
100010f0 g     F .text	00000058 UsbWrite
1000022c g       *ABS*	00000000 __ram_exceptions_end
1000fbb0 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
1001062c g     F .text	000000a4 alt_ic_irq_disable
100095c4 g     F .text	0000007c __swrite
100139b0 g     O .rwdata	00000004 __malloc_trim_threshold
10007070 g     F .text	0000000c __locale_msgcharset
100110ec g     F .text	00000038 exit
10006f20 g     F .text	000000b8 _fwalk_reent
10008894 g     F .text	00000198 __mdiff
1000c30c g     F .text	0000005c .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10006574 g     F .text	00000004 __sfp_lock_release
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002b8 g     F .text	00000078 IO_write
10011448 g     F .text	00000034 _exit
100100c0 g     F .text	00000140 alt_alarm_start
100070b8 g     F .text	000001b8 __smakebuf_r
1000236c g     F .text	00000098 strlen
10010aa8 g     F .text	00000160 open
1000d640 g     F .text	000000e0 .hidden __gedf2
100139b4 g     O .rwdata	00000004 __wctomb
10009844 g     F .text	00000018 __sprint_r
10010520 g     F .text	0000001c alt_icache_flush_all
100139d4 g     O .rwdata	00000004 alt_priority_mask
1001058c g     F .text	000000a0 alt_ic_irq_enable
10004500 g     F .text	00000024 __vfprintf_internal
1000b594 g     F .text	0000005c _wctomb_r
1000e06c g     F .text	000008d0 .hidden __subdf3
10008230 g     F .text	000000b0 __lo0bits
10001650 g     F .text	0000018c UsbGetConfigDesc1
100139d8 g     O .rwdata	00000008 alt_alarm_list
10010468 g     F .text	0000005c _do_ctors
1000118c g     F .text	000000b0 UsbSoftReset
1000b48c g     F .text	000000d8 wcrtomb
1000ebec g     F .text	000000d8 close
1000147c g     F .text	000001d4 UsbGetDeviceDesc2
1000ef58 g     F .text	00000080 alt_load
1000b0c4 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
10006578 g     F .text	00000004 __sinit_lock_acquire
10007f88 g     F .text	0000013c __multadd
10007f60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408b14 	ori	at,at,556
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
1000008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001cc0 	call	100001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840074 	movhi	r2,4097
10000140:	10954c04 	addi	r2,r2,21808
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840074 	movhi	r2,4097
10000158:	10954c04 	addi	r2,r2,21808
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	e037883a 	mov	sp,fp
100001bc:	dfc00117 	ldw	ra,4(sp)
100001c0:	df000017 	ldw	fp,0(sp)
100001c4:	dec00204 	addi	sp,sp,8
100001c8:	f800283a 	ret

100001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001cc:	defffb04 	addi	sp,sp,-20
100001d0:	dfc00415 	stw	ra,16(sp)
100001d4:	df000315 	stw	fp,12(sp)
100001d8:	df000304 	addi	fp,sp,12
100001dc:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e0:	00bfffc4 	movi	r2,-1
100001e4:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001e8:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001ec:	d0a6d917 	ldw	r2,-25756(gp)
100001f0:	10000726 	beq	r2,zero,10000210 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f4:	d0a6d917 	ldw	r2,-25756(gp)
100001f8:	e0fffd17 	ldw	r3,-12(fp)
100001fc:	1809883a 	mov	r4,r3
10000200:	e17fff17 	ldw	r5,-4(fp)
10000204:	e1bffe17 	ldw	r6,-8(fp)
10000208:	103ee83a 	callr	r2
1000020c:	00000206 	br	10000218 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000210:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000214:	0005883a 	mov	r2,zero
}
10000218:	e037883a 	mov	sp,fp
1000021c:	dfc00117 	ldw	ra,4(sp)
10000220:	df000017 	ldw	fp,0(sp)
10000224:	dec00204 	addi	sp,sp,8
10000228:	f800283a 	ret

Disassembly of section .text:

1000022c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
1000022c:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000230:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000234:	06840074 	movhi	gp,4097
    ori gp, gp, %lo(_gp)
10000238:	d6ae6814 	ori	gp,gp,47520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
1000023c:	00840074 	movhi	r2,4097
    ori r2, r2, %lo(__bss_start)
10000240:	10953314 	ori	r2,r2,21708

    movhi r3, %hi(__bss_end)
10000244:	00c40074 	movhi	r3,4097
    ori r3, r3, %lo(__bss_end)
10000248:	18d58c14 	ori	r3,r3,22064

    beq r2, r3, 1f
1000024c:	10c00326 	beq	r2,r3,1000025c <_start+0x30>

0:
    stw zero, (r2)
10000250:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000254:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
10000258:	10fffd36 	bltu	r2,r3,10000250 <__alt_data_end+0xf8000250>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
1000025c:	000ef580 	call	1000ef58 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000260:	000f1040 	call	1000f104 <alt_main>

10000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000264:	003fff06 	br	10000264 <__alt_data_end+0xf8000264>

10000268 <IO_init>:
#define otg_hpi_cs           (volatile char*)    OTG_HPI_CS_BASE //FOR SOME REASON CS BASE BEHAVES WEIRDLY MIGHT HAVE TO SET MANUALLY
#define otg_hpi_w            (volatile char*)    OTG_HPI_W_BASE


void IO_init(void)
{
10000268:	deffff04 	addi	sp,sp,-4
1000026c:	df000015 	stw	fp,0(sp)
10000270:	d839883a 	mov	fp,sp
    *otg_hpi_cs = 1;
10000274:	00802404 	movi	r2,144
10000278:	00c00044 	movi	r3,1
1000027c:	10c00005 	stb	r3,0(r2)
    *otg_hpi_r = 1;
10000280:	00803004 	movi	r2,192
10000284:	00c00044 	movi	r3,1
10000288:	10c00005 	stb	r3,0(r2)
    *otg_hpi_w = 1;
1000028c:	00803404 	movi	r2,208
10000290:	00c00044 	movi	r3,1
10000294:	10c00005 	stb	r3,0(r2)
    *otg_hpi_address = 0;
10000298:	00802804 	movi	r2,160
1000029c:	10000015 	stw	zero,0(r2)
    *otg_hpi_data = 0;
100002a0:	00802c04 	movi	r2,176
100002a4:	10000015 	stw	zero,0(r2)
}
100002a8:	e037883a 	mov	sp,fp
100002ac:	df000017 	ldw	fp,0(sp)
100002b0:	dec00104 	addi	sp,sp,4
100002b4:	f800283a 	ret

100002b8 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002b8:	defffd04 	addi	sp,sp,-12
100002bc:	df000215 	stw	fp,8(sp)
100002c0:	df000204 	addi	fp,sp,8
100002c4:	2007883a 	mov	r3,r4
100002c8:	2805883a 	mov	r2,r5
100002cc:	e0fffe05 	stb	r3,-8(fp)
100002d0:	e0bfff0d 	sth	r2,-4(fp)
    // Select the register address and data
    *otg_hpi_address = Address;
100002d4:	00802804 	movi	r2,160
100002d8:	e0fffe03 	ldbu	r3,-8(fp)
100002dc:	10c00015 	stw	r3,0(r2)
    *otg_hpi_data    = Data;
100002e0:	00802c04 	movi	r2,176
100002e4:	e0ffff0b 	ldhu	r3,-4(fp)
100002e8:	10c00015 	stw	r3,0(r2)

    // Make sure that we're not reading data from the chip 
    *otg_hpi_r = 1;
100002ec:	00803004 	movi	r2,192
100002f0:	00c00044 	movi	r3,1
100002f4:	10c00005 	stb	r3,0(r2)

    // Select the chip and then write the data
    *otg_hpi_cs = 0;
100002f8:	00802404 	movi	r2,144
100002fc:	10000005 	stb	zero,0(r2)
    *otg_hpi_w  = 0;
10000300:	00803404 	movi	r2,208
10000304:	10000005 	stb	zero,0(r2)

    // Deassert write and chip select
    *otg_hpi_cs = 1;
10000308:	00802404 	movi	r2,144
1000030c:	00c00044 	movi	r3,1
10000310:	10c00005 	stb	r3,0(r2)
    *otg_hpi_w  = 1;
10000314:	00803404 	movi	r2,208
10000318:	00c00044 	movi	r3,1
1000031c:	10c00005 	stb	r3,0(r2)
}
10000320:	e037883a 	mov	sp,fp
10000324:	df000017 	ldw	fp,0(sp)
10000328:	dec00104 	addi	sp,sp,4
1000032c:	f800283a 	ret

10000330 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000330:	defffd04 	addi	sp,sp,-12
10000334:	df000215 	stw	fp,8(sp)
10000338:	df000204 	addi	fp,sp,8
1000033c:	2005883a 	mov	r2,r4
10000340:	e0bfff05 	stb	r2,-4(fp)
    alt_u16 temp;

    // Set the address we want to read from
    *otg_hpi_address = Address;
10000344:	00802804 	movi	r2,160
10000348:	e0ffff03 	ldbu	r3,-4(fp)
1000034c:	10c00015 	stw	r3,0(r2)

    // Make sure we're not writing data to the chip
    *otg_hpi_w = 1;
10000350:	00803404 	movi	r2,208
10000354:	00c00044 	movi	r3,1
10000358:	10c00005 	stb	r3,0(r2)

    // Select the chip and then read the data
    *otg_hpi_cs = 0;
1000035c:	00802404 	movi	r2,144
10000360:	10000005 	stb	zero,0(r2)
    *otg_hpi_r   = 0;
10000364:	00803004 	movi	r2,192
10000368:	10000005 	stb	zero,0(r2)

    // Read the data from the data lines
    temp = *otg_hpi_data;
1000036c:	00802c04 	movi	r2,176
10000370:	10800017 	ldw	r2,0(r2)
10000374:	e0bffe0d 	sth	r2,-8(fp)

    // Deassert write and chip select
    *otg_hpi_cs = 1;
10000378:	00802404 	movi	r2,144
1000037c:	00c00044 	movi	r3,1
10000380:	10c00005 	stb	r3,0(r2)
    *otg_hpi_r   = 1;
10000384:	00803004 	movi	r2,192
10000388:	00c00044 	movi	r3,1
1000038c:	10c00005 	stb	r3,0(r2)

    //printf("%x\n",temp);

    return temp;
10000390:	e0bffe0b 	ldhu	r2,-8(fp)
}
10000394:	e037883a 	mov	sp,fp
10000398:	df000017 	ldw	fp,0(sp)
1000039c:	dec00104 	addi	sp,sp,4
100003a0:	f800283a 	ret

100003a4 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003a4:	defff904 	addi	sp,sp,-28
100003a8:	dfc00615 	stw	ra,24(sp)
100003ac:	df000515 	stw	fp,20(sp)
100003b0:	df000504 	addi	fp,sp,20
	IO_init();
100003b4:	00002680 	call	10000268 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003b8:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
100003bc:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
100003c0:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003c4:	01040074 	movhi	r4,4097
100003c8:	21051f04 	addi	r4,r4,5244
100003cc:	00023580 	call	10002358 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003d0:	000118c0 	call	1000118c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003d4:	01005104 	movi	r4,324
100003d8:	000b883a 	mov	r5,zero
100003dc:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100003e0:	01302414 	movui	r4,49296
100003e4:	017fffd4 	movui	r5,65535
100003e8:	00010f00 	call	100010f0 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
100003ec:	01006d04 	movi	r4,436
100003f0:	01409604 	movi	r5,600
100003f4:	00010f00 	call	100010f0 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
100003f8:	00811004 	movi	r2,1088
100003fc:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000400:	e0bffb0b 	ldhu	r2,-20(fp)
10000404:	01005084 	movi	r4,322
10000408:	100b883a 	mov	r5,r2
1000040c:	00010f00 	call	100010f0 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000410:	00808404 	movi	r2,528
10000414:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
10000418:	e0bffe0b 	ldhu	r2,-8(fp)
1000041c:	01302314 	movui	r4,49292
10000420:	100b883a 	mov	r5,r2
10000424:	00010f00 	call	100010f0 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
10000428:	01007104 	movi	r4,452
1000042c:	000b883a 	mov	r5,zero
10000430:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000434:	01007184 	movi	r4,454
10000438:	000b883a 	mov	r5,zero
1000043c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000440:	01007204 	movi	r4,456
10000444:	000b883a 	mov	r5,zero
10000448:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
1000044c:	01007284 	movi	r4,458
10000450:	000b883a 	mov	r5,zero
10000454:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
10000458:	01007304 	movi	r4,460
1000045c:	000b883a 	mov	r5,zero
10000460:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000464:	01007384 	movi	r4,462
10000468:	000b883a 	mov	r5,zero
1000046c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000470:	01007404 	movi	r4,464
10000474:	000b883a 	mov	r5,zero
10000478:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
1000047c:	01007484 	movi	r4,466
10000480:	000b883a 	mov	r5,zero
10000484:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
10000488:	01007504 	movi	r4,468
1000048c:	000b883a 	mov	r5,zero
10000490:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
10000494:	01007584 	movi	r4,470
10000498:	000b883a 	mov	r5,zero
1000049c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004a0:	01007604 	movi	r4,472
100004a4:	000b883a 	mov	r5,zero
100004a8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004ac:	01007684 	movi	r4,474
100004b0:	000b883a 	mov	r5,zero
100004b4:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004b8:	01007704 	movi	r4,476
100004bc:	000b883a 	mov	r5,zero
100004c0:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004c4:	01007784 	movi	r4,478
100004c8:	000b883a 	mov	r5,zero
100004cc:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004d0:	01007084 	movi	r4,450
100004d4:	01401c84 	movi	r5,114
100004d8:	00010f00 	call	100010f0 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100004dc:	01000044 	movi	r4,1
100004e0:	01738054 	movui	r5,52737
100004e4:	00002b80 	call	100002b8 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
100004e8:	0001883a 	nop
100004ec:	010000c4 	movi	r4,3
100004f0:	00003300 	call	10000330 <IO_read>
100004f4:	10bfffcc 	andi	r2,r2,65535
100004f8:	103ffc26 	beq	r2,zero,100004ec <__alt_data_end+0xf80004ec>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
100004fc:	0001883a 	nop
10000500:	01000044 	movi	r4,1
10000504:	00003300 	call	10000330 <IO_read>
10000508:	10bfffcc 	andi	r2,r2,65535
1000050c:	1083fb58 	cmpnei	r2,r2,4077
10000510:	10000826 	beq	r2,zero,10000534 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000514:	01000044 	movi	r4,1
10000518:	00003300 	call	10000330 <IO_read>
1000051c:	10bfffcc 	andi	r2,r2,65535
10000520:	01040074 	movhi	r4,4097
10000524:	21052504 	addi	r4,r4,5268
10000528:	100b883a 	mov	r5,r2
1000052c:	00022640 	call	10002264 <printf>
		goto USB_HOT_PLUG;
10000530:	003fa706 	br	100003d0 <__alt_data_end+0xf80003d0>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000534:	01040074 	movhi	r4,4097
10000538:	21052e04 	addi	r4,r4,5304
1000053c:	00022640 	call	10002264 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000540:	01007084 	movi	r4,450
10000544:	01401d04 	movi	r5,116
10000548:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
1000054c:	01007104 	movi	r4,452
10000550:	01400f04 	movi	r5,60
10000554:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000558:	01007184 	movi	r4,454
1000055c:	000b883a 	mov	r5,zero
10000560:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000564:	01007204 	movi	r4,456
10000568:	000b883a 	mov	r5,zero
1000056c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000570:	01007284 	movi	r4,458
10000574:	000b883a 	mov	r5,zero
10000578:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000057c:	01007304 	movi	r4,460
10000580:	000b883a 	mov	r5,zero
10000584:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000588:	01007384 	movi	r4,462
1000058c:	000b883a 	mov	r5,zero
10000590:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000594:	01007404 	movi	r4,464
10000598:	000b883a 	mov	r5,zero
1000059c:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005a0:	01007484 	movi	r4,466
100005a4:	000b883a 	mov	r5,zero
100005a8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005ac:	01007504 	movi	r4,468
100005b0:	000b883a 	mov	r5,zero
100005b4:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005b8:	01007584 	movi	r4,470
100005bc:	000b883a 	mov	r5,zero
100005c0:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005c4:	01007604 	movi	r4,472
100005c8:	000b883a 	mov	r5,zero
100005cc:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005d0:	01007684 	movi	r4,474
100005d4:	000b883a 	mov	r5,zero
100005d8:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100005dc:	01007704 	movi	r4,476
100005e0:	000b883a 	mov	r5,zero
100005e4:	00010f00 	call	100010f0 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100005e8:	01007784 	movi	r4,478
100005ec:	000b883a 	mov	r5,zero
100005f0:	00010f00 	call	100010f0 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
100005f4:	01000044 	movi	r4,1
100005f8:	01738054 	movui	r5,52737
100005fc:	00002b80 	call	100002b8 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000600:	0001883a 	nop
10000604:	01000044 	movi	r4,1
10000608:	00003300 	call	10000330 <IO_read>
1000060c:	10bfffcc 	andi	r2,r2,65535
10000610:	1083fb58 	cmpnei	r2,r2,4077
10000614:	10000826 	beq	r2,zero,10000638 <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000618:	01000044 	movi	r4,1
1000061c:	00003300 	call	10000330 <IO_read>
10000620:	10bfffcc 	andi	r2,r2,65535
10000624:	01040074 	movhi	r4,4097
10000628:	21052504 	addi	r4,r4,5268
1000062c:	100b883a 	mov	r5,r2
10000630:	00022640 	call	10002264 <printf>
		goto USB_HOT_PLUG;
10000634:	003f6606 	br	100003d0 <__alt_data_end+0xf80003d0>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
10000638:	00b02284 	movi	r2,-16246
1000063c:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000640:	008c0004 	movi	r2,12288
10000644:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
10000648:	00880004 	movi	r2,8192
1000064c:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000650:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000654:	10bfffcc 	andi	r2,r2,65535
10000658:	1009883a 	mov	r4,r2
1000065c:	00011480 	call	10001148 <UsbRead>
10000660:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
10000664:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000668:	e0fffb0b 	ldhu	r3,-20(fp)
1000066c:	1884703a 	and	r2,r3,r2
10000670:	10bfffcc 	andi	r2,r2,65535
10000674:	1000341e 	bne	r2,zero,10000748 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
10000678:	e03ffbc5 	stb	zero,-17(fp)
1000067c:	00001006 	br	100006c0 <main+0x31c>
		{
			usleep(5*1000);
10000680:	0104e204 	movi	r4,5000
10000684:	000f4400 	call	1000f440 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10000688:	d0a6cb0b 	ldhu	r2,-25812(gp)
1000068c:	10bfffcc 	andi	r2,r2,65535
10000690:	1009883a 	mov	r4,r2
10000694:	00011480 	call	10001148 <UsbRead>
10000698:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
1000069c:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006a0:	e0fffb0b 	ldhu	r3,-20(fp)
100006a4:	1884703a 	and	r2,r3,r2
100006a8:	10bfffcc 	andi	r2,r2,65535
100006ac:	10000126 	beq	r2,zero,100006b4 <main+0x310>
100006b0:	00000606 	br	100006cc <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006b4:	e0bffbc3 	ldbu	r2,-17(fp)
100006b8:	10800044 	addi	r2,r2,1
100006bc:	e0bffbc5 	stb	r2,-17(fp)
100006c0:	e0bffbc3 	ldbu	r2,-17(fp)
100006c4:	10800170 	cmpltui	r2,r2,5
100006c8:	103fed1e 	bne	r2,zero,10000680 <__alt_data_end+0xf8000680>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
100006cc:	d0a6cb8b 	ldhu	r2,-25810(gp)
100006d0:	e0fffb0b 	ldhu	r3,-20(fp)
100006d4:	1884703a 	and	r2,r3,r2
100006d8:	10bfffcc 	andi	r2,r2,65535
100006dc:	1000261e 	bne	r2,zero,10000778 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
100006e0:	01040074 	movhi	r4,4097
100006e4:	21053204 	addi	r4,r4,5320
100006e8:	00023580 	call	10002358 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
100006ec:	01040074 	movhi	r4,4097
100006f0:	21053c04 	addi	r4,r4,5360
100006f4:	00023580 	call	10002358 <puts>
			while (!(usb_ctl_val & no_device))
100006f8:	00000d06 	br	10000730 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
100006fc:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	1009883a 	mov	r4,r2
10000708:	00011480 	call	10001148 <UsbRead>
1000070c:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
10000710:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000714:	e0fffb0b 	ldhu	r3,-20(fp)
10000718:	1884703a 	and	r2,r3,r2
1000071c:	10bfffcc 	andi	r2,r2,65535
10000720:	10000126 	beq	r2,zero,10000728 <main+0x384>
					goto USB_HOT_PLUG;
10000724:	003f2a06 	br	100003d0 <__alt_data_end+0xf80003d0>

				usleep(2000);
10000728:	0101f404 	movi	r4,2000
1000072c:	000f4400 	call	1000f440 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000730:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000734:	e0fffb0b 	ldhu	r3,-20(fp)
10000738:	1884703a 	and	r2,r3,r2
1000073c:	10bfffcc 	andi	r2,r2,65535
10000740:	103fee26 	beq	r2,zero,100006fc <__alt_data_end+0xf80006fc>
10000744:	00000c06 	br	10000778 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000748:	e0fffb0b 	ldhu	r3,-20(fp)
1000074c:	e0bffc0b 	ldhu	r2,-16(fp)
10000750:	1884703a 	and	r2,r3,r2
10000754:	10bfffcc 	andi	r2,r2,65535
10000758:	10000426 	beq	r2,zero,1000076c <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
1000075c:	01040074 	movhi	r4,4097
10000760:	21054804 	addi	r4,r4,5408
10000764:	00023580 	call	10002358 <puts>
10000768:	00000306 	br	10000778 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
1000076c:	01040074 	movhi	r4,4097
10000770:	21054f04 	addi	r4,r4,5436
10000774:	00023580 	call	10002358 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
10000778:	000123c0 	call	1000123c <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000077c:	00000306 	br	1000078c <main+0x3e8>
	{
		UsbSetAddress();
10000780:	000123c0 	call	1000123c <UsbSetAddress>
		usleep(10*1000);
10000784:	0109c404 	movi	r4,10000
10000788:	000f4400 	call	1000f440 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
1000078c:	010000c4 	movi	r4,3
10000790:	00003300 	call	10000330 <IO_read>
10000794:	10bfffcc 	andi	r2,r2,65535
10000798:	1080040c 	andi	r2,r2,16
1000079c:	103ff826 	beq	r2,zero,10000780 <__alt_data_end+0xf8000780>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007a0:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007a4:	01000084 	movi	r4,2
100007a8:	01414184 	movi	r5,1286
100007ac:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007b0:	0009883a 	mov	r4,zero
100007b4:	00003300 	call	10000330 <IO_read>
100007b8:	10bfffcc 	andi	r2,r2,65535
100007bc:	01040074 	movhi	r4,4097
100007c0:	21055604 	addi	r4,r4,5464
100007c4:	100b883a 	mov	r5,r2
100007c8:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007cc:	01000084 	movi	r4,2
100007d0:	01414204 	movi	r5,1288
100007d4:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100007d8:	0009883a 	mov	r4,zero
100007dc:	00003300 	call	10000330 <IO_read>
100007e0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
100007e4:	e0bffb0b 	ldhu	r2,-20(fp)
100007e8:	01040074 	movhi	r4,4097
100007ec:	21056104 	addi	r4,r4,5508
100007f0:	100b883a 	mov	r5,r2
100007f4:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
100007f8:	e0bffb0b 	ldhu	r2,-20(fp)
100007fc:	108000e0 	cmpeqi	r2,r2,3
10000800:	1000031e 	bne	r2,zero,10000810 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000804:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000808:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
1000080c:	003ef006 	br	100003d0 <__alt_data_end+0xf80003d0>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000810:	01040074 	movhi	r4,4097
10000814:	21056d04 	addi	r4,r4,5556
10000818:	00023580 	call	10002358 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
1000081c:	00013380 	call	10001338 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000820:	00000306 	br	10000830 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
10000824:	00013380 	call	10001338 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000828:	0109c404 	movi	r4,10000
1000082c:	000f4400 	call	1000f440 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000830:	010000c4 	movi	r4,3
10000834:	00003300 	call	10000330 <IO_read>
10000838:	10bfffcc 	andi	r2,r2,65535
1000083c:	1080040c 	andi	r2,r2,16
10000840:	103ff826 	beq	r2,zero,10000824 <__alt_data_end+0xf8000824>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000844:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000848:	01000084 	movi	r4,2
1000084c:	01414184 	movi	r5,1286
10000850:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000854:	0009883a 	mov	r4,zero
10000858:	00003300 	call	10000330 <IO_read>
1000085c:	10bfffcc 	andi	r2,r2,65535
10000860:	01040074 	movhi	r4,4097
10000864:	21057c04 	addi	r4,r4,5616
10000868:	100b883a 	mov	r5,r2
1000086c:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000870:	01000084 	movi	r4,2
10000874:	01414204 	movi	r5,1288
10000878:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
1000087c:	0009883a 	mov	r4,zero
10000880:	00003300 	call	10000330 <IO_read>
10000884:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000888:	e0bffb0b 	ldhu	r2,-20(fp)
1000088c:	01040074 	movhi	r4,4097
10000890:	21058704 	addi	r4,r4,5660
10000894:	100b883a 	mov	r5,r2
10000898:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
1000089c:	00000206 	br	100008a8 <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008a0:	000213c0 	call	1000213c <UsbGetRetryCnt>
100008a4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100008a8:	e0bffb0b 	ldhu	r2,-20(fp)
100008ac:	108000d8 	cmpnei	r2,r2,3
100008b0:	103ffb1e 	bne	r2,zero,100008a0 <__alt_data_end+0xf80008a0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008b4:	01040074 	movhi	r4,4097
100008b8:	21059304 	addi	r4,r4,5708
100008bc:	00023580 	call	10002358 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008c0:	000147c0 	call	1000147c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008c4:	00000306 	br	100008d4 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008c8:	000147c0 	call	1000147c <UsbGetDeviceDesc2>
		usleep(10*1000);
100008cc:	0109c404 	movi	r4,10000
100008d0:	000f4400 	call	1000f440 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008d4:	010000c4 	movi	r4,3
100008d8:	00003300 	call	10000330 <IO_read>
100008dc:	10bfffcc 	andi	r2,r2,65535
100008e0:	1080040c 	andi	r2,r2,16
100008e4:	103ff826 	beq	r2,zero,100008c8 <__alt_data_end+0xf80008c8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100008e8:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100008ec:	01000084 	movi	r4,2
100008f0:	01414184 	movi	r5,1286
100008f4:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
100008f8:	0009883a 	mov	r4,zero
100008fc:	00003300 	call	10000330 <IO_read>
10000900:	10bfffcc 	andi	r2,r2,65535
10000904:	01040074 	movhi	r4,4097
10000908:	21057c04 	addi	r4,r4,5616
1000090c:	100b883a 	mov	r5,r2
10000910:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000914:	01000084 	movi	r4,2
10000918:	01414204 	movi	r5,1288
1000091c:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000920:	0009883a 	mov	r4,zero
10000924:	00003300 	call	10000330 <IO_read>
10000928:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
1000092c:	e0bffb0b 	ldhu	r2,-20(fp)
10000930:	01040074 	movhi	r4,4097
10000934:	21058704 	addi	r4,r4,5660
10000938:	100b883a 	mov	r5,r2
1000093c:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000940:	00000206 	br	1000094c <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000944:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000948:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
1000094c:	e0bffb0b 	ldhu	r2,-20(fp)
10000950:	108000d8 	cmpnei	r2,r2,3
10000954:	103ffb1e 	bne	r2,zero,10000944 <__alt_data_end+0xf8000944>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000958:	01040074 	movhi	r4,4097
1000095c:	2105a704 	addi	r4,r4,5788
10000960:	00023580 	call	10002358 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
10000964:	00016500 	call	10001650 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000968:	00000306 	br	10000978 <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
1000096c:	00016500 	call	10001650 <UsbGetConfigDesc1>
		usleep(10*1000);
10000970:	0109c404 	movi	r4,10000
10000974:	000f4400 	call	1000f440 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000978:	010000c4 	movi	r4,3
1000097c:	00003300 	call	10000330 <IO_read>
10000980:	10bfffcc 	andi	r2,r2,65535
10000984:	1080040c 	andi	r2,r2,16
10000988:	103ff826 	beq	r2,zero,1000096c <__alt_data_end+0xf800096c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000098c:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000990:	01000084 	movi	r4,2
10000994:	01414184 	movi	r5,1286
10000998:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000099c:	0009883a 	mov	r4,zero
100009a0:	00003300 	call	10000330 <IO_read>
100009a4:	10bfffcc 	andi	r2,r2,65535
100009a8:	01040074 	movhi	r4,4097
100009ac:	2105b904 	addi	r4,r4,5860
100009b0:	100b883a 	mov	r5,r2
100009b4:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
100009b8:	01000084 	movi	r4,2
100009bc:	01414204 	movi	r5,1288
100009c0:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100009c4:	0009883a 	mov	r4,zero
100009c8:	00003300 	call	10000330 <IO_read>
100009cc:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
100009d0:	e0bffb0b 	ldhu	r2,-20(fp)
100009d4:	01040074 	movhi	r4,4097
100009d8:	2105c404 	addi	r4,r4,5904
100009dc:	100b883a 	mov	r5,r2
100009e0:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
100009e4:	00000206 	br	100009f0 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100009e8:	000213c0 	call	1000213c <UsbGetRetryCnt>
100009ec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
100009f0:	e0bffb0b 	ldhu	r2,-20(fp)
100009f4:	108000d8 	cmpnei	r2,r2,3
100009f8:	103ffb1e 	bne	r2,zero,100009e8 <__alt_data_end+0xf80009e8>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
100009fc:	01040074 	movhi	r4,4097
10000a00:	2105d004 	addi	r4,r4,5952
10000a04:	00023580 	call	10002358 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a08:	00017dc0 	call	100017dc <UsbGetConfigDesc2>

	usleep(100*1000);
10000a0c:	010000b4 	movhi	r4,2
10000a10:	2121a804 	addi	r4,r4,-31072
10000a14:	000f4400 	call	1000f440 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a18:	00000306 	br	10000a28 <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a1c:	00017dc0 	call	100017dc <UsbGetConfigDesc2>
		usleep(10*1000);
10000a20:	0109c404 	movi	r4,10000
10000a24:	000f4400 	call	1000f440 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a28:	010000c4 	movi	r4,3
10000a2c:	00003300 	call	10000330 <IO_read>
10000a30:	10bfffcc 	andi	r2,r2,65535
10000a34:	1080040c 	andi	r2,r2,16
10000a38:	103ff826 	beq	r2,zero,10000a1c <__alt_data_end+0xf8000a1c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a3c:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a40:	01000084 	movi	r4,2
10000a44:	01414184 	movi	r5,1286
10000a48:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a4c:	0009883a 	mov	r4,zero
10000a50:	00003300 	call	10000330 <IO_read>
10000a54:	10bfffcc 	andi	r2,r2,65535
10000a58:	01040074 	movhi	r4,4097
10000a5c:	2105e304 	addi	r4,r4,6028
10000a60:	100b883a 	mov	r5,r2
10000a64:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000a68:	01000084 	movi	r4,2
10000a6c:	01414204 	movi	r5,1288
10000a70:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a74:	0009883a 	mov	r4,zero
10000a78:	00003300 	call	10000330 <IO_read>
10000a7c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000a80:	e0bffb0b 	ldhu	r2,-20(fp)
10000a84:	01040074 	movhi	r4,4097
10000a88:	2105ee04 	addi	r4,r4,6072
10000a8c:	100b883a 	mov	r5,r2
10000a90:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000a94:	00000206 	br	10000aa0 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a98:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000a9c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000aa0:	e0bffb0b 	ldhu	r2,-20(fp)
10000aa4:	108000d8 	cmpnei	r2,r2,3
10000aa8:	103ffb1e 	bne	r2,zero,10000a98 <__alt_data_end+0xf8000a98>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000aac:	01040074 	movhi	r4,4097
10000ab0:	2105fa04 	addi	r4,r4,6120
10000ab4:	00023580 	call	10002358 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000ab8:	01000084 	movi	r4,2
10000abc:	01415b04 	movi	r5,1388
10000ac0:	00002b80 	call	100002b8 <IO_write>
	code = IO_read(HPI_DATA);
10000ac4:	0009883a 	mov	r4,zero
10000ac8:	00003300 	call	10000330 <IO_read>
10000acc:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
10000ad0:	e0bffe8b 	ldhu	r2,-6(fp)
10000ad4:	108000cc 	andi	r2,r2,3
10000ad8:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
10000adc:	e0bffe8b 	ldhu	r2,-6(fp)
10000ae0:	01040074 	movhi	r4,4097
10000ae4:	21060d04 	addi	r4,r4,6196
10000ae8:	100b883a 	mov	r5,r2
10000aec:	00022640 	call	10002264 <printf>

	if (code == 0x01)
10000af0:	e0bffe8b 	ldhu	r2,-6(fp)
10000af4:	10800058 	cmpnei	r2,r2,1
10000af8:	1000041e 	bne	r2,zero,10000b0c <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000afc:	01040074 	movhi	r4,4097
10000b00:	21061004 	addi	r4,r4,6208
10000b04:	00023580 	call	10002358 <puts>
10000b08:	00000306 	br	10000b18 <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b0c:	01040074 	movhi	r4,4097
10000b10:	21061f04 	addi	r4,r4,6268
10000b14:	00023580 	call	10002358 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b18:	01000084 	movi	r4,2
10000b1c:	01415d84 	movi	r5,1398
10000b20:	00002b80 	call	100002b8 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b24:	0009883a 	mov	r4,zero
10000b28:	0141cfc4 	movi	r5,1855
10000b2c:	00002b80 	call	100002b8 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b30:	0009883a 	mov	r4,zero
10000b34:	01604154 	movui	r5,33029
10000b38:	00002b80 	call	100002b8 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b3c:	0009883a 	mov	r4,zero
10000b40:	014000c4 	movi	r5,3
10000b44:	00002b80 	call	100002b8 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000b48:	0009883a 	mov	r4,zero
10000b4c:	01400204 	movi	r5,8
10000b50:	00002b80 	call	100002b8 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000b54:	0009883a 	mov	r4,zero
10000b58:	016b0294 	movui	r5,44042
10000b5c:	00002b80 	call	100002b8 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000b60:	01006c04 	movi	r4,432
10000b64:	01415d84 	movi	r5,1398
10000b68:	00010f00 	call	100010f0 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000b6c:	01000084 	movi	r4,2
10000b70:	01415f04 	movi	r5,1404
10000b74:	00002b80 	call	100002b8 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000b78:	0009883a 	mov	r4,zero
10000b7c:	00003300 	call	10000330 <IO_read>
10000b80:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000b84:	e0bfff03 	ldbu	r2,-4(fp)
10000b88:	01040074 	movhi	r4,4097
10000b8c:	21062804 	addi	r4,r4,6304
10000b90:	100b883a 	mov	r5,r2
10000b94:	00022640 	call	10002264 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000b98:	0001a400 	call	10001a40 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000b9c:	00000306 	br	10000bac <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000ba0:	0001a400 	call	10001a40 <UsbSetConfig>
		usleep(10*1000);
10000ba4:	0109c404 	movi	r4,10000
10000ba8:	000f4400 	call	1000f440 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bac:	010000c4 	movi	r4,3
10000bb0:	00003300 	call	10000330 <IO_read>
10000bb4:	10bfffcc 	andi	r2,r2,65535
10000bb8:	1080040c 	andi	r2,r2,16
10000bbc:	103ff826 	beq	r2,zero,10000ba0 <__alt_data_end+0xf8000ba0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000bc0:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000bc4:	01000084 	movi	r4,2
10000bc8:	01414184 	movi	r5,1286
10000bcc:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000bd0:	0009883a 	mov	r4,zero
10000bd4:	00003300 	call	10000330 <IO_read>
10000bd8:	10bfffcc 	andi	r2,r2,65535
10000bdc:	01040074 	movhi	r4,4097
10000be0:	21063204 	addi	r4,r4,6344
10000be4:	100b883a 	mov	r5,r2
10000be8:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000bec:	01000084 	movi	r4,2
10000bf0:	01414204 	movi	r5,1288
10000bf4:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000bf8:	0009883a 	mov	r4,zero
10000bfc:	00003300 	call	10000330 <IO_read>
10000c00:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c04:	e0bffb0b 	ldhu	r2,-20(fp)
10000c08:	01040074 	movhi	r4,4097
10000c0c:	21063d04 	addi	r4,r4,6388
10000c10:	100b883a 	mov	r5,r2
10000c14:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000c18:	00000206 	br	10000c24 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c1c:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000c20:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000c24:	e0bffb0b 	ldhu	r2,-20(fp)
10000c28:	108000d8 	cmpnei	r2,r2,3
10000c2c:	103ffb1e 	bne	r2,zero,10000c1c <__alt_data_end+0xf8000c1c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c30:	01040074 	movhi	r4,4097
10000c34:	21064904 	addi	r4,r4,6436
10000c38:	00023580 	call	10002358 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000c3c:	0001b3c0 	call	10001b3c <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c40:	00000306 	br	10000c50 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000c44:	0001b3c0 	call	10001b3c <UsbClassRequest>
		usleep(10*1000);
10000c48:	0109c404 	movi	r4,10000
10000c4c:	000f4400 	call	1000f440 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c50:	010000c4 	movi	r4,3
10000c54:	00003300 	call	10000330 <IO_read>
10000c58:	10bfffcc 	andi	r2,r2,65535
10000c5c:	1080040c 	andi	r2,r2,16
10000c60:	103ff826 	beq	r2,zero,10000c44 <__alt_data_end+0xf8000c44>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c64:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c68:	01000084 	movi	r4,2
10000c6c:	01414184 	movi	r5,1286
10000c70:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c74:	0009883a 	mov	r4,zero
10000c78:	00003300 	call	10000330 <IO_read>
10000c7c:	10bfffcc 	andi	r2,r2,65535
10000c80:	01040074 	movhi	r4,4097
10000c84:	21065b04 	addi	r4,r4,6508
10000c88:	100b883a 	mov	r5,r2
10000c8c:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c90:	01000084 	movi	r4,2
10000c94:	01414204 	movi	r5,1288
10000c98:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c9c:	0009883a 	mov	r4,zero
10000ca0:	00003300 	call	10000330 <IO_read>
10000ca4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000ca8:	e0bffb0b 	ldhu	r2,-20(fp)
10000cac:	01040074 	movhi	r4,4097
10000cb0:	21066604 	addi	r4,r4,6552
10000cb4:	100b883a 	mov	r5,r2
10000cb8:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000cbc:	00000206 	br	10000cc8 <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000cc0:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000cc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000cc8:	e0bffb0b 	ldhu	r2,-20(fp)
10000ccc:	108000d8 	cmpnei	r2,r2,3
10000cd0:	103ffb1e 	bne	r2,zero,10000cc0 <__alt_data_end+0xf8000cc0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000cd4:	01040074 	movhi	r4,4097
10000cd8:	21067204 	addi	r4,r4,6600
10000cdc:	00023580 	call	10002358 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000ce0:	0001c380 	call	10001c38 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ce4:	00000306 	br	10000cf4 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000ce8:	0001c380 	call	10001c38 <UsbGetHidDesc>
		usleep(10*1000);
10000cec:	0109c404 	movi	r4,10000
10000cf0:	000f4400 	call	1000f440 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cf4:	010000c4 	movi	r4,3
10000cf8:	00003300 	call	10000330 <IO_read>
10000cfc:	10bfffcc 	andi	r2,r2,65535
10000d00:	1080040c 	andi	r2,r2,16
10000d04:	103ff826 	beq	r2,zero,10000ce8 <__alt_data_end+0xf8000ce8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d08:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d0c:	01000084 	movi	r4,2
10000d10:	01414184 	movi	r5,1286
10000d14:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d18:	0009883a 	mov	r4,zero
10000d1c:	00003300 	call	10000330 <IO_read>
10000d20:	10bfffcc 	andi	r2,r2,65535
10000d24:	01040074 	movhi	r4,4097
10000d28:	21065b04 	addi	r4,r4,6508
10000d2c:	100b883a 	mov	r5,r2
10000d30:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000d34:	01000084 	movi	r4,2
10000d38:	01414204 	movi	r5,1288
10000d3c:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d40:	0009883a 	mov	r4,zero
10000d44:	00003300 	call	10000330 <IO_read>
10000d48:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d4c:	e0bffb0b 	ldhu	r2,-20(fp)
10000d50:	01040074 	movhi	r4,4097
10000d54:	21066604 	addi	r4,r4,6552
10000d58:	100b883a 	mov	r5,r2
10000d5c:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000d60:	00000206 	br	10000d6c <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d64:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000d68:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000d6c:	e0bffb0b 	ldhu	r2,-20(fp)
10000d70:	108000d8 	cmpnei	r2,r2,3
10000d74:	103ffb1e 	bne	r2,zero,10000d64 <__alt_data_end+0xf8000d64>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000d78:	01040074 	movhi	r4,4097
10000d7c:	21068404 	addi	r4,r4,6672
10000d80:	00023580 	call	10002358 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000d84:	0001d7c0 	call	10001d7c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d88:	00000306 	br	10000d98 <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000d8c:	0001d7c0 	call	10001d7c <UsbGetReportDesc>
		usleep(10*1000);
10000d90:	0109c404 	movi	r4,10000
10000d94:	000f4400 	call	1000f440 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d98:	010000c4 	movi	r4,3
10000d9c:	00003300 	call	10000330 <IO_read>
10000da0:	10bfffcc 	andi	r2,r2,65535
10000da4:	1080040c 	andi	r2,r2,16
10000da8:	103ff826 	beq	r2,zero,10000d8c <__alt_data_end+0xf8000d8c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000dac:	00020b80 	call	100020b8 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000db0:	01000084 	movi	r4,2
10000db4:	01414184 	movi	r5,1286
10000db8:	00002b80 	call	100002b8 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000dbc:	0009883a 	mov	r4,zero
10000dc0:	00003300 	call	10000330 <IO_read>
10000dc4:	10bfffcc 	andi	r2,r2,65535
10000dc8:	01040074 	movhi	r4,4097
10000dcc:	21069804 	addi	r4,r4,6752
10000dd0:	100b883a 	mov	r5,r2
10000dd4:	00022640 	call	10002264 <printf>

	IO_write(HPI_ADDR,0x0508);
10000dd8:	01000084 	movi	r4,2
10000ddc:	01414204 	movi	r5,1288
10000de0:	00002b80 	call	100002b8 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000de4:	0009883a 	mov	r4,zero
10000de8:	00003300 	call	10000330 <IO_read>
10000dec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000df0:	e0bffb0b 	ldhu	r2,-20(fp)
10000df4:	01040074 	movhi	r4,4097
10000df8:	2106a404 	addi	r4,r4,6800
10000dfc:	100b883a 	mov	r5,r2
10000e00:	00022640 	call	10002264 <printf>
	while (usb_ctl_val != 0x03)
10000e04:	00000206 	br	10000e10 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e08:	000213c0 	call	1000213c <UsbGetRetryCnt>
10000e0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
10000e10:	e0bffb0b 	ldhu	r2,-20(fp)
10000e14:	108000d8 	cmpnei	r2,r2,3
10000e18:	103ffb1e 	bne	r2,zero,10000e08 <__alt_data_end+0xf8000e08>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000e1c:	01040074 	movhi	r4,4097
10000e20:	2106b004 	addi	r4,r4,6848
10000e24:	00023580 	call	10002358 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000e28:	0109c404 	movi	r4,10000
10000e2c:	000f4400 	call	1000f440 <usleep>
	while(1)
	{
		toggle++;
10000e30:	e0bffb83 	ldbu	r2,-18(fp)
10000e34:	10800044 	addi	r2,r2,1
10000e38:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000e3c:	01000084 	movi	r4,2
10000e40:	01414004 	movi	r5,1280
10000e44:	00002b80 	call	100002b8 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000e48:	0009883a 	mov	r4,zero
10000e4c:	01414704 	movi	r5,1308
10000e50:	00002b80 	call	100002b8 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000e54:	e0bfff03 	ldbu	r2,-4(fp)
10000e58:	108003cc 	andi	r2,r2,15
10000e5c:	0009883a 	mov	r4,zero
10000e60:	100b883a 	mov	r5,r2
10000e64:	00002b80 	call	100002b8 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000e68:	0009883a 	mov	r4,zero
10000e6c:	0140a444 	movi	r5,657
10000e70:	00002b80 	call	100002b8 <IO_write>
		if(toggle%2)
10000e74:	e0bffb83 	ldbu	r2,-18(fp)
10000e78:	1080004c 	andi	r2,r2,1
10000e7c:	10803fcc 	andi	r2,r2,255
10000e80:	10000426 	beq	r2,zero,10000e94 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000e84:	0009883a 	mov	r4,zero
10000e88:	01400044 	movi	r5,1
10000e8c:	00002b80 	call	100002b8 <IO_write>
10000e90:	00000306 	br	10000ea0 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000e94:	0009883a 	mov	r4,zero
10000e98:	01401044 	movi	r5,65
10000e9c:	00002b80 	call	100002b8 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000ea0:	0009883a 	mov	r4,zero
10000ea4:	014004c4 	movi	r5,19
10000ea8:	00002b80 	call	100002b8 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000eac:	0009883a 	mov	r4,zero
10000eb0:	000b883a 	mov	r5,zero
10000eb4:	00002b80 	call	100002b8 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000eb8:	01006c04 	movi	r4,432
10000ebc:	01414004 	movi	r5,1280
10000ec0:	00010f00 	call	100010f0 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ec4:	00002406 	br	10000f58 <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000ec8:	01000084 	movi	r4,2
10000ecc:	01414004 	movi	r5,1280
10000ed0:	00002b80 	call	100002b8 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	01414704 	movi	r5,1308
10000edc:	00002b80 	call	100002b8 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000ee0:	e0bfff03 	ldbu	r2,-4(fp)
10000ee4:	108003cc 	andi	r2,r2,15
10000ee8:	0009883a 	mov	r4,zero
10000eec:	100b883a 	mov	r5,r2
10000ef0:	00002b80 	call	100002b8 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ef4:	0009883a 	mov	r4,zero
10000ef8:	0140a444 	movi	r5,657
10000efc:	00002b80 	call	100002b8 <IO_write>
			if(toggle%2)
10000f00:	e0bffb83 	ldbu	r2,-18(fp)
10000f04:	1080004c 	andi	r2,r2,1
10000f08:	10803fcc 	andi	r2,r2,255
10000f0c:	10000426 	beq	r2,zero,10000f20 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f10:	0009883a 	mov	r4,zero
10000f14:	01400044 	movi	r5,1
10000f18:	00002b80 	call	100002b8 <IO_write>
10000f1c:	00000306 	br	10000f2c <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000f20:	0009883a 	mov	r4,zero
10000f24:	01401044 	movi	r5,65
10000f28:	00002b80 	call	100002b8 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000f2c:	0009883a 	mov	r4,zero
10000f30:	014004c4 	movi	r5,19
10000f34:	00002b80 	call	100002b8 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000f38:	0009883a 	mov	r4,zero
10000f3c:	000b883a 	mov	r5,zero
10000f40:	00002b80 	call	100002b8 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f44:	01006c04 	movi	r4,432
10000f48:	01414004 	movi	r5,1280
10000f4c:	00010f00 	call	100010f0 <UsbWrite>
			usleep(10*1000);
10000f50:	0109c404 	movi	r4,10000
10000f54:	000f4400 	call	1000f440 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f58:	010000c4 	movi	r4,3
10000f5c:	00003300 	call	10000330 <IO_read>
10000f60:	10bfffcc 	andi	r2,r2,65535
10000f64:	1080040c 	andi	r2,r2,16
10000f68:	103fd726 	beq	r2,zero,10000ec8 <__alt_data_end+0xf8000ec8>
			usleep(10*1000);
		}//end while



		usb_ctl_val = UsbWaitTDListDone();
10000f6c:	00020b80 	call	100020b8 <UsbWaitTDListDone>
10000f70:	e0bffb0d 	sth	r2,-20(fp)

		// packet starts from 0x051c, reading third byte
		// TASK: Write the address to read from the memory for byte 3 of the report descriptor to HPI_ADDR.
		IO_write(HPI_ADDR,0x051e); //the start address
10000f74:	01000084 	movi	r4,2
10000f78:	01414784 	movi	r5,1310
10000f7c:	00002b80 	call	100002b8 <IO_write>
		keycode = IO_read(HPI_DATA);
10000f80:	0009883a 	mov	r4,zero
10000f84:	00003300 	call	10000330 <IO_read>
10000f88:	10bfffcc 	andi	r2,r2,65535
10000f8c:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
10000f90:	01040074 	movhi	r4,4097
10000f94:	2106c404 	addi	r4,r4,6928
10000f98:	e17ffd17 	ldw	r5,-12(fp)
10000f9c:	00022640 	call	10002264 <printf>
		IOWR(KEYCODE_BASE, 0, keycode & 0xff);
10000fa0:	e0bffd17 	ldw	r2,-12(fp)
10000fa4:	10c03fcc 	andi	r3,r2,255
10000fa8:	00802004 	movi	r2,128
10000fac:	10c00035 	stwio	r3,0(r2)


		usleep(200);//usleep(5000);
10000fb0:	01003204 	movi	r4,200
10000fb4:	000f4400 	call	1000f440 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10000fb8:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000fbc:	10bfffcc 	andi	r2,r2,65535
10000fc0:	1009883a 	mov	r4,r2
10000fc4:	00011480 	call	10001148 <UsbRead>
10000fc8:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
10000fcc:	d0a6cb8b 	ldhu	r2,-25810(gp)
10000fd0:	e0fffb0b 	ldhu	r3,-20(fp)
10000fd4:	1884703a 	and	r2,r3,r2
10000fd8:	10bfffcc 	andi	r2,r2,65535
10000fdc:	1000201e 	bne	r2,zero,10001060 <main+0xcbc>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10000fe0:	e03ffbc5 	stb	zero,-17(fp)
10000fe4:	00001006 	br	10001028 <main+0xc84>
			{
				usleep(5*1000);
10000fe8:	0104e204 	movi	r4,5000
10000fec:	000f4400 	call	1000f440 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10000ff0:	d0a6cb0b 	ldhu	r2,-25812(gp)
10000ff4:	10bfffcc 	andi	r2,r2,65535
10000ff8:	1009883a 	mov	r4,r2
10000ffc:	00011480 	call	10001148 <UsbRead>
10001000:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
10001004:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001008:	e0fffb0b 	ldhu	r3,-20(fp)
1000100c:	1884703a 	and	r2,r3,r2
10001010:	10bfffcc 	andi	r2,r2,65535
10001014:	10000126 	beq	r2,zero,1000101c <main+0xc78>
10001018:	00000606 	br	10001034 <main+0xc90>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
1000101c:	e0bffbc3 	ldbu	r2,-17(fp)
10001020:	10800044 	addi	r2,r2,1
10001024:	e0bffbc5 	stb	r2,-17(fp)
10001028:	e0bffbc3 	ldbu	r2,-17(fp)
1000102c:	108001f0 	cmpltui	r2,r2,7
10001030:	103fed1e 	bne	r2,zero,10000fe8 <__alt_data_end+0xf8000fe8>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
10001034:	d0a6cb8b 	ldhu	r2,-25810(gp)
10001038:	e0fffb0b 	ldhu	r3,-20(fp)
1000103c:	1884703a 	and	r2,r3,r2
10001040:	10bfffcc 	andi	r2,r2,65535
10001044:	1000061e 	bne	r2,zero,10001060 <main+0xcbc>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
10001048:	01040074 	movhi	r4,4097
1000104c:	2106cd04 	addi	r4,r4,6964
10001050:	00023580 	call	10002358 <puts>
				printf("[INFO]: please insert again!!! \n");
10001054:	01040074 	movhi	r4,4097
10001058:	2106d804 	addi	r4,r4,7008
1000105c:	00023580 	call	10002358 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
10001060:	00001d06 	br	100010d8 <main+0xd34>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001064:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001068:	10bfffcc 	andi	r2,r2,65535
1000106c:	1009883a 	mov	r4,r2
10001070:	00011480 	call	10001148 <UsbRead>
10001074:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001078:	0104e204 	movi	r4,5000
1000107c:	000f4400 	call	1000f440 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001080:	d0a6cb0b 	ldhu	r2,-25812(gp)
10001084:	10bfffcc 	andi	r2,r2,65535
10001088:	1009883a 	mov	r4,r2
1000108c:	00011480 	call	10001148 <UsbRead>
10001090:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
10001094:	0104e204 	movi	r4,5000
10001098:	000f4400 	call	1000f440 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000109c:	d0a6cb0b 	ldhu	r2,-25812(gp)
100010a0:	10bfffcc 	andi	r2,r2,65535
100010a4:	1009883a 	mov	r4,r2
100010a8:	00011480 	call	10001148 <UsbRead>
100010ac:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
100010b0:	0104e204 	movi	r4,5000
100010b4:	000f4400 	call	1000f440 <usleep>

			if(usb_ctl_val & no_device)
100010b8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010bc:	e0fffb0b 	ldhu	r3,-20(fp)
100010c0:	1884703a 	and	r2,r3,r2
100010c4:	10bfffcc 	andi	r2,r2,65535
100010c8:	10000126 	beq	r2,zero,100010d0 <main+0xd2c>
				goto USB_HOT_PLUG;
100010cc:	003cc006 	br	100003d0 <__alt_data_end+0xf80003d0>

			usleep(200);
100010d0:	01003204 	movi	r4,200
100010d4:	000f4400 	call	1000f440 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
100010d8:	d0a6cb8b 	ldhu	r2,-25810(gp)
100010dc:	e0fffb0b 	ldhu	r3,-20(fp)
100010e0:	1884703a 	and	r2,r3,r2
100010e4:	10bfffcc 	andi	r2,r2,65535
100010e8:	103fde26 	beq	r2,zero,10001064 <__alt_data_end+0xf8001064>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
100010ec:	003f5006 	br	10000e30 <__alt_data_end+0xf8000e30>

100010f0 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
100010f0:	defffc04 	addi	sp,sp,-16
100010f4:	dfc00315 	stw	ra,12(sp)
100010f8:	df000215 	stw	fp,8(sp)
100010fc:	df000204 	addi	fp,sp,8
10001100:	2007883a 	mov	r3,r4
10001104:	2805883a 	mov	r2,r5
10001108:	e0fffe0d 	sth	r3,-8(fp)
1000110c:	e0bfff0d 	sth	r2,-4(fp)
    // Set the address we want to write to
    IO_write(HPI_ADDR, Address);
10001110:	e0bffe0b 	ldhu	r2,-8(fp)
10001114:	01000084 	movi	r4,2
10001118:	100b883a 	mov	r5,r2
1000111c:	00002b80 	call	100002b8 <IO_write>

    // Set the data register we want to write to
    IO_write(HPI_DATA, Data);
10001120:	e0bfff0b 	ldhu	r2,-4(fp)
10001124:	0009883a 	mov	r4,zero
10001128:	100b883a 	mov	r5,r2
1000112c:	00002b80 	call	100002b8 <IO_write>

    return;
10001130:	0001883a 	nop
}
10001134:	e037883a 	mov	sp,fp
10001138:	dfc00117 	ldw	ra,4(sp)
1000113c:	df000017 	ldw	fp,0(sp)
10001140:	dec00204 	addi	sp,sp,8
10001144:	f800283a 	ret

10001148 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
10001148:	defffd04 	addi	sp,sp,-12
1000114c:	dfc00215 	stw	ra,8(sp)
10001150:	df000115 	stw	fp,4(sp)
10001154:	df000104 	addi	fp,sp,4
10001158:	2005883a 	mov	r2,r4
1000115c:	e0bfff0d 	sth	r2,-4(fp)
    // Set the address we want to read from
    IO_write(HPI_ADDR, Address);
10001160:	e0bfff0b 	ldhu	r2,-4(fp)
10001164:	01000084 	movi	r4,2
10001168:	100b883a 	mov	r5,r2
1000116c:	00002b80 	call	100002b8 <IO_write>

    return IO_read(HPI_DATA);
10001170:	0009883a 	mov	r4,zero
10001174:	00003300 	call	10000330 <IO_read>
}
10001178:	e037883a 	mov	sp,fp
1000117c:	dfc00117 	ldw	ra,4(sp)
10001180:	df000017 	ldw	fp,0(sp)
10001184:	dec00204 	addi	sp,sp,8
10001188:	f800283a 	ret

1000118c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
1000118c:	defffe04 	addi	sp,sp,-8
10001190:	dfc00115 	stw	ra,4(sp)
10001194:	df000015 	stw	fp,0(sp)
10001198:	d839883a 	mov	fp,sp
    //XIo_Out16(USB_MAILBOX, COMM_RESET);
    IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
1000119c:	01000044 	movi	r4,1
100011a0:	017e9414 	movui	r5,64080
100011a4:	00002b80 	call	100002b8 <IO_write>
    usleep(100000);
100011a8:	010000b4 	movhi	r4,2
100011ac:	2121a804 	addi	r4,r4,-31072
100011b0:	000f4400 	call	1000f440 <usleep>
    printf("[USB INIT]:reset finished!\n");
100011b4:	01040074 	movhi	r4,4097
100011b8:	2106e004 	addi	r4,r4,7040
100011bc:	00023580 	call	10002358 <puts>

    usleep(500000);
100011c0:	01000234 	movhi	r4,8
100011c4:	21284804 	addi	r4,r4,-24288
100011c8:	000f4400 	call	1000f440 <usleep>
    printf("[USB INIT]:Clear up the interrupt\r\n");
100011cc:	01040074 	movhi	r4,4097
100011d0:	2106e704 	addi	r4,r4,7068
100011d4:	00023580 	call	10002358 <puts>
    IO_read(HPI_MAILBOX);
100011d8:	01000044 	movi	r4,1
100011dc:	00003300 	call	10000330 <IO_read>
    IO_read(HPI_STATUS);
100011e0:	010000c4 	movi	r4,3
100011e4:	00003300 	call	10000330 <IO_read>

    // Had to add the write due to a bug in BIOS where they overwrite
    // the mailbox after initialization with garbage.  The read clears
    // any pending interrupts.
    UsbRead (HPI_SIE1_MSG_ADR);
100011e8:	01005104 	movi	r4,324
100011ec:	00011480 	call	10001148 <UsbRead>
    UsbWrite (HPI_SIE1_MSG_ADR, 0);
100011f0:	01005104 	movi	r4,324
100011f4:	000b883a 	mov	r5,zero
100011f8:	00010f00 	call	100010f0 <UsbWrite>
    UsbRead (HPI_SIE2_MSG_ADR);
100011fc:	01005204 	movi	r4,328
10001200:	00011480 	call	10001148 <UsbRead>
    UsbWrite (HPI_SIE2_MSG_ADR, 0);
10001204:	01005204 	movi	r4,328
10001208:	000b883a 	mov	r5,zero
1000120c:	00010f00 	call	100010f0 <UsbWrite>


    UsbWrite (HOST1_STAT_REG, 0xFFFF);
10001210:	01302414 	movui	r4,49296
10001214:	017fffd4 	movui	r5,65535
10001218:	00010f00 	call	100010f0 <UsbWrite>
    UsbWrite (HOST2_STAT_REG, 0xFFFF);
1000121c:	01302c14 	movui	r4,49328
10001220:	017fffd4 	movui	r5,65535
10001224:	00010f00 	call	100010f0 <UsbWrite>
}
10001228:	e037883a 	mov	sp,fp
1000122c:	dfc00117 	ldw	ra,4(sp)
10001230:	df000017 	ldw	fp,0(sp)
10001234:	dec00204 	addi	sp,sp,8
10001238:	f800283a 	ret

1000123c <UsbSetAddress>:


void UsbSetAddress()
{
1000123c:	defffe04 	addi	sp,sp,-8
10001240:	dfc00115 	stw	ra,4(sp)
10001244:	df000015 	stw	fp,0(sp)
10001248:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
1000124c:	01000084 	movi	r4,2
10001250:	01414004 	movi	r5,1280
10001254:	00002b80 	call	100002b8 <IO_write>
    // TD #1: 6 writes
    IO_write(HPI_DATA,0x050C);
10001258:	0009883a 	mov	r4,zero
1000125c:	01414304 	movi	r5,1292
10001260:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001264:	0009883a 	mov	r4,zero
10001268:	01400204 	movi	r5,8
1000126c:	00002b80 	call	100002b8 <IO_write>
    // TASK: Complete with 4 more IOWR functions
    IO_write(HPI_DATA,0x00D0);
10001270:	0009883a 	mov	r4,zero
10001274:	01403404 	movi	r5,208
10001278:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
1000127c:	0009883a 	mov	r4,zero
10001280:	01400044 	movi	r5,1
10001284:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001288:	0009883a 	mov	r4,zero
1000128c:	014004c4 	movi	r5,19
10001290:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001294:	0009883a 	mov	r4,zero
10001298:	01414504 	movi	r5,1300
1000129c:	00002b80 	call	100002b8 <IO_write>
    // TD #2: 4 writes
    // TASK: Complete with 4 IOWR functions
    IO_write(HPI_DATA,0x0500);
100012a0:	0009883a 	mov	r4,zero
100012a4:	01414004 	movi	r5,1280
100012a8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0002);
100012ac:	0009883a 	mov	r4,zero
100012b0:	01400084 	movi	r5,2
100012b4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
100012b8:	0009883a 	mov	r4,zero
100012bc:	000b883a 	mov	r5,zero
100012c0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
100012c4:	0009883a 	mov	r4,zero
100012c8:	000b883a 	mov	r5,zero
100012cc:	00002b80 	call	100002b8 <IO_write>
    // TD #3: 6 writes
    // TASK: Complete with 6 IOWR functions
    IO_write(HPI_DATA,0x0000); //
100012d0:	0009883a 	mov	r4,zero
100012d4:	000b883a 	mov	r5,zero
100012d8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//
100012dc:	0009883a 	mov	r4,zero
100012e0:	000b883a 	mov	r5,zero
100012e4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0090);//
100012e8:	0009883a 	mov	r4,zero
100012ec:	01402404 	movi	r5,144
100012f0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);
100012f4:	0009883a 	mov	r4,zero
100012f8:	01401044 	movi	r5,65
100012fc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001300:	0009883a 	mov	r4,zero
10001304:	014004c4 	movi	r5,19
10001308:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
1000130c:	0009883a 	mov	r4,zero
10001310:	000b883a 	mov	r5,zero
10001314:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001318:	01006c04 	movi	r4,432
1000131c:	01414004 	movi	r5,1280
10001320:	00010f00 	call	100010f0 <UsbWrite>
}
10001324:	e037883a 	mov	sp,fp
10001328:	dfc00117 	ldw	ra,4(sp)
1000132c:	df000017 	ldw	fp,0(sp)
10001330:	dec00204 	addi	sp,sp,8
10001334:	f800283a 	ret

10001338 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
10001338:	defffe04 	addi	sp,sp,-8
1000133c:	dfc00115 	stw	ra,4(sp)
10001340:	df000015 	stw	fp,0(sp)
10001344:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001348:	01000084 	movi	r4,2
1000134c:	01414004 	movi	r5,1280
10001350:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001354:	0009883a 	mov	r4,zero
10001358:	01414304 	movi	r5,1292
1000135c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001360:	0009883a 	mov	r4,zero
10001364:	01400204 	movi	r5,8
10001368:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //device address
1000136c:	0009883a 	mov	r4,zero
10001370:	0140b404 	movi	r5,720
10001374:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001378:	0009883a 	mov	r4,zero
1000137c:	01400044 	movi	r5,1
10001380:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001384:	0009883a 	mov	r4,zero
10001388:	014004c4 	movi	r5,19
1000138c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001390:	0009883a 	mov	r4,zero
10001394:	01414504 	movi	r5,1300
10001398:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0680);//c
1000139c:	0009883a 	mov	r4,zero
100013a0:	0141a004 	movi	r5,1664
100013a4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0100); //device 0x01
100013a8:	0009883a 	mov	r4,zero
100013ac:	01404004 	movi	r5,256
100013b0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
100013b4:	0009883a 	mov	r4,zero
100013b8:	000b883a 	mov	r5,zero
100013bc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);
100013c0:	0009883a 	mov	r4,zero
100013c4:	01400204 	movi	r5,8
100013c8:	00002b80 	call	100002b8 <IO_write>

    //data phase IN
    IO_write(HPI_DATA,0x052C); //
100013cc:	0009883a 	mov	r4,zero
100013d0:	01414b04 	movi	r5,1324
100013d4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//
100013d8:	0009883a 	mov	r4,zero
100013dc:	01400204 	movi	r5,8
100013e0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//
100013e4:	0009883a 	mov	r4,zero
100013e8:	0140a404 	movi	r5,656
100013ec:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);
100013f0:	0009883a 	mov	r4,zero
100013f4:	01401044 	movi	r5,65
100013f8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
100013fc:	0009883a 	mov	r4,zero
10001400:	014004c4 	movi	r5,19
10001404:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);
10001408:	0009883a 	mov	r4,zero
1000140c:	01414804 	movi	r5,1312
10001410:	00002b80 	call	100002b8 <IO_write>

    //    //status phase
    IO_write(HPI_DATA,0x0000); //don't care
10001414:	0009883a 	mov	r4,zero
10001418:	000b883a 	mov	r5,zero
1000141c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//port number
10001420:	0009883a 	mov	r4,zero
10001424:	000b883a 	mov	r5,zero
10001428:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//device address
1000142c:	0009883a 	mov	r4,zero
10001430:	01408404 	movi	r5,528
10001434:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);
10001438:	0009883a 	mov	r4,zero
1000143c:	01401044 	movi	r5,65
10001440:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001444:	0009883a 	mov	r4,zero
10001448:	014004c4 	movi	r5,19
1000144c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001450:	0009883a 	mov	r4,zero
10001454:	000b883a 	mov	r5,zero
10001458:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
1000145c:	01006c04 	movi	r4,432
10001460:	01414004 	movi	r5,1280
10001464:	00010f00 	call	100010f0 <UsbWrite>
}
10001468:	e037883a 	mov	sp,fp
1000146c:	dfc00117 	ldw	ra,4(sp)
10001470:	df000017 	ldw	fp,0(sp)
10001474:	dec00204 	addi	sp,sp,8
10001478:	f800283a 	ret

1000147c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
1000147c:	defffe04 	addi	sp,sp,-8
10001480:	dfc00115 	stw	ra,4(sp)
10001484:	df000015 	stw	fp,0(sp)
10001488:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
1000148c:	01000084 	movi	r4,2
10001490:	01414004 	movi	r5,1280
10001494:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001498:	0009883a 	mov	r4,zero
1000149c:	01414304 	movi	r5,1292
100014a0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
100014a4:	0009883a 	mov	r4,zero
100014a8:	01400204 	movi	r5,8
100014ac:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //device address
100014b0:	0009883a 	mov	r4,zero
100014b4:	0140b404 	movi	r5,720
100014b8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
100014bc:	0009883a 	mov	r4,zero
100014c0:	01400044 	movi	r5,1
100014c4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
100014c8:	0009883a 	mov	r4,zero
100014cc:	014004c4 	movi	r5,19
100014d0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
100014d4:	0009883a 	mov	r4,zero
100014d8:	01414504 	movi	r5,1300
100014dc:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0680);//c
100014e0:	0009883a 	mov	r4,zero
100014e4:	0141a004 	movi	r5,1664
100014e8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0100);//e //device 0x01
100014ec:	0009883a 	mov	r4,zero
100014f0:	01404004 	movi	r5,256
100014f4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//0
100014f8:	0009883a 	mov	r4,zero
100014fc:	000b883a 	mov	r5,zero
10001500:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0012);//2
10001504:	0009883a 	mov	r4,zero
10001508:	01400484 	movi	r5,18
1000150c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-1
    IO_write(HPI_DATA,0x0544); //514
10001510:	0009883a 	mov	r4,zero
10001514:	01415104 	movi	r5,1348
10001518:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
1000151c:	0009883a 	mov	r4,zero
10001520:	01400204 	movi	r5,8
10001524:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
10001528:	0009883a 	mov	r4,zero
1000152c:	0140a404 	movi	r5,656
10001530:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10001534:	0009883a 	mov	r4,zero
10001538:	01401044 	movi	r5,65
1000153c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10001540:	0009883a 	mov	r4,zero
10001544:	014004c4 	movi	r5,19
10001548:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);//e
1000154c:	0009883a 	mov	r4,zero
10001550:	01414804 	movi	r5,1312
10001554:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-2
    IO_write(HPI_DATA,0x054c); //520
10001558:	0009883a 	mov	r4,zero
1000155c:	01415304 	movi	r5,1356
10001560:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//2
10001564:	0009883a 	mov	r4,zero
10001568:	01400204 	movi	r5,8
1000156c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//4
10001570:	0009883a 	mov	r4,zero
10001574:	0140a404 	movi	r5,656
10001578:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//6
1000157c:	0009883a 	mov	r4,zero
10001580:	01400044 	movi	r5,1
10001584:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
10001588:	0009883a 	mov	r4,zero
1000158c:	014004c4 	movi	r5,19
10001590:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x052c);//a
10001594:	0009883a 	mov	r4,zero
10001598:	01414b04 	movi	r5,1324
1000159c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-3
    IO_write(HPI_DATA,0x0554); //c
100015a0:	0009883a 	mov	r4,zero
100015a4:	01415504 	movi	r5,1364
100015a8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0002);//e
100015ac:	0009883a 	mov	r4,zero
100015b0:	01400084 	movi	r5,2
100015b4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//530
100015b8:	0009883a 	mov	r4,zero
100015bc:	0140a404 	movi	r5,656
100015c0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2
100015c4:	0009883a 	mov	r4,zero
100015c8:	01401044 	movi	r5,65
100015cc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
100015d0:	0009883a 	mov	r4,zero
100015d4:	014004c4 	movi	r5,19
100015d8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0538);//6
100015dc:	0009883a 	mov	r4,zero
100015e0:	01414e04 	movi	r5,1336
100015e4:	00002b80 	call	100002b8 <IO_write>

    //status phase
    IO_write(HPI_DATA,0x0000); //538
100015e8:	0009883a 	mov	r4,zero
100015ec:	000b883a 	mov	r5,zero
100015f0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//a
100015f4:	0009883a 	mov	r4,zero
100015f8:	000b883a 	mov	r5,zero
100015fc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//c
10001600:	0009883a 	mov	r4,zero
10001604:	01408404 	movi	r5,528
10001608:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//e
1000160c:	0009883a 	mov	r4,zero
10001610:	01401044 	movi	r5,65
10001614:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//540
10001618:	0009883a 	mov	r4,zero
1000161c:	014004c4 	movi	r5,19
10001620:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//2
10001624:	0009883a 	mov	r4,zero
10001628:	000b883a 	mov	r5,zero
1000162c:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001630:	01006c04 	movi	r4,432
10001634:	01414004 	movi	r5,1280
10001638:	00010f00 	call	100010f0 <UsbWrite>
}
1000163c:	e037883a 	mov	sp,fp
10001640:	dfc00117 	ldw	ra,4(sp)
10001644:	df000017 	ldw	fp,0(sp)
10001648:	dec00204 	addi	sp,sp,8
1000164c:	f800283a 	ret

10001650 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001650:	defffe04 	addi	sp,sp,-8
10001654:	dfc00115 	stw	ra,4(sp)
10001658:	df000015 	stw	fp,0(sp)
1000165c:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001660:	01000084 	movi	r4,2
10001664:	01414004 	movi	r5,1280
10001668:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
1000166c:	0009883a 	mov	r4,zero
10001670:	01414304 	movi	r5,1292
10001674:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001678:	0009883a 	mov	r4,zero
1000167c:	01400204 	movi	r5,8
10001680:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //device address
10001684:	0009883a 	mov	r4,zero
10001688:	0140b404 	movi	r5,720
1000168c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001690:	0009883a 	mov	r4,zero
10001694:	01400044 	movi	r5,1
10001698:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
1000169c:	0009883a 	mov	r4,zero
100016a0:	014004c4 	movi	r5,19
100016a4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
100016a8:	0009883a 	mov	r4,zero
100016ac:	01414504 	movi	r5,1300
100016b0:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0680);//c
100016b4:	0009883a 	mov	r4,zero
100016b8:	0141a004 	movi	r5,1664
100016bc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0200);//e //config 0x02
100016c0:	0009883a 	mov	r4,zero
100016c4:	01408004 	movi	r5,512
100016c8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//0
100016cc:	0009883a 	mov	r4,zero
100016d0:	000b883a 	mov	r5,zero
100016d4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0009);//2
100016d8:	0009883a 	mov	r4,zero
100016dc:	01400244 	movi	r5,9
100016e0:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-1
    IO_write(HPI_DATA,0x0544); //514
100016e4:	0009883a 	mov	r4,zero
100016e8:	01415104 	movi	r5,1348
100016ec:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
100016f0:	0009883a 	mov	r4,zero
100016f4:	01400204 	movi	r5,8
100016f8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
100016fc:	0009883a 	mov	r4,zero
10001700:	0140a404 	movi	r5,656
10001704:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10001708:	0009883a 	mov	r4,zero
1000170c:	01401044 	movi	r5,65
10001710:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10001714:	0009883a 	mov	r4,zero
10001718:	014004c4 	movi	r5,19
1000171c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);//e
10001720:	0009883a 	mov	r4,zero
10001724:	01414804 	movi	r5,1312
10001728:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-2
    IO_write(HPI_DATA,0x054c); //520
1000172c:	0009883a 	mov	r4,zero
10001730:	01415304 	movi	r5,1356
10001734:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//2
10001738:	0009883a 	mov	r4,zero
1000173c:	01400044 	movi	r5,1
10001740:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//4
10001744:	0009883a 	mov	r4,zero
10001748:	0140a404 	movi	r5,656
1000174c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//6 //data0
10001750:	0009883a 	mov	r4,zero
10001754:	01400044 	movi	r5,1
10001758:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
1000175c:	0009883a 	mov	r4,zero
10001760:	014004c4 	movi	r5,19
10001764:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x052c);//a
10001768:	0009883a 	mov	r4,zero
1000176c:	01414b04 	movi	r5,1324
10001770:	00002b80 	call	100002b8 <IO_write>

    //status phase
    IO_write(HPI_DATA,0x0000); //52c
10001774:	0009883a 	mov	r4,zero
10001778:	000b883a 	mov	r5,zero
1000177c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//e
10001780:	0009883a 	mov	r4,zero
10001784:	000b883a 	mov	r5,zero
10001788:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//530
1000178c:	0009883a 	mov	r4,zero
10001790:	01408404 	movi	r5,528
10001794:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2
10001798:	0009883a 	mov	r4,zero
1000179c:	01401044 	movi	r5,65
100017a0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
100017a4:	0009883a 	mov	r4,zero
100017a8:	014004c4 	movi	r5,19
100017ac:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//6
100017b0:	0009883a 	mov	r4,zero
100017b4:	000b883a 	mov	r5,zero
100017b8:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100017bc:	01006c04 	movi	r4,432
100017c0:	01414004 	movi	r5,1280
100017c4:	00010f00 	call	100010f0 <UsbWrite>
}
100017c8:	e037883a 	mov	sp,fp
100017cc:	dfc00117 	ldw	ra,4(sp)
100017d0:	df000017 	ldw	fp,0(sp)
100017d4:	dec00204 	addi	sp,sp,8
100017d8:	f800283a 	ret

100017dc <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
100017dc:	defffe04 	addi	sp,sp,-8
100017e0:	dfc00115 	stw	ra,4(sp)
100017e4:	df000015 	stw	fp,0(sp)
100017e8:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
100017ec:	01000084 	movi	r4,2
100017f0:	01414004 	movi	r5,1280
100017f4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
100017f8:	0009883a 	mov	r4,zero
100017fc:	01414304 	movi	r5,1292
10001800:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001804:	0009883a 	mov	r4,zero
10001808:	01400204 	movi	r5,8
1000180c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //device address
10001810:	0009883a 	mov	r4,zero
10001814:	0140b404 	movi	r5,720
10001818:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
1000181c:	0009883a 	mov	r4,zero
10001820:	01400044 	movi	r5,1
10001824:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001828:	0009883a 	mov	r4,zero
1000182c:	014004c4 	movi	r5,19
10001830:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001834:	0009883a 	mov	r4,zero
10001838:	01414504 	movi	r5,1300
1000183c:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0680);//c
10001840:	0009883a 	mov	r4,zero
10001844:	0141a004 	movi	r5,1664
10001848:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0200);//e //config 0x02
1000184c:	0009883a 	mov	r4,zero
10001850:	01408004 	movi	r5,512
10001854:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//0
10001858:	0009883a 	mov	r4,zero
1000185c:	000b883a 	mov	r5,zero
10001860:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x00FF);//2
10001864:	0009883a 	mov	r4,zero
10001868:	01403fc4 	movi	r5,255
1000186c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-1
    IO_write(HPI_DATA,0x055c); //514
10001870:	0009883a 	mov	r4,zero
10001874:	01415704 	movi	r5,1372
10001878:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
1000187c:	0009883a 	mov	r4,zero
10001880:	01400204 	movi	r5,8
10001884:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
10001888:	0009883a 	mov	r4,zero
1000188c:	0140a404 	movi	r5,656
10001890:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10001894:	0009883a 	mov	r4,zero
10001898:	01401044 	movi	r5,65
1000189c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
100018a0:	0009883a 	mov	r4,zero
100018a4:	014004c4 	movi	r5,19
100018a8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);//e
100018ac:	0009883a 	mov	r4,zero
100018b0:	01414804 	movi	r5,1312
100018b4:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-2
    IO_write(HPI_DATA,0x0564); //520
100018b8:	0009883a 	mov	r4,zero
100018bc:	01415904 	movi	r5,1380
100018c0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//2
100018c4:	0009883a 	mov	r4,zero
100018c8:	01400204 	movi	r5,8
100018cc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//4
100018d0:	0009883a 	mov	r4,zero
100018d4:	0140a404 	movi	r5,656
100018d8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//6 //data0
100018dc:	0009883a 	mov	r4,zero
100018e0:	01400044 	movi	r5,1
100018e4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
100018e8:	0009883a 	mov	r4,zero
100018ec:	014004c4 	movi	r5,19
100018f0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x052c);//a
100018f4:	0009883a 	mov	r4,zero
100018f8:	01414b04 	movi	r5,1324
100018fc:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-3
    IO_write(HPI_DATA,0x056c); //52c
10001900:	0009883a 	mov	r4,zero
10001904:	01415b04 	movi	r5,1388
10001908:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//e
1000190c:	0009883a 	mov	r4,zero
10001910:	01400204 	movi	r5,8
10001914:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//530
10001918:	0009883a 	mov	r4,zero
1000191c:	0140a404 	movi	r5,656
10001920:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2
10001924:	0009883a 	mov	r4,zero
10001928:	01401044 	movi	r5,65
1000192c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
10001930:	0009883a 	mov	r4,zero
10001934:	014004c4 	movi	r5,19
10001938:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0538);//6
1000193c:	0009883a 	mov	r4,zero
10001940:	01414e04 	movi	r5,1336
10001944:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-4
    IO_write(HPI_DATA,0x0574); //538
10001948:	0009883a 	mov	r4,zero
1000194c:	01415d04 	movi	r5,1396
10001950:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//a
10001954:	0009883a 	mov	r4,zero
10001958:	01400204 	movi	r5,8
1000195c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//c
10001960:	0009883a 	mov	r4,zero
10001964:	0140a404 	movi	r5,656
10001968:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//e //data0
1000196c:	0009883a 	mov	r4,zero
10001970:	01400044 	movi	r5,1
10001974:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//540
10001978:	0009883a 	mov	r4,zero
1000197c:	014004c4 	movi	r5,19
10001980:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0544);//2
10001984:	0009883a 	mov	r4,zero
10001988:	01415104 	movi	r5,1348
1000198c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-5
    IO_write(HPI_DATA,0x057c); //544
10001990:	0009883a 	mov	r4,zero
10001994:	01415f04 	movi	r5,1404
10001998:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0002);//6
1000199c:	0009883a 	mov	r4,zero
100019a0:	01400084 	movi	r5,2
100019a4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
100019a8:	0009883a 	mov	r4,zero
100019ac:	0140a404 	movi	r5,656
100019b0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a //data1
100019b4:	0009883a 	mov	r4,zero
100019b8:	01401044 	movi	r5,65
100019bc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
100019c0:	0009883a 	mov	r4,zero
100019c4:	014004c4 	movi	r5,19
100019c8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0550);//e
100019cc:	0009883a 	mov	r4,zero
100019d0:	01415404 	movi	r5,1360
100019d4:	00002b80 	call	100002b8 <IO_write>

    //status phase
    IO_write(HPI_DATA,0x0000); //550
100019d8:	0009883a 	mov	r4,zero
100019dc:	000b883a 	mov	r5,zero
100019e0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//2
100019e4:	0009883a 	mov	r4,zero
100019e8:	000b883a 	mov	r5,zero
100019ec:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//4
100019f0:	0009883a 	mov	r4,zero
100019f4:	01408404 	movi	r5,528
100019f8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//6
100019fc:	0009883a 	mov	r4,zero
10001a00:	01401044 	movi	r5,65
10001a04:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
10001a08:	0009883a 	mov	r4,zero
10001a0c:	014004c4 	movi	r5,19
10001a10:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//a
10001a14:	0009883a 	mov	r4,zero
10001a18:	000b883a 	mov	r5,zero
10001a1c:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001a20:	01006c04 	movi	r4,432
10001a24:	01414004 	movi	r5,1280
10001a28:	00010f00 	call	100010f0 <UsbWrite>
}
10001a2c:	e037883a 	mov	sp,fp
10001a30:	dfc00117 	ldw	ra,4(sp)
10001a34:	df000017 	ldw	fp,0(sp)
10001a38:	dec00204 	addi	sp,sp,8
10001a3c:	f800283a 	ret

10001a40 <UsbSetConfig>:

void UsbSetConfig()
{
10001a40:	defffe04 	addi	sp,sp,-8
10001a44:	dfc00115 	stw	ra,4(sp)
10001a48:	df000015 	stw	fp,0(sp)
10001a4c:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001a50:	01000084 	movi	r4,2
10001a54:	01414004 	movi	r5,1280
10001a58:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001a5c:	0009883a 	mov	r4,zero
10001a60:	01414304 	movi	r5,1292
10001a64:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001a68:	0009883a 	mov	r4,zero
10001a6c:	01400204 	movi	r5,8
10001a70:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //port address
10001a74:	0009883a 	mov	r4,zero
10001a78:	0140b404 	movi	r5,720
10001a7c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001a80:	0009883a 	mov	r4,zero
10001a84:	01400044 	movi	r5,1
10001a88:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001a8c:	0009883a 	mov	r4,zero
10001a90:	014004c4 	movi	r5,19
10001a94:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001a98:	0009883a 	mov	r4,zero
10001a9c:	01414504 	movi	r5,1300
10001aa0:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0900);
10001aa4:	0009883a 	mov	r4,zero
10001aa8:	01424004 	movi	r5,2304
10001aac:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//device address
10001ab0:	0009883a 	mov	r4,zero
10001ab4:	01400044 	movi	r5,1
10001ab8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001abc:	0009883a 	mov	r4,zero
10001ac0:	000b883a 	mov	r5,zero
10001ac4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001ac8:	0009883a 	mov	r4,zero
10001acc:	000b883a 	mov	r5,zero
10001ad0:	00002b80 	call	100002b8 <IO_write>
    //in packet
    IO_write(HPI_DATA,0x0000); //don't care
10001ad4:	0009883a 	mov	r4,zero
10001ad8:	000b883a 	mov	r5,zero
10001adc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//port number
10001ae0:	0009883a 	mov	r4,zero
10001ae4:	000b883a 	mov	r5,zero
10001ae8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//device address
10001aec:	0009883a 	mov	r4,zero
10001af0:	0140a404 	movi	r5,656
10001af4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041); //data 1
10001af8:	0009883a 	mov	r4,zero
10001afc:	01401044 	movi	r5,65
10001b00:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001b04:	0009883a 	mov	r4,zero
10001b08:	014004c4 	movi	r5,19
10001b0c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001b10:	0009883a 	mov	r4,zero
10001b14:	000b883a 	mov	r5,zero
10001b18:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001b1c:	01006c04 	movi	r4,432
10001b20:	01414004 	movi	r5,1280
10001b24:	00010f00 	call	100010f0 <UsbWrite>

}
10001b28:	e037883a 	mov	sp,fp
10001b2c:	dfc00117 	ldw	ra,4(sp)
10001b30:	df000017 	ldw	fp,0(sp)
10001b34:	dec00204 	addi	sp,sp,8
10001b38:	f800283a 	ret

10001b3c <UsbClassRequest>:

void UsbClassRequest()
{
10001b3c:	defffe04 	addi	sp,sp,-8
10001b40:	dfc00115 	stw	ra,4(sp)
10001b44:	df000015 	stw	fp,0(sp)
10001b48:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001b4c:	01000084 	movi	r4,2
10001b50:	01414004 	movi	r5,1280
10001b54:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001b58:	0009883a 	mov	r4,zero
10001b5c:	01414304 	movi	r5,1292
10001b60:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001b64:	0009883a 	mov	r4,zero
10001b68:	01400204 	movi	r5,8
10001b6c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //port address
10001b70:	0009883a 	mov	r4,zero
10001b74:	0140b404 	movi	r5,720
10001b78:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001b7c:	0009883a 	mov	r4,zero
10001b80:	01400044 	movi	r5,1
10001b84:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001b88:	0009883a 	mov	r4,zero
10001b8c:	014004c4 	movi	r5,19
10001b90:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001b94:	0009883a 	mov	r4,zero
10001b98:	01414504 	movi	r5,1300
10001b9c:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0A21);
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	01428844 	movi	r5,2593
10001ba8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//device address
10001bac:	0009883a 	mov	r4,zero
10001bb0:	000b883a 	mov	r5,zero
10001bb4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	000b883a 	mov	r5,zero
10001bc0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	000b883a 	mov	r5,zero
10001bcc:	00002b80 	call	100002b8 <IO_write>
    //in packet
    IO_write(HPI_DATA,0x0000); //don't care
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	000b883a 	mov	r5,zero
10001bd8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//port number /data length
10001bdc:	0009883a 	mov	r4,zero
10001be0:	000b883a 	mov	r5,zero
10001be4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//device address
10001be8:	0009883a 	mov	r4,zero
10001bec:	0140a404 	movi	r5,656
10001bf0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041); //data 1
10001bf4:	0009883a 	mov	r4,zero
10001bf8:	01401044 	movi	r5,65
10001bfc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001c00:	0009883a 	mov	r4,zero
10001c04:	014004c4 	movi	r5,19
10001c08:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);
10001c0c:	0009883a 	mov	r4,zero
10001c10:	000b883a 	mov	r5,zero
10001c14:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001c18:	01006c04 	movi	r4,432
10001c1c:	01414004 	movi	r5,1280
10001c20:	00010f00 	call	100010f0 <UsbWrite>
}
10001c24:	e037883a 	mov	sp,fp
10001c28:	dfc00117 	ldw	ra,4(sp)
10001c2c:	df000017 	ldw	fp,0(sp)
10001c30:	dec00204 	addi	sp,sp,8
10001c34:	f800283a 	ret

10001c38 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001c38:	defffe04 	addi	sp,sp,-8
10001c3c:	dfc00115 	stw	ra,4(sp)
10001c40:	df000015 	stw	fp,0(sp)
10001c44:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001c48:	01000084 	movi	r4,2
10001c4c:	01414004 	movi	r5,1280
10001c50:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001c54:	0009883a 	mov	r4,zero
10001c58:	01414304 	movi	r5,1292
10001c5c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001c60:	0009883a 	mov	r4,zero
10001c64:	01400204 	movi	r5,8
10001c68:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //port address
10001c6c:	0009883a 	mov	r4,zero
10001c70:	0140b404 	movi	r5,720
10001c74:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001c78:	0009883a 	mov	r4,zero
10001c7c:	01400044 	movi	r5,1
10001c80:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001c84:	0009883a 	mov	r4,zero
10001c88:	014004c4 	movi	r5,19
10001c8c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001c90:	0009883a 	mov	r4,zero
10001c94:	01414504 	movi	r5,1300
10001c98:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0681);//c
10001c9c:	0009883a 	mov	r4,zero
10001ca0:	0141a044 	movi	r5,1665
10001ca4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001ca8:	0009883a 	mov	r4,zero
10001cac:	01484004 	movi	r5,8448
10001cb0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//0
10001cb4:	0009883a 	mov	r4,zero
10001cb8:	000b883a 	mov	r5,zero
10001cbc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x007B);//2
10001cc0:	0009883a 	mov	r4,zero
10001cc4:	01401ec4 	movi	r5,123
10001cc8:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-1
    IO_write(HPI_DATA,0x0544); //514
10001ccc:	0009883a 	mov	r4,zero
10001cd0:	01415104 	movi	r5,1348
10001cd4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
10001cd8:	0009883a 	mov	r4,zero
10001cdc:	01400204 	movi	r5,8
10001ce0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
10001ce4:	0009883a 	mov	r4,zero
10001ce8:	0140a404 	movi	r5,656
10001cec:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10001cf0:	0009883a 	mov	r4,zero
10001cf4:	01401044 	movi	r5,65
10001cf8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10001cfc:	0009883a 	mov	r4,zero
10001d00:	014004c4 	movi	r5,19
10001d04:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);//e
10001d08:	0009883a 	mov	r4,zero
10001d0c:	01414804 	movi	r5,1312
10001d10:	00002b80 	call	100002b8 <IO_write>

    //status phase
    IO_write(HPI_DATA,0x0000); //52c
10001d14:	0009883a 	mov	r4,zero
10001d18:	000b883a 	mov	r5,zero
10001d1c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//e
10001d20:	0009883a 	mov	r4,zero
10001d24:	000b883a 	mov	r5,zero
10001d28:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//530
10001d2c:	0009883a 	mov	r4,zero
10001d30:	01408404 	movi	r5,528
10001d34:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2
10001d38:	0009883a 	mov	r4,zero
10001d3c:	01401044 	movi	r5,65
10001d40:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
10001d44:	0009883a 	mov	r4,zero
10001d48:	014004c4 	movi	r5,19
10001d4c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//6
10001d50:	0009883a 	mov	r4,zero
10001d54:	000b883a 	mov	r5,zero
10001d58:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001d5c:	01006c04 	movi	r4,432
10001d60:	01414004 	movi	r5,1280
10001d64:	00010f00 	call	100010f0 <UsbWrite>

}
10001d68:	e037883a 	mov	sp,fp
10001d6c:	dfc00117 	ldw	ra,4(sp)
10001d70:	df000017 	ldw	fp,0(sp)
10001d74:	dec00204 	addi	sp,sp,8
10001d78:	f800283a 	ret

10001d7c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001d7c:	defffe04 	addi	sp,sp,-8
10001d80:	dfc00115 	stw	ra,4(sp)
10001d84:	df000015 	stw	fp,0(sp)
10001d88:	d839883a 	mov	fp,sp
    //the starting address
    IO_write(HPI_ADDR,0x0500); //the start address
10001d8c:	01000084 	movi	r4,2
10001d90:	01414004 	movi	r5,1280
10001d94:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x050C);
10001d98:	0009883a 	mov	r4,zero
10001d9c:	01414304 	movi	r5,1292
10001da0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008); //4 port number
10001da4:	0009883a 	mov	r4,zero
10001da8:	01400204 	movi	r5,8
10001dac:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x02D0); //device address
10001db0:	0009883a 	mov	r4,zero
10001db4:	0140b404 	movi	r5,720
10001db8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);
10001dbc:	0009883a 	mov	r4,zero
10001dc0:	01400044 	movi	r5,1
10001dc4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);
10001dc8:	0009883a 	mov	r4,zero
10001dcc:	014004c4 	movi	r5,19
10001dd0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0514);
10001dd4:	0009883a 	mov	r4,zero
10001dd8:	01414504 	movi	r5,1300
10001ddc:	00002b80 	call	100002b8 <IO_write>

    //td content 4 bytes
    IO_write(HPI_DATA,0x0681);//c
10001de0:	0009883a 	mov	r4,zero
10001de4:	0141a044 	movi	r5,1665
10001de8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x2200);//e //report 0x22
10001dec:	0009883a 	mov	r4,zero
10001df0:	01488004 	movi	r5,8704
10001df4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//0
10001df8:	0009883a 	mov	r4,zero
10001dfc:	000b883a 	mov	r5,zero
10001e00:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x007B);//2
10001e04:	0009883a 	mov	r4,zero
10001e08:	01401ec4 	movi	r5,123
10001e0c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-1
    IO_write(HPI_DATA,0x0580); //514
10001e10:	0009883a 	mov	r4,zero
10001e14:	01416004 	movi	r5,1408
10001e18:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
10001e1c:	0009883a 	mov	r4,zero
10001e20:	01400204 	movi	r5,8
10001e24:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
10001e28:	0009883a 	mov	r4,zero
10001e2c:	0140a404 	movi	r5,656
10001e30:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10001e34:	0009883a 	mov	r4,zero
10001e38:	01401044 	movi	r5,65
10001e3c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10001e40:	0009883a 	mov	r4,zero
10001e44:	014004c4 	movi	r5,19
10001e48:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0520);//e
10001e4c:	0009883a 	mov	r4,zero
10001e50:	01414804 	movi	r5,1312
10001e54:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-2
    IO_write(HPI_DATA,0x0588); //520
10001e58:	0009883a 	mov	r4,zero
10001e5c:	01416204 	movi	r5,1416
10001e60:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//2
10001e64:	0009883a 	mov	r4,zero
10001e68:	01400204 	movi	r5,8
10001e6c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//4
10001e70:	0009883a 	mov	r4,zero
10001e74:	0140a404 	movi	r5,656
10001e78:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//6 //data0
10001e7c:	0009883a 	mov	r4,zero
10001e80:	01400044 	movi	r5,1
10001e84:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
10001e88:	0009883a 	mov	r4,zero
10001e8c:	014004c4 	movi	r5,19
10001e90:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x052c);//a
10001e94:	0009883a 	mov	r4,zero
10001e98:	01414b04 	movi	r5,1324
10001e9c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-3
    IO_write(HPI_DATA,0x0590); //52c
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	01416404 	movi	r5,1424
10001ea8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//e
10001eac:	0009883a 	mov	r4,zero
10001eb0:	01400204 	movi	r5,8
10001eb4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//530
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	0140a404 	movi	r5,656
10001ec0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	01401044 	movi	r5,65
10001ecc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	014004c4 	movi	r5,19
10001ed8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0538);//6
10001edc:	0009883a 	mov	r4,zero
10001ee0:	01414e04 	movi	r5,1336
10001ee4:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-4
    IO_write(HPI_DATA,0x0598); //538
10001ee8:	0009883a 	mov	r4,zero
10001eec:	01416604 	movi	r5,1432
10001ef0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//a
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	01400204 	movi	r5,8
10001efc:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//c
10001f00:	0009883a 	mov	r4,zero
10001f04:	0140a404 	movi	r5,656
10001f08:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//e //data0
10001f0c:	0009883a 	mov	r4,zero
10001f10:	01400044 	movi	r5,1
10001f14:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//540
10001f18:	0009883a 	mov	r4,zero
10001f1c:	014004c4 	movi	r5,19
10001f20:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0544);//2
10001f24:	0009883a 	mov	r4,zero
10001f28:	01415104 	movi	r5,1348
10001f2c:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-5
    IO_write(HPI_DATA,0x05a0); //544
10001f30:	0009883a 	mov	r4,zero
10001f34:	01416804 	movi	r5,1440
10001f38:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//6
10001f3c:	0009883a 	mov	r4,zero
10001f40:	01400204 	movi	r5,8
10001f44:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//8
10001f48:	0009883a 	mov	r4,zero
10001f4c:	0140a404 	movi	r5,656
10001f50:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a //data1
10001f54:	0009883a 	mov	r4,zero
10001f58:	01401044 	movi	r5,65
10001f5c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10001f60:	0009883a 	mov	r4,zero
10001f64:	014004c4 	movi	r5,19
10001f68:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0550);//e
10001f6c:	0009883a 	mov	r4,zero
10001f70:	01415404 	movi	r5,1360
10001f74:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-6
    IO_write(HPI_DATA,0x05a8); //550
10001f78:	0009883a 	mov	r4,zero
10001f7c:	01416a04 	movi	r5,1448
10001f80:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//2
10001f84:	0009883a 	mov	r4,zero
10001f88:	01400204 	movi	r5,8
10001f8c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//4
10001f90:	0009883a 	mov	r4,zero
10001f94:	0140a404 	movi	r5,656
10001f98:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//6 //data0
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	01400044 	movi	r5,1
10001fa4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//8
10001fa8:	0009883a 	mov	r4,zero
10001fac:	014004c4 	movi	r5,19
10001fb0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x055c);//a
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	01415704 	movi	r5,1372
10001fbc:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-7
    IO_write(HPI_DATA,0x05b0); //c
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	01416c04 	movi	r5,1456
10001fc8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0008);//e
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	01400204 	movi	r5,8
10001fd4:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//560
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	0140a404 	movi	r5,656
10001fe0:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//2 //data1
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	01401044 	movi	r5,65
10001fec:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//4
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	014004c4 	movi	r5,19
10001ff8:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0568);//6
10001ffc:	0009883a 	mov	r4,zero
10002000:	01415a04 	movi	r5,1384
10002004:	00002b80 	call	100002b8 <IO_write>

    //data phase IN-8
    IO_write(HPI_DATA,0x05b8); //8
10002008:	0009883a 	mov	r4,zero
1000200c:	01416e04 	movi	r5,1464
10002010:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0003);//a
10002014:	0009883a 	mov	r4,zero
10002018:	014000c4 	movi	r5,3
1000201c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0290);//c
10002020:	0009883a 	mov	r4,zero
10002024:	0140a404 	movi	r5,656
10002028:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0001);//e //data0
1000202c:	0009883a 	mov	r4,zero
10002030:	01400044 	movi	r5,1
10002034:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//570
10002038:	0009883a 	mov	r4,zero
1000203c:	014004c4 	movi	r5,19
10002040:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0574);//2
10002044:	0009883a 	mov	r4,zero
10002048:	01415d04 	movi	r5,1396
1000204c:	00002b80 	call	100002b8 <IO_write>

    //status phase
    IO_write(HPI_DATA,0x0000); //574
10002050:	0009883a 	mov	r4,zero
10002054:	000b883a 	mov	r5,zero
10002058:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//6
1000205c:	0009883a 	mov	r4,zero
10002060:	000b883a 	mov	r5,zero
10002064:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0210);//8
10002068:	0009883a 	mov	r4,zero
1000206c:	01408404 	movi	r5,528
10002070:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0041);//a
10002074:	0009883a 	mov	r4,zero
10002078:	01401044 	movi	r5,65
1000207c:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0013);//c
10002080:	0009883a 	mov	r4,zero
10002084:	014004c4 	movi	r5,19
10002088:	00002b80 	call	100002b8 <IO_write>
    IO_write(HPI_DATA,0x0000);//e
1000208c:	0009883a 	mov	r4,zero
10002090:	000b883a 	mov	r5,zero
10002094:	00002b80 	call	100002b8 <IO_write>

    UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002098:	01006c04 	movi	r4,432
1000209c:	01414004 	movi	r5,1280
100020a0:	00010f00 	call	100010f0 <UsbWrite>

}
100020a4:	e037883a 	mov	sp,fp
100020a8:	dfc00117 	ldw	ra,4(sp)
100020ac:	df000017 	ldw	fp,0(sp)
100020b0:	dec00204 	addi	sp,sp,8
100020b4:	f800283a 	ret

100020b8 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
100020b8:	defffd04 	addi	sp,sp,-12
100020bc:	dfc00215 	stw	ra,8(sp)
100020c0:	df000115 	stw	fp,4(sp)
100020c4:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
100020c8:	01005104 	movi	r4,324
100020cc:	00011480 	call	10001148 <UsbRead>
100020d0:	e0bfff0d 	sth	r2,-4(fp)
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
100020d4:	01005104 	movi	r4,324
100020d8:	000b883a 	mov	r5,zero
100020dc:	00010f00 	call	100010f0 <UsbWrite>
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100020e0:	00000d06 	br	10002118 <UsbWaitTDListDone+0x60>
    {
        if(usb_ctl_val == 0x0000)
100020e4:	e0bfff0b 	ldhu	r2,-4(fp)
100020e8:	10000526 	beq	r2,zero,10002100 <UsbWaitTDListDone+0x48>
        {
        }
        else
        {
            printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100020ec:	e0bfff0b 	ldhu	r2,-4(fp)
100020f0:	01040074 	movhi	r4,4097
100020f4:	2106f004 	addi	r4,r4,7104
100020f8:	100b883a 	mov	r5,r2
100020fc:	00022640 	call	10002264 <printf>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
10002100:	01005104 	movi	r4,324
10002104:	00011480 	call	10001148 <UsbRead>
10002108:	e0bfff0d 	sth	r2,-4(fp)
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
1000210c:	01005104 	movi	r4,324
10002110:	000b883a 	mov	r5,zero
10002114:	00010f00 	call	100010f0 <UsbWrite>
{
    alt_u16 usb_ctl_val;

    usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
    UsbWrite(HPI_SIE1_MSG_ADR, 0);
    while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
10002118:	e0bfff0b 	ldhu	r2,-4(fp)
1000211c:	10840018 	cmpnei	r2,r2,4096
10002120:	103ff01e 	bne	r2,zero,100020e4 <__alt_data_end+0xf80020e4>
        }
        usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
    }

    return usb_ctl_val;
10002124:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002128:	e037883a 	mov	sp,fp
1000212c:	dfc00117 	ldw	ra,4(sp)
10002130:	df000017 	ldw	fp,0(sp)
10002134:	dec00204 	addi	sp,sp,8
10002138:	f800283a 	ret

1000213c <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
1000213c:	defffd04 	addi	sp,sp,-12
10002140:	dfc00215 	stw	ra,8(sp)
10002144:	df000115 	stw	fp,4(sp)
10002148:	df000104 	addi	fp,sp,4
    alt_u16 usb_ctl_val;

    IO_read(HPI_STATUS);
1000214c:	010000c4 	movi	r4,3
10002150:	00003300 	call	10000330 <IO_read>
    if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002154:	01005104 	movi	r4,324
10002158:	00011480 	call	10001148 <UsbRead>
1000215c:	10bfffcc 	andi	r2,r2,65535
10002160:	10840018 	cmpnei	r2,r2,4096
10002164:	1000091e 	bne	r2,zero,1000218c <UsbGetRetryCnt+0x50>
    {
        UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002168:	01005104 	movi	r4,324
1000216c:	000b883a 	mov	r5,zero
10002170:	00010f00 	call	100010f0 <UsbWrite>

        while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002174:	0001883a 	nop
10002178:	010000c4 	movi	r4,3
1000217c:	00003300 	call	10000330 <IO_read>
10002180:	10bfffcc 	andi	r2,r2,65535
10002184:	1080040c 	andi	r2,r2,16
10002188:	103ffb26 	beq	r2,zero,10002178 <__alt_data_end+0xf8002178>
        {
        }
    }
    //usleep(1000);
    IO_write(HPI_ADDR,0x0508);
1000218c:	01000084 	movi	r4,2
10002190:	01414204 	movi	r5,1288
10002194:	00002b80 	call	100002b8 <IO_write>
    usb_ctl_val = IO_read(HPI_DATA);
10002198:	0009883a 	mov	r4,zero
1000219c:	00003300 	call	10000330 <IO_read>
100021a0:	e0bfff0d 	sth	r2,-4(fp)

    return usb_ctl_val;
100021a4:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021a8:	e037883a 	mov	sp,fp
100021ac:	dfc00117 	ldw	ra,4(sp)
100021b0:	df000017 	ldw	fp,0(sp)
100021b4:	dec00204 	addi	sp,sp,8
100021b8:	f800283a 	ret

100021bc <UsbPrintMem>:


void UsbPrintMem()
{
100021bc:	defffc04 	addi	sp,sp,-16
100021c0:	dfc00315 	stw	ra,12(sp)
100021c4:	df000215 	stw	fp,8(sp)
100021c8:	df000204 	addi	fp,sp,8
    int i, code;
    IO_write(HPI_ADDR,0x0500); //the start address
100021cc:	01000084 	movi	r4,2
100021d0:	01414004 	movi	r5,1280
100021d4:	00002b80 	call	100002b8 <IO_write>
    for (i = 0; i <= 200; i += 2)
100021d8:	e03ffe15 	stw	zero,-8(fp)
100021dc:	00000e06 	br	10002218 <UsbPrintMem+0x5c>
    {
        code = IO_read(HPI_DATA);
100021e0:	0009883a 	mov	r4,zero
100021e4:	00003300 	call	10000330 <IO_read>
100021e8:	10bfffcc 	andi	r2,r2,65535
100021ec:	e0bfff15 	stw	r2,-4(fp)
        printf("\naddr %x = %04x\n", 0x0500+i, code);
100021f0:	e0bffe17 	ldw	r2,-8(fp)
100021f4:	10814004 	addi	r2,r2,1280
100021f8:	01040074 	movhi	r4,4097
100021fc:	2106f804 	addi	r4,r4,7136
10002200:	100b883a 	mov	r5,r2
10002204:	e1bfff17 	ldw	r6,-4(fp)
10002208:	00022640 	call	10002264 <printf>

void UsbPrintMem()
{
    int i, code;
    IO_write(HPI_ADDR,0x0500); //the start address
    for (i = 0; i <= 200; i += 2)
1000220c:	e0bffe17 	ldw	r2,-8(fp)
10002210:	10800084 	addi	r2,r2,2
10002214:	e0bffe15 	stw	r2,-8(fp)
10002218:	e0bffe17 	ldw	r2,-8(fp)
1000221c:	10803250 	cmplti	r2,r2,201
10002220:	103fef1e 	bne	r2,zero,100021e0 <__alt_data_end+0xf80021e0>
    {
        code = IO_read(HPI_DATA);
        printf("\naddr %x = %04x\n", 0x0500+i, code);
    }
}
10002224:	e037883a 	mov	sp,fp
10002228:	dfc00117 	ldw	ra,4(sp)
1000222c:	df000017 	ldw	fp,0(sp)
10002230:	dec00204 	addi	sp,sp,8
10002234:	f800283a 	ret

10002238 <_printf_r>:
10002238:	defffd04 	addi	sp,sp,-12
1000223c:	dfc00015 	stw	ra,0(sp)
10002240:	d9800115 	stw	r6,4(sp)
10002244:	d9c00215 	stw	r7,8(sp)
10002248:	280d883a 	mov	r6,r5
1000224c:	21400217 	ldw	r5,8(r4)
10002250:	d9c00104 	addi	r7,sp,4
10002254:	00024040 	call	10002404 <___vfprintf_internal_r>
10002258:	dfc00017 	ldw	ra,0(sp)
1000225c:	dec00304 	addi	sp,sp,12
10002260:	f800283a 	ret

10002264 <printf>:
10002264:	defffc04 	addi	sp,sp,-16
10002268:	dfc00015 	stw	ra,0(sp)
1000226c:	d9400115 	stw	r5,4(sp)
10002270:	d9800215 	stw	r6,8(sp)
10002274:	d9c00315 	stw	r7,12(sp)
10002278:	00840074 	movhi	r2,4097
1000227c:	108e6904 	addi	r2,r2,14756
10002280:	10800017 	ldw	r2,0(r2)
10002284:	200b883a 	mov	r5,r4
10002288:	d9800104 	addi	r6,sp,4
1000228c:	11000217 	ldw	r4,8(r2)
10002290:	00045000 	call	10004500 <__vfprintf_internal>
10002294:	dfc00017 	ldw	ra,0(sp)
10002298:	dec00404 	addi	sp,sp,16
1000229c:	f800283a 	ret

100022a0 <_puts_r>:
100022a0:	defff604 	addi	sp,sp,-40
100022a4:	dc000715 	stw	r16,28(sp)
100022a8:	2021883a 	mov	r16,r4
100022ac:	2809883a 	mov	r4,r5
100022b0:	dc400815 	stw	r17,32(sp)
100022b4:	dfc00915 	stw	ra,36(sp)
100022b8:	2823883a 	mov	r17,r5
100022bc:	000236c0 	call	1000236c <strlen>
100022c0:	00c40074 	movhi	r3,4097
100022c4:	18ce6904 	addi	r3,r3,14756
100022c8:	18c00017 	ldw	r3,0(r3)
100022cc:	11000044 	addi	r4,r2,1
100022d0:	d8800115 	stw	r2,4(sp)
100022d4:	18c00217 	ldw	r3,8(r3)
100022d8:	01440074 	movhi	r5,4097
100022dc:	2946fd04 	addi	r5,r5,7156
100022e0:	1880030b 	ldhu	r2,12(r3)
100022e4:	d9400215 	stw	r5,8(sp)
100022e8:	d9000615 	stw	r4,24(sp)
100022ec:	01400044 	movi	r5,1
100022f0:	01000084 	movi	r4,2
100022f4:	d9000515 	stw	r4,20(sp)
100022f8:	dc400015 	stw	r17,0(sp)
100022fc:	d9400315 	stw	r5,12(sp)
10002300:	dec00415 	stw	sp,16(sp)
10002304:	1108000c 	andi	r4,r2,8192
10002308:	2000061e 	bne	r4,zero,10002324 <_puts_r+0x84>
1000230c:	19401917 	ldw	r5,100(r3)
10002310:	0137ffc4 	movi	r4,-8193
10002314:	10880014 	ori	r2,r2,8192
10002318:	2908703a 	and	r4,r5,r4
1000231c:	1880030d 	sth	r2,12(r3)
10002320:	19001915 	stw	r4,100(r3)
10002324:	81400217 	ldw	r5,8(r16)
10002328:	8009883a 	mov	r4,r16
1000232c:	d9800404 	addi	r6,sp,16
10002330:	00069c40 	call	100069c4 <__sfvwrite_r>
10002334:	1000061e 	bne	r2,zero,10002350 <_puts_r+0xb0>
10002338:	00800284 	movi	r2,10
1000233c:	dfc00917 	ldw	ra,36(sp)
10002340:	dc400817 	ldw	r17,32(sp)
10002344:	dc000717 	ldw	r16,28(sp)
10002348:	dec00a04 	addi	sp,sp,40
1000234c:	f800283a 	ret
10002350:	00bfffc4 	movi	r2,-1
10002354:	003ff906 	br	1000233c <__alt_data_end+0xf800233c>

10002358 <puts>:
10002358:	00840074 	movhi	r2,4097
1000235c:	108e6904 	addi	r2,r2,14756
10002360:	200b883a 	mov	r5,r4
10002364:	11000017 	ldw	r4,0(r2)
10002368:	00022a01 	jmpi	100022a0 <_puts_r>

1000236c <strlen>:
1000236c:	208000cc 	andi	r2,r4,3
10002370:	10002026 	beq	r2,zero,100023f4 <strlen+0x88>
10002374:	20800007 	ldb	r2,0(r4)
10002378:	10002026 	beq	r2,zero,100023fc <strlen+0x90>
1000237c:	2005883a 	mov	r2,r4
10002380:	00000206 	br	1000238c <strlen+0x20>
10002384:	10c00007 	ldb	r3,0(r2)
10002388:	18001826 	beq	r3,zero,100023ec <strlen+0x80>
1000238c:	10800044 	addi	r2,r2,1
10002390:	10c000cc 	andi	r3,r2,3
10002394:	183ffb1e 	bne	r3,zero,10002384 <__alt_data_end+0xf8002384>
10002398:	10c00017 	ldw	r3,0(r2)
1000239c:	01ffbff4 	movhi	r7,65279
100023a0:	39ffbfc4 	addi	r7,r7,-257
100023a4:	00ca303a 	nor	r5,zero,r3
100023a8:	01a02074 	movhi	r6,32897
100023ac:	19c7883a 	add	r3,r3,r7
100023b0:	31a02004 	addi	r6,r6,-32640
100023b4:	1946703a 	and	r3,r3,r5
100023b8:	1986703a 	and	r3,r3,r6
100023bc:	1800091e 	bne	r3,zero,100023e4 <strlen+0x78>
100023c0:	10800104 	addi	r2,r2,4
100023c4:	10c00017 	ldw	r3,0(r2)
100023c8:	19cb883a 	add	r5,r3,r7
100023cc:	00c6303a 	nor	r3,zero,r3
100023d0:	28c6703a 	and	r3,r5,r3
100023d4:	1986703a 	and	r3,r3,r6
100023d8:	183ff926 	beq	r3,zero,100023c0 <__alt_data_end+0xf80023c0>
100023dc:	00000106 	br	100023e4 <strlen+0x78>
100023e0:	10800044 	addi	r2,r2,1
100023e4:	10c00007 	ldb	r3,0(r2)
100023e8:	183ffd1e 	bne	r3,zero,100023e0 <__alt_data_end+0xf80023e0>
100023ec:	1105c83a 	sub	r2,r2,r4
100023f0:	f800283a 	ret
100023f4:	2005883a 	mov	r2,r4
100023f8:	003fe706 	br	10002398 <__alt_data_end+0xf8002398>
100023fc:	0005883a 	mov	r2,zero
10002400:	f800283a 	ret

10002404 <___vfprintf_internal_r>:
10002404:	defeb604 	addi	sp,sp,-1320
10002408:	dfc14915 	stw	ra,1316(sp)
1000240c:	ddc14715 	stw	r23,1308(sp)
10002410:	dd814615 	stw	r22,1304(sp)
10002414:	202f883a 	mov	r23,r4
10002418:	282d883a 	mov	r22,r5
1000241c:	d9812a15 	stw	r6,1192(sp)
10002420:	d9c12d15 	stw	r7,1204(sp)
10002424:	df014815 	stw	fp,1312(sp)
10002428:	dd414515 	stw	r21,1300(sp)
1000242c:	dd014415 	stw	r20,1296(sp)
10002430:	dcc14315 	stw	r19,1292(sp)
10002434:	dc814215 	stw	r18,1288(sp)
10002438:	dc414115 	stw	r17,1284(sp)
1000243c:	dc014015 	stw	r16,1280(sp)
10002440:	00070840 	call	10007084 <_localeconv_r>
10002444:	10800017 	ldw	r2,0(r2)
10002448:	1009883a 	mov	r4,r2
1000244c:	d8813515 	stw	r2,1236(sp)
10002450:	000236c0 	call	1000236c <strlen>
10002454:	d8813815 	stw	r2,1248(sp)
10002458:	b8000226 	beq	r23,zero,10002464 <___vfprintf_internal_r+0x60>
1000245c:	b8800e17 	ldw	r2,56(r23)
10002460:	10010526 	beq	r2,zero,10002878 <___vfprintf_internal_r+0x474>
10002464:	b0c0030b 	ldhu	r3,12(r22)
10002468:	1908000c 	andi	r4,r3,8192
1000246c:	1805883a 	mov	r2,r3
10002470:	2000071e 	bne	r4,zero,10002490 <___vfprintf_internal_r+0x8c>
10002474:	b1001917 	ldw	r4,100(r22)
10002478:	18880014 	ori	r2,r3,8192
1000247c:	00f7ffc4 	movi	r3,-8193
10002480:	20c8703a 	and	r4,r4,r3
10002484:	b080030d 	sth	r2,12(r22)
10002488:	1007883a 	mov	r3,r2
1000248c:	b1001915 	stw	r4,100(r22)
10002490:	1100020c 	andi	r4,r2,8
10002494:	2000a826 	beq	r4,zero,10002738 <___vfprintf_internal_r+0x334>
10002498:	b1000417 	ldw	r4,16(r22)
1000249c:	2000a626 	beq	r4,zero,10002738 <___vfprintf_internal_r+0x334>
100024a0:	1080068c 	andi	r2,r2,26
100024a4:	01000284 	movi	r4,10
100024a8:	1100ac26 	beq	r2,r4,1000275c <___vfprintf_internal_r+0x358>
100024ac:	d8c10e04 	addi	r3,sp,1080
100024b0:	d9010dc4 	addi	r4,sp,1079
100024b4:	d9400404 	addi	r5,sp,16
100024b8:	05040074 	movhi	r20,4097
100024bc:	1905c83a 	sub	r2,r3,r4
100024c0:	a5070e84 	addi	r20,r20,7226
100024c4:	d8c12815 	stw	r3,1184(sp)
100024c8:	d9012915 	stw	r4,1188(sp)
100024cc:	d9411e15 	stw	r5,1144(sp)
100024d0:	d8012015 	stw	zero,1152(sp)
100024d4:	d8011f15 	stw	zero,1148(sp)
100024d8:	d8013315 	stw	zero,1228(sp)
100024dc:	d8013715 	stw	zero,1244(sp)
100024e0:	d8013915 	stw	zero,1252(sp)
100024e4:	d8013b15 	stw	zero,1260(sp)
100024e8:	d8013a15 	stw	zero,1256(sp)
100024ec:	d8012f15 	stw	zero,1212(sp)
100024f0:	2811883a 	mov	r8,r5
100024f4:	d8813c15 	stw	r2,1264(sp)
100024f8:	d8c12a17 	ldw	r3,1192(sp)
100024fc:	18800007 	ldb	r2,0(r3)
10002500:	10021326 	beq	r2,zero,10002d50 <___vfprintf_internal_r+0x94c>
10002504:	00c00944 	movi	r3,37
10002508:	dc012a17 	ldw	r16,1192(sp)
1000250c:	10c0021e 	bne	r2,r3,10002518 <___vfprintf_internal_r+0x114>
10002510:	00001606 	br	1000256c <___vfprintf_internal_r+0x168>
10002514:	10c08526 	beq	r2,r3,1000272c <___vfprintf_internal_r+0x328>
10002518:	84000044 	addi	r16,r16,1
1000251c:	80800007 	ldb	r2,0(r16)
10002520:	103ffc1e 	bne	r2,zero,10002514 <__alt_data_end+0xf8002514>
10002524:	d9012a17 	ldw	r4,1192(sp)
10002528:	8123c83a 	sub	r17,r16,r4
1000252c:	88000f26 	beq	r17,zero,1000256c <___vfprintf_internal_r+0x168>
10002530:	d8812a17 	ldw	r2,1192(sp)
10002534:	d8c12017 	ldw	r3,1152(sp)
10002538:	44400115 	stw	r17,4(r8)
1000253c:	40800015 	stw	r2,0(r8)
10002540:	d8811f17 	ldw	r2,1148(sp)
10002544:	1c47883a 	add	r3,r3,r17
10002548:	d8c12015 	stw	r3,1152(sp)
1000254c:	10800044 	addi	r2,r2,1
10002550:	d8811f15 	stw	r2,1148(sp)
10002554:	00c001c4 	movi	r3,7
10002558:	1880b516 	blt	r3,r2,10002830 <___vfprintf_internal_r+0x42c>
1000255c:	42000204 	addi	r8,r8,8
10002560:	d8c12f17 	ldw	r3,1212(sp)
10002564:	1c47883a 	add	r3,r3,r17
10002568:	d8c12f15 	stw	r3,1212(sp)
1000256c:	80800007 	ldb	r2,0(r16)
10002570:	1000b626 	beq	r2,zero,1000284c <___vfprintf_internal_r+0x448>
10002574:	80800044 	addi	r2,r16,1
10002578:	84000047 	ldb	r16,1(r16)
1000257c:	0027883a 	mov	r19,zero
10002580:	0039883a 	mov	fp,zero
10002584:	dcc12b05 	stb	r19,1196(sp)
10002588:	d8012785 	stb	zero,1182(sp)
1000258c:	027fffc4 	movi	r9,-1
10002590:	d8012e15 	stw	zero,1208(sp)
10002594:	04401604 	movi	r17,88
10002598:	04800244 	movi	r18,9
1000259c:	da012a15 	stw	r8,1192(sp)
100025a0:	e027883a 	mov	r19,fp
100025a4:	17000044 	addi	fp,r2,1
100025a8:	80bff804 	addi	r2,r16,-32
100025ac:	88831236 	bltu	r17,r2,100031f8 <___vfprintf_internal_r+0xdf4>
100025b0:	100490ba 	slli	r2,r2,2
100025b4:	01040034 	movhi	r4,4096
100025b8:	21097204 	addi	r4,r4,9672
100025bc:	1105883a 	add	r2,r2,r4
100025c0:	10800017 	ldw	r2,0(r2)
100025c4:	1000683a 	jmp	r2
100025c8:	10003114 	ori	zero,r2,196
100025cc:	100031f8 	rdprs	zero,r2,199
100025d0:	100031f8 	rdprs	zero,r2,199
100025d4:	10003130 	cmpltui	zero,r2,196
100025d8:	100031f8 	rdprs	zero,r2,199
100025dc:	100031f8 	rdprs	zero,r2,199
100025e0:	100031f8 	rdprs	zero,r2,199
100025e4:	100031f8 	rdprs	zero,r2,199
100025e8:	100031f8 	rdprs	zero,r2,199
100025ec:	100031f8 	rdprs	zero,r2,199
100025f0:	10003140 	call	11000314 <_gp+0xfe4974>
100025f4:	10003168 	cmpgeui	zero,r2,197
100025f8:	100031f8 	rdprs	zero,r2,199
100025fc:	10002884 	addi	zero,r2,162
10002600:	10002894 	ori	zero,r2,162
10002604:	100031f8 	rdprs	zero,r2,199
10002608:	100028e4 	muli	zero,r2,163
1000260c:	100028f4 	orhi	zero,r2,163
10002610:	100028f4 	orhi	zero,r2,163
10002614:	100028f4 	orhi	zero,r2,163
10002618:	100028f4 	orhi	zero,r2,163
1000261c:	100028f4 	orhi	zero,r2,163
10002620:	100028f4 	orhi	zero,r2,163
10002624:	100028f4 	orhi	zero,r2,163
10002628:	100028f4 	orhi	zero,r2,163
1000262c:	100028f4 	orhi	zero,r2,163
10002630:	100031f8 	rdprs	zero,r2,199
10002634:	100031f8 	rdprs	zero,r2,199
10002638:	100031f8 	rdprs	zero,r2,199
1000263c:	100031f8 	rdprs	zero,r2,199
10002640:	100031f8 	rdprs	zero,r2,199
10002644:	100031f8 	rdprs	zero,r2,199
10002648:	100031f8 	rdprs	zero,r2,199
1000264c:	100031f8 	rdprs	zero,r2,199
10002650:	100031f8 	rdprs	zero,r2,199
10002654:	100031f8 	rdprs	zero,r2,199
10002658:	10002938 	rdprs	zero,r2,164
1000265c:	10002d58 	cmpnei	zero,r2,181
10002660:	100031f8 	rdprs	zero,r2,199
10002664:	10002d58 	cmpnei	zero,r2,181
10002668:	100031f8 	rdprs	zero,r2,199
1000266c:	100031f8 	rdprs	zero,r2,199
10002670:	100031f8 	rdprs	zero,r2,199
10002674:	100031f8 	rdprs	zero,r2,199
10002678:	10002e00 	call	110002e0 <_gp+0xfe4940>
1000267c:	100031f8 	rdprs	zero,r2,199
10002680:	100031f8 	rdprs	zero,r2,199
10002684:	10002e10 	cmplti	zero,r2,184
10002688:	100031f8 	rdprs	zero,r2,199
1000268c:	100031f8 	rdprs	zero,r2,199
10002690:	100031f8 	rdprs	zero,r2,199
10002694:	100031f8 	rdprs	zero,r2,199
10002698:	100031f8 	rdprs	zero,r2,199
1000269c:	10002e54 	ori	zero,r2,185
100026a0:	100031f8 	rdprs	zero,r2,199
100026a4:	100031f8 	rdprs	zero,r2,199
100026a8:	10002e8c 	andi	zero,r2,186
100026ac:	100031f8 	rdprs	zero,r2,199
100026b0:	100031f8 	rdprs	zero,r2,199
100026b4:	100031f8 	rdprs	zero,r2,199
100026b8:	100031f8 	rdprs	zero,r2,199
100026bc:	100031f8 	rdprs	zero,r2,199
100026c0:	100031f8 	rdprs	zero,r2,199
100026c4:	100031f8 	rdprs	zero,r2,199
100026c8:	100031f8 	rdprs	zero,r2,199
100026cc:	100031f8 	rdprs	zero,r2,199
100026d0:	100031f8 	rdprs	zero,r2,199
100026d4:	100030c8 	cmpgei	zero,r2,195
100026d8:	10003074 	orhi	zero,r2,193
100026dc:	10002d58 	cmpnei	zero,r2,181
100026e0:	10002d58 	cmpnei	zero,r2,181
100026e4:	10002d58 	cmpnei	zero,r2,181
100026e8:	100030b8 	rdprs	zero,r2,194
100026ec:	10003074 	orhi	zero,r2,193
100026f0:	100031f8 	rdprs	zero,r2,199
100026f4:	100031f8 	rdprs	zero,r2,199
100026f8:	10002f90 	cmplti	zero,r2,190
100026fc:	100031f8 	rdprs	zero,r2,199
10002700:	10002fa8 	cmpgeui	zero,r2,190
10002704:	10002fe8 	cmpgeui	zero,r2,191
10002708:	10003028 	cmpgeui	zero,r2,192
1000270c:	10002ef4 	orhi	zero,r2,187
10002710:	100031f8 	rdprs	zero,r2,199
10002714:	1000317c 	xorhi	zero,r2,197
10002718:	100031f8 	rdprs	zero,r2,199
1000271c:	10002f04 	addi	zero,r2,188
10002720:	100031f8 	rdprs	zero,r2,199
10002724:	100031f8 	rdprs	zero,r2,199
10002728:	10002f44 	addi	zero,r2,189
1000272c:	d9412a17 	ldw	r5,1192(sp)
10002730:	8163c83a 	sub	r17,r16,r5
10002734:	003f7d06 	br	1000252c <__alt_data_end+0xf800252c>
10002738:	b809883a 	mov	r4,r23
1000273c:	b00b883a 	mov	r5,r22
10002740:	00045240 	call	10004524 <__swsetup_r>
10002744:	10002d1e 	bne	r2,zero,100027fc <___vfprintf_internal_r+0x3f8>
10002748:	b0c0030b 	ldhu	r3,12(r22)
1000274c:	01000284 	movi	r4,10
10002750:	1805883a 	mov	r2,r3
10002754:	1080068c 	andi	r2,r2,26
10002758:	113f541e 	bne	r2,r4,100024ac <__alt_data_end+0xf80024ac>
1000275c:	b080038b 	ldhu	r2,14(r22)
10002760:	113fffcc 	andi	r4,r2,65535
10002764:	2120001c 	xori	r4,r4,32768
10002768:	21200004 	addi	r4,r4,-32768
1000276c:	203f4f16 	blt	r4,zero,100024ac <__alt_data_end+0xf80024ac>
10002770:	b2c01917 	ldw	r11,100(r22)
10002774:	b2800717 	ldw	r10,28(r22)
10002778:	b2400917 	ldw	r9,36(r22)
1000277c:	d9812a17 	ldw	r6,1192(sp)
10002780:	d9c12d17 	ldw	r7,1204(sp)
10002784:	02010004 	movi	r8,1024
10002788:	18ffff4c 	andi	r3,r3,65533
1000278c:	d881078d 	sth	r2,1054(sp)
10002790:	b809883a 	mov	r4,r23
10002794:	d8800404 	addi	r2,sp,16
10002798:	d9410404 	addi	r5,sp,1040
1000279c:	d8c1070d 	sth	r3,1052(sp)
100027a0:	dac11d15 	stw	r11,1140(sp)
100027a4:	da810b15 	stw	r10,1068(sp)
100027a8:	da410d15 	stw	r9,1076(sp)
100027ac:	d8810415 	stw	r2,1040(sp)
100027b0:	d8810815 	stw	r2,1056(sp)
100027b4:	da010615 	stw	r8,1048(sp)
100027b8:	da010915 	stw	r8,1060(sp)
100027bc:	d8010a15 	stw	zero,1064(sp)
100027c0:	00024040 	call	10002404 <___vfprintf_internal_r>
100027c4:	1021883a 	mov	r16,r2
100027c8:	10000416 	blt	r2,zero,100027dc <___vfprintf_internal_r+0x3d8>
100027cc:	b809883a 	mov	r4,r23
100027d0:	d9410404 	addi	r5,sp,1040
100027d4:	0005fa40 	call	10005fa4 <_fflush_r>
100027d8:	1007301e 	bne	r2,zero,1000449c <___vfprintf_internal_r+0x2098>
100027dc:	d881070b 	ldhu	r2,1052(sp)
100027e0:	1080100c 	andi	r2,r2,64
100027e4:	10000326 	beq	r2,zero,100027f4 <___vfprintf_internal_r+0x3f0>
100027e8:	b080030b 	ldhu	r2,12(r22)
100027ec:	10801014 	ori	r2,r2,64
100027f0:	b080030d 	sth	r2,12(r22)
100027f4:	8005883a 	mov	r2,r16
100027f8:	00000106 	br	10002800 <___vfprintf_internal_r+0x3fc>
100027fc:	00bfffc4 	movi	r2,-1
10002800:	dfc14917 	ldw	ra,1316(sp)
10002804:	df014817 	ldw	fp,1312(sp)
10002808:	ddc14717 	ldw	r23,1308(sp)
1000280c:	dd814617 	ldw	r22,1304(sp)
10002810:	dd414517 	ldw	r21,1300(sp)
10002814:	dd014417 	ldw	r20,1296(sp)
10002818:	dcc14317 	ldw	r19,1292(sp)
1000281c:	dc814217 	ldw	r18,1288(sp)
10002820:	dc414117 	ldw	r17,1284(sp)
10002824:	dc014017 	ldw	r16,1280(sp)
10002828:	dec14a04 	addi	sp,sp,1320
1000282c:	f800283a 	ret
10002830:	b809883a 	mov	r4,r23
10002834:	b00b883a 	mov	r5,r22
10002838:	d9811e04 	addi	r6,sp,1144
1000283c:	00098440 	call	10009844 <__sprint_r>
10002840:	1000081e 	bne	r2,zero,10002864 <___vfprintf_internal_r+0x460>
10002844:	da000404 	addi	r8,sp,16
10002848:	003f4506 	br	10002560 <__alt_data_end+0xf8002560>
1000284c:	d8812017 	ldw	r2,1152(sp)
10002850:	10000426 	beq	r2,zero,10002864 <___vfprintf_internal_r+0x460>
10002854:	b809883a 	mov	r4,r23
10002858:	b00b883a 	mov	r5,r22
1000285c:	d9811e04 	addi	r6,sp,1144
10002860:	00098440 	call	10009844 <__sprint_r>
10002864:	b080030b 	ldhu	r2,12(r22)
10002868:	1080100c 	andi	r2,r2,64
1000286c:	103fe31e 	bne	r2,zero,100027fc <__alt_data_end+0xf80027fc>
10002870:	d8812f17 	ldw	r2,1212(sp)
10002874:	003fe206 	br	10002800 <__alt_data_end+0xf8002800>
10002878:	b809883a 	mov	r4,r23
1000287c:	00065600 	call	10006560 <__sinit>
10002880:	003ef806 	br	10002464 <__alt_data_end+0xf8002464>
10002884:	e005883a 	mov	r2,fp
10002888:	9cc00114 	ori	r19,r19,4
1000288c:	e4000007 	ldb	r16,0(fp)
10002890:	003f4406 	br	100025a4 <__alt_data_end+0xf80025a4>
10002894:	e4000007 	ldb	r16,0(fp)
10002898:	01000a84 	movi	r4,42
1000289c:	e0800044 	addi	r2,fp,1
100028a0:	8106f626 	beq	r16,r4,1000447c <___vfprintf_internal_r+0x2078>
100028a4:	857ff404 	addi	r21,r16,-48
100028a8:	1039883a 	mov	fp,r2
100028ac:	0013883a 	mov	r9,zero
100028b0:	957f3d36 	bltu	r18,r21,100025a8 <__alt_data_end+0xf80025a8>
100028b4:	0009883a 	mov	r4,zero
100028b8:	01400284 	movi	r5,10
100028bc:	000c3780 	call	1000c378 <__mulsi3>
100028c0:	e4000007 	ldb	r16,0(fp)
100028c4:	a889883a 	add	r4,r21,r2
100028c8:	e7000044 	addi	fp,fp,1
100028cc:	857ff404 	addi	r21,r16,-48
100028d0:	957ff92e 	bgeu	r18,r21,100028b8 <__alt_data_end+0xf80028b8>
100028d4:	2013883a 	mov	r9,r4
100028d8:	203f330e 	bge	r4,zero,100025a8 <__alt_data_end+0xf80025a8>
100028dc:	027fffc4 	movi	r9,-1
100028e0:	003f3106 	br	100025a8 <__alt_data_end+0xf80025a8>
100028e4:	9cc02014 	ori	r19,r19,128
100028e8:	e005883a 	mov	r2,fp
100028ec:	e4000007 	ldb	r16,0(fp)
100028f0:	003f2c06 	br	100025a4 <__alt_data_end+0xf80025a4>
100028f4:	857ff404 	addi	r21,r16,-48
100028f8:	d8012e15 	stw	zero,1208(sp)
100028fc:	e021883a 	mov	r16,fp
10002900:	0009883a 	mov	r4,zero
10002904:	da412c15 	stw	r9,1200(sp)
10002908:	01400284 	movi	r5,10
1000290c:	000c3780 	call	1000c378 <__mulsi3>
10002910:	81400007 	ldb	r5,0(r16)
10002914:	1549883a 	add	r4,r2,r21
10002918:	e7000044 	addi	fp,fp,1
1000291c:	2d7ff404 	addi	r21,r5,-48
10002920:	e021883a 	mov	r16,fp
10002924:	957ff82e 	bgeu	r18,r21,10002908 <__alt_data_end+0xf8002908>
10002928:	2821883a 	mov	r16,r5
1000292c:	d9012e15 	stw	r4,1208(sp)
10002930:	da412c17 	ldw	r9,1200(sp)
10002934:	003f1c06 	br	100025a8 <__alt_data_end+0xf80025a8>
10002938:	da012a17 	ldw	r8,1192(sp)
1000293c:	df012a15 	stw	fp,1192(sp)
10002940:	9839883a 	mov	fp,r19
10002944:	dcc12b03 	ldbu	r19,1196(sp)
10002948:	e7000414 	ori	fp,fp,16
1000294c:	e080080c 	andi	r2,fp,32
10002950:	dcc12785 	stb	r19,1182(sp)
10002954:	d8c12d17 	ldw	r3,1204(sp)
10002958:	1001ce26 	beq	r2,zero,10003094 <___vfprintf_internal_r+0xc90>
1000295c:	d9012d17 	ldw	r4,1204(sp)
10002960:	18800117 	ldw	r2,4(r3)
10002964:	1c800017 	ldw	r18,0(r3)
10002968:	21000204 	addi	r4,r4,8
1000296c:	d9012d15 	stw	r4,1204(sp)
10002970:	102b883a 	mov	r21,r2
10002974:	10044916 	blt	r2,zero,10003a9c <___vfprintf_internal_r+0x1698>
10002978:	dcc12783 	ldbu	r19,1182(sp)
1000297c:	da413215 	stw	r9,1224(sp)
10002980:	00800044 	movi	r2,1
10002984:	9546b03a 	or	r3,r18,r21
10002988:	48000216 	blt	r9,zero,10002994 <___vfprintf_internal_r+0x590>
1000298c:	013fdfc4 	movi	r4,-129
10002990:	e138703a 	and	fp,fp,r4
10002994:	1802251e 	bne	r3,zero,1000322c <___vfprintf_internal_r+0xe28>
10002998:	48031726 	beq	r9,zero,100035f8 <___vfprintf_internal_r+0x11f4>
1000299c:	10803fcc 	andi	r2,r2,255
100029a0:	00c00044 	movi	r3,1
100029a4:	10c24526 	beq	r2,r3,100032bc <___vfprintf_internal_r+0xeb8>
100029a8:	00c00084 	movi	r3,2
100029ac:	10c33426 	beq	r2,r3,10003680 <___vfprintf_internal_r+0x127c>
100029b0:	d8c10e04 	addi	r3,sp,1080
100029b4:	9008d0fa 	srli	r4,r18,3
100029b8:	a80a977a 	slli	r5,r21,29
100029bc:	a82ad0fa 	srli	r21,r21,3
100029c0:	948001cc 	andi	r18,r18,7
100029c4:	90800c04 	addi	r2,r18,48
100029c8:	18ffffc4 	addi	r3,r3,-1
100029cc:	2924b03a 	or	r18,r5,r4
100029d0:	18800005 	stb	r2,0(r3)
100029d4:	9548b03a 	or	r4,r18,r21
100029d8:	203ff61e 	bne	r4,zero,100029b4 <__alt_data_end+0xf80029b4>
100029dc:	e100004c 	andi	r4,fp,1
100029e0:	d8c13115 	stw	r3,1220(sp)
100029e4:	20039a1e 	bne	r4,zero,10003850 <___vfprintf_internal_r+0x144c>
100029e8:	d8812817 	ldw	r2,1184(sp)
100029ec:	10e3c83a 	sub	r17,r2,r3
100029f0:	8805883a 	mov	r2,r17
100029f4:	8a40010e 	bge	r17,r9,100029fc <___vfprintf_internal_r+0x5f8>
100029f8:	4805883a 	mov	r2,r9
100029fc:	d8812b15 	stw	r2,1196(sp)
10002a00:	d8013415 	stw	zero,1232(sp)
10002a04:	98803fcc 	andi	r2,r19,255
10002a08:	1080201c 	xori	r2,r2,128
10002a0c:	10bfe004 	addi	r2,r2,-128
10002a10:	10000326 	beq	r2,zero,10002a20 <___vfprintf_internal_r+0x61c>
10002a14:	d8c12b17 	ldw	r3,1196(sp)
10002a18:	18c00044 	addi	r3,r3,1
10002a1c:	d8c12b15 	stw	r3,1196(sp)
10002a20:	e0c0008c 	andi	r3,fp,2
10002a24:	d8c12c15 	stw	r3,1200(sp)
10002a28:	18000326 	beq	r3,zero,10002a38 <___vfprintf_internal_r+0x634>
10002a2c:	d8c12b17 	ldw	r3,1196(sp)
10002a30:	18c00084 	addi	r3,r3,2
10002a34:	d8c12b15 	stw	r3,1196(sp)
10002a38:	e0c0210c 	andi	r3,fp,132
10002a3c:	d8c13015 	stw	r3,1216(sp)
10002a40:	1801f81e 	bne	r3,zero,10003224 <___vfprintf_internal_r+0xe20>
10002a44:	d9012e17 	ldw	r4,1208(sp)
10002a48:	d8c12b17 	ldw	r3,1196(sp)
10002a4c:	20ebc83a 	sub	r21,r4,r3
10002a50:	0541f40e 	bge	zero,r21,10003224 <___vfprintf_internal_r+0xe20>
10002a54:	02400404 	movi	r9,16
10002a58:	d8c12017 	ldw	r3,1152(sp)
10002a5c:	d8811f17 	ldw	r2,1148(sp)
10002a60:	4d45750e 	bge	r9,r21,10004038 <___vfprintf_internal_r+0x1c34>
10002a64:	01440074 	movhi	r5,4097
10002a68:	29471284 	addi	r5,r5,7242
10002a6c:	d9413615 	stw	r5,1240(sp)
10002a70:	4827883a 	mov	r19,r9
10002a74:	048001c4 	movi	r18,7
10002a78:	00000306 	br	10002a88 <___vfprintf_internal_r+0x684>
10002a7c:	ad7ffc04 	addi	r21,r21,-16
10002a80:	42000204 	addi	r8,r8,8
10002a84:	9d40130e 	bge	r19,r21,10002ad4 <___vfprintf_internal_r+0x6d0>
10002a88:	01040074 	movhi	r4,4097
10002a8c:	18c00404 	addi	r3,r3,16
10002a90:	10800044 	addi	r2,r2,1
10002a94:	21071284 	addi	r4,r4,7242
10002a98:	41000015 	stw	r4,0(r8)
10002a9c:	44c00115 	stw	r19,4(r8)
10002aa0:	d8c12015 	stw	r3,1152(sp)
10002aa4:	d8811f15 	stw	r2,1148(sp)
10002aa8:	90bff40e 	bge	r18,r2,10002a7c <__alt_data_end+0xf8002a7c>
10002aac:	b809883a 	mov	r4,r23
10002ab0:	b00b883a 	mov	r5,r22
10002ab4:	d9811e04 	addi	r6,sp,1144
10002ab8:	00098440 	call	10009844 <__sprint_r>
10002abc:	103f691e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10002ac0:	ad7ffc04 	addi	r21,r21,-16
10002ac4:	d8c12017 	ldw	r3,1152(sp)
10002ac8:	d8811f17 	ldw	r2,1148(sp)
10002acc:	da000404 	addi	r8,sp,16
10002ad0:	9d7fed16 	blt	r19,r21,10002a88 <__alt_data_end+0xf8002a88>
10002ad4:	d9413617 	ldw	r5,1240(sp)
10002ad8:	a8c7883a 	add	r3,r21,r3
10002adc:	10800044 	addi	r2,r2,1
10002ae0:	41400015 	stw	r5,0(r8)
10002ae4:	45400115 	stw	r21,4(r8)
10002ae8:	d8c12015 	stw	r3,1152(sp)
10002aec:	d8811f15 	stw	r2,1148(sp)
10002af0:	010001c4 	movi	r4,7
10002af4:	20832b16 	blt	r4,r2,100037a4 <___vfprintf_internal_r+0x13a0>
10002af8:	d8812787 	ldb	r2,1182(sp)
10002afc:	42000204 	addi	r8,r8,8
10002b00:	10000c26 	beq	r2,zero,10002b34 <___vfprintf_internal_r+0x730>
10002b04:	d8811f17 	ldw	r2,1148(sp)
10002b08:	d9012784 	addi	r4,sp,1182
10002b0c:	18c00044 	addi	r3,r3,1
10002b10:	10800044 	addi	r2,r2,1
10002b14:	41000015 	stw	r4,0(r8)
10002b18:	01000044 	movi	r4,1
10002b1c:	41000115 	stw	r4,4(r8)
10002b20:	d8c12015 	stw	r3,1152(sp)
10002b24:	d8811f15 	stw	r2,1148(sp)
10002b28:	010001c4 	movi	r4,7
10002b2c:	2082c416 	blt	r4,r2,10003640 <___vfprintf_internal_r+0x123c>
10002b30:	42000204 	addi	r8,r8,8
10002b34:	d8812c17 	ldw	r2,1200(sp)
10002b38:	10000c26 	beq	r2,zero,10002b6c <___vfprintf_internal_r+0x768>
10002b3c:	d8811f17 	ldw	r2,1148(sp)
10002b40:	d9012704 	addi	r4,sp,1180
10002b44:	18c00084 	addi	r3,r3,2
10002b48:	10800044 	addi	r2,r2,1
10002b4c:	41000015 	stw	r4,0(r8)
10002b50:	01000084 	movi	r4,2
10002b54:	41000115 	stw	r4,4(r8)
10002b58:	d8c12015 	stw	r3,1152(sp)
10002b5c:	d8811f15 	stw	r2,1148(sp)
10002b60:	010001c4 	movi	r4,7
10002b64:	2082be16 	blt	r4,r2,10003660 <___vfprintf_internal_r+0x125c>
10002b68:	42000204 	addi	r8,r8,8
10002b6c:	d9013017 	ldw	r4,1216(sp)
10002b70:	00802004 	movi	r2,128
10002b74:	20822026 	beq	r4,r2,100033f8 <___vfprintf_internal_r+0xff4>
10002b78:	d9413217 	ldw	r5,1224(sp)
10002b7c:	2c67c83a 	sub	r19,r5,r17
10002b80:	04c0260e 	bge	zero,r19,10002c1c <___vfprintf_internal_r+0x818>
10002b84:	05400404 	movi	r21,16
10002b88:	d8811f17 	ldw	r2,1148(sp)
10002b8c:	acc4720e 	bge	r21,r19,10003d58 <___vfprintf_internal_r+0x1954>
10002b90:	01440074 	movhi	r5,4097
10002b94:	29470e84 	addi	r5,r5,7226
10002b98:	d9412c15 	stw	r5,1200(sp)
10002b9c:	048001c4 	movi	r18,7
10002ba0:	00000306 	br	10002bb0 <___vfprintf_internal_r+0x7ac>
10002ba4:	9cfffc04 	addi	r19,r19,-16
10002ba8:	42000204 	addi	r8,r8,8
10002bac:	acc0110e 	bge	r21,r19,10002bf4 <___vfprintf_internal_r+0x7f0>
10002bb0:	18c00404 	addi	r3,r3,16
10002bb4:	10800044 	addi	r2,r2,1
10002bb8:	45000015 	stw	r20,0(r8)
10002bbc:	45400115 	stw	r21,4(r8)
10002bc0:	d8c12015 	stw	r3,1152(sp)
10002bc4:	d8811f15 	stw	r2,1148(sp)
10002bc8:	90bff60e 	bge	r18,r2,10002ba4 <__alt_data_end+0xf8002ba4>
10002bcc:	b809883a 	mov	r4,r23
10002bd0:	b00b883a 	mov	r5,r22
10002bd4:	d9811e04 	addi	r6,sp,1144
10002bd8:	00098440 	call	10009844 <__sprint_r>
10002bdc:	103f211e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10002be0:	9cfffc04 	addi	r19,r19,-16
10002be4:	d8c12017 	ldw	r3,1152(sp)
10002be8:	d8811f17 	ldw	r2,1148(sp)
10002bec:	da000404 	addi	r8,sp,16
10002bf0:	acffef16 	blt	r21,r19,10002bb0 <__alt_data_end+0xf8002bb0>
10002bf4:	d9012c17 	ldw	r4,1200(sp)
10002bf8:	1cc7883a 	add	r3,r3,r19
10002bfc:	10800044 	addi	r2,r2,1
10002c00:	41000015 	stw	r4,0(r8)
10002c04:	44c00115 	stw	r19,4(r8)
10002c08:	d8c12015 	stw	r3,1152(sp)
10002c0c:	d8811f15 	stw	r2,1148(sp)
10002c10:	010001c4 	movi	r4,7
10002c14:	20828216 	blt	r4,r2,10003620 <___vfprintf_internal_r+0x121c>
10002c18:	42000204 	addi	r8,r8,8
10002c1c:	e080400c 	andi	r2,fp,256
10002c20:	1001ac1e 	bne	r2,zero,100032d4 <___vfprintf_internal_r+0xed0>
10002c24:	d8811f17 	ldw	r2,1148(sp)
10002c28:	d9413117 	ldw	r5,1220(sp)
10002c2c:	1c47883a 	add	r3,r3,r17
10002c30:	10800044 	addi	r2,r2,1
10002c34:	41400015 	stw	r5,0(r8)
10002c38:	44400115 	stw	r17,4(r8)
10002c3c:	d8c12015 	stw	r3,1152(sp)
10002c40:	d8811f15 	stw	r2,1148(sp)
10002c44:	010001c4 	movi	r4,7
10002c48:	20825d16 	blt	r4,r2,100035c0 <___vfprintf_internal_r+0x11bc>
10002c4c:	42000204 	addi	r8,r8,8
10002c50:	e080010c 	andi	r2,fp,4
10002c54:	10003126 	beq	r2,zero,10002d1c <___vfprintf_internal_r+0x918>
10002c58:	d8812e17 	ldw	r2,1208(sp)
10002c5c:	d9012b17 	ldw	r4,1196(sp)
10002c60:	1121c83a 	sub	r16,r2,r4
10002c64:	04002d0e 	bge	zero,r16,10002d1c <___vfprintf_internal_r+0x918>
10002c68:	04400404 	movi	r17,16
10002c6c:	d8811f17 	ldw	r2,1148(sp)
10002c70:	8c05340e 	bge	r17,r16,10004144 <___vfprintf_internal_r+0x1d40>
10002c74:	01040074 	movhi	r4,4097
10002c78:	21071284 	addi	r4,r4,7242
10002c7c:	d9013615 	stw	r4,1240(sp)
10002c80:	048001c4 	movi	r18,7
10002c84:	00000306 	br	10002c94 <___vfprintf_internal_r+0x890>
10002c88:	843ffc04 	addi	r16,r16,-16
10002c8c:	42000204 	addi	r8,r8,8
10002c90:	8c00130e 	bge	r17,r16,10002ce0 <___vfprintf_internal_r+0x8dc>
10002c94:	01440074 	movhi	r5,4097
10002c98:	18c00404 	addi	r3,r3,16
10002c9c:	10800044 	addi	r2,r2,1
10002ca0:	29471284 	addi	r5,r5,7242
10002ca4:	41400015 	stw	r5,0(r8)
10002ca8:	44400115 	stw	r17,4(r8)
10002cac:	d8c12015 	stw	r3,1152(sp)
10002cb0:	d8811f15 	stw	r2,1148(sp)
10002cb4:	90bff40e 	bge	r18,r2,10002c88 <__alt_data_end+0xf8002c88>
10002cb8:	b809883a 	mov	r4,r23
10002cbc:	b00b883a 	mov	r5,r22
10002cc0:	d9811e04 	addi	r6,sp,1144
10002cc4:	00098440 	call	10009844 <__sprint_r>
10002cc8:	103ee61e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10002ccc:	843ffc04 	addi	r16,r16,-16
10002cd0:	d8c12017 	ldw	r3,1152(sp)
10002cd4:	d8811f17 	ldw	r2,1148(sp)
10002cd8:	da000404 	addi	r8,sp,16
10002cdc:	8c3fed16 	blt	r17,r16,10002c94 <__alt_data_end+0xf8002c94>
10002ce0:	d9013617 	ldw	r4,1240(sp)
10002ce4:	1c07883a 	add	r3,r3,r16
10002ce8:	10800044 	addi	r2,r2,1
10002cec:	41000015 	stw	r4,0(r8)
10002cf0:	44000115 	stw	r16,4(r8)
10002cf4:	d8c12015 	stw	r3,1152(sp)
10002cf8:	d8811f15 	stw	r2,1148(sp)
10002cfc:	010001c4 	movi	r4,7
10002d00:	2080060e 	bge	r4,r2,10002d1c <___vfprintf_internal_r+0x918>
10002d04:	b809883a 	mov	r4,r23
10002d08:	b00b883a 	mov	r5,r22
10002d0c:	d9811e04 	addi	r6,sp,1144
10002d10:	00098440 	call	10009844 <__sprint_r>
10002d14:	103ed31e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10002d18:	d8c12017 	ldw	r3,1152(sp)
10002d1c:	df012b17 	ldw	fp,1196(sp)
10002d20:	d9412e17 	ldw	r5,1208(sp)
10002d24:	e140010e 	bge	fp,r5,10002d2c <___vfprintf_internal_r+0x928>
10002d28:	2839883a 	mov	fp,r5
10002d2c:	d8812f17 	ldw	r2,1212(sp)
10002d30:	1705883a 	add	r2,r2,fp
10002d34:	d8812f15 	stw	r2,1212(sp)
10002d38:	1802291e 	bne	r3,zero,100035e0 <___vfprintf_internal_r+0x11dc>
10002d3c:	d8c12a17 	ldw	r3,1192(sp)
10002d40:	d8011f15 	stw	zero,1148(sp)
10002d44:	da000404 	addi	r8,sp,16
10002d48:	18800007 	ldb	r2,0(r3)
10002d4c:	103ded1e 	bne	r2,zero,10002504 <__alt_data_end+0xf8002504>
10002d50:	dc012a17 	ldw	r16,1192(sp)
10002d54:	003e0506 	br	1000256c <__alt_data_end+0xf800256c>
10002d58:	d9012d17 	ldw	r4,1204(sp)
10002d5c:	d9412d17 	ldw	r5,1204(sp)
10002d60:	da012a17 	ldw	r8,1192(sp)
10002d64:	21000017 	ldw	r4,0(r4)
10002d68:	29400117 	ldw	r5,4(r5)
10002d6c:	df012a15 	stw	fp,1192(sp)
10002d70:	9839883a 	mov	fp,r19
10002d74:	dcc12b03 	ldbu	r19,1196(sp)
10002d78:	d9013715 	stw	r4,1244(sp)
10002d7c:	d9413915 	stw	r5,1252(sp)
10002d80:	da013f15 	stw	r8,1276(sp)
10002d84:	da413e15 	stw	r9,1272(sp)
10002d88:	dcc12785 	stb	r19,1182(sp)
10002d8c:	00094a00 	call	100094a0 <__fpclassifyd>
10002d90:	d8c12d17 	ldw	r3,1204(sp)
10002d94:	04400044 	movi	r17,1
10002d98:	da013f17 	ldw	r8,1276(sp)
10002d9c:	1c800204 	addi	r18,r3,8
10002da0:	da413e17 	ldw	r9,1272(sp)
10002da4:	d9013717 	ldw	r4,1244(sp)
10002da8:	d9413917 	ldw	r5,1252(sp)
10002dac:	1443451e 	bne	r2,r17,10003ac4 <___vfprintf_internal_r+0x16c0>
10002db0:	000d883a 	mov	r6,zero
10002db4:	000f883a 	mov	r7,zero
10002db8:	000d7200 	call	1000d720 <__ledf2>
10002dbc:	da013f17 	ldw	r8,1276(sp)
10002dc0:	1004fe16 	blt	r2,zero,100041bc <___vfprintf_internal_r+0x1db8>
10002dc4:	dcc12783 	ldbu	r19,1182(sp)
10002dc8:	008011c4 	movi	r2,71
10002dcc:	14045d0e 	bge	r2,r16,10003f44 <___vfprintf_internal_r+0x1b40>
10002dd0:	01440074 	movhi	r5,4097
10002dd4:	2946ff04 	addi	r5,r5,7164
10002dd8:	d9413115 	stw	r5,1220(sp)
10002ddc:	00c000c4 	movi	r3,3
10002de0:	00bfdfc4 	movi	r2,-129
10002de4:	d8c12b15 	stw	r3,1196(sp)
10002de8:	e0b8703a 	and	fp,fp,r2
10002dec:	dc812d15 	stw	r18,1204(sp)
10002df0:	1823883a 	mov	r17,r3
10002df4:	d8013215 	stw	zero,1224(sp)
10002df8:	d8013415 	stw	zero,1232(sp)
10002dfc:	003f0106 	br	10002a04 <__alt_data_end+0xf8002a04>
10002e00:	9cc00214 	ori	r19,r19,8
10002e04:	e005883a 	mov	r2,fp
10002e08:	e4000007 	ldb	r16,0(fp)
10002e0c:	003de506 	br	100025a4 <__alt_data_end+0xf80025a4>
10002e10:	da012a17 	ldw	r8,1192(sp)
10002e14:	df012a15 	stw	fp,1192(sp)
10002e18:	9f000414 	ori	fp,r19,16
10002e1c:	e0c0080c 	andi	r3,fp,32
10002e20:	d8812d17 	ldw	r2,1204(sp)
10002e24:	18007626 	beq	r3,zero,10003000 <___vfprintf_internal_r+0xbfc>
10002e28:	d9412d17 	ldw	r5,1204(sp)
10002e2c:	14800017 	ldw	r18,0(r2)
10002e30:	15400117 	ldw	r21,4(r2)
10002e34:	29400204 	addi	r5,r5,8
10002e38:	d9412d15 	stw	r5,1204(sp)
10002e3c:	0005883a 	mov	r2,zero
10002e40:	9546b03a 	or	r3,r18,r21
10002e44:	d8012785 	stb	zero,1182(sp)
10002e48:	da413215 	stw	r9,1224(sp)
10002e4c:	0027883a 	mov	r19,zero
10002e50:	003ecd06 	br	10002988 <__alt_data_end+0xf8002988>
10002e54:	da012a17 	ldw	r8,1192(sp)
10002e58:	df012a15 	stw	fp,1192(sp)
10002e5c:	9f000414 	ori	fp,r19,16
10002e60:	e0c0080c 	andi	r3,fp,32
10002e64:	d8812d17 	ldw	r2,1204(sp)
10002e68:	18002c26 	beq	r3,zero,10002f1c <___vfprintf_internal_r+0xb18>
10002e6c:	d9012d17 	ldw	r4,1204(sp)
10002e70:	14800017 	ldw	r18,0(r2)
10002e74:	15400117 	ldw	r21,4(r2)
10002e78:	21000204 	addi	r4,r4,8
10002e7c:	d9012d15 	stw	r4,1204(sp)
10002e80:	00800044 	movi	r2,1
10002e84:	9546b03a 	or	r3,r18,r21
10002e88:	003fee06 	br	10002e44 <__alt_data_end+0xf8002e44>
10002e8c:	da012a17 	ldw	r8,1192(sp)
10002e90:	df012a15 	stw	fp,1192(sp)
10002e94:	9839883a 	mov	fp,r19
10002e98:	dcc12b03 	ldbu	r19,1196(sp)
10002e9c:	01440074 	movhi	r5,4097
10002ea0:	29470204 	addi	r5,r5,7176
10002ea4:	dcc12785 	stb	r19,1182(sp)
10002ea8:	d9413b15 	stw	r5,1260(sp)
10002eac:	e0c0080c 	andi	r3,fp,32
10002eb0:	d8812d17 	ldw	r2,1204(sp)
10002eb4:	18002e26 	beq	r3,zero,10002f70 <___vfprintf_internal_r+0xb6c>
10002eb8:	d9412d17 	ldw	r5,1204(sp)
10002ebc:	14800017 	ldw	r18,0(r2)
10002ec0:	15400117 	ldw	r21,4(r2)
10002ec4:	29400204 	addi	r5,r5,8
10002ec8:	d9412d15 	stw	r5,1204(sp)
10002ecc:	e080004c 	andi	r2,fp,1
10002ed0:	10025c26 	beq	r2,zero,10003844 <___vfprintf_internal_r+0x1440>
10002ed4:	9546b03a 	or	r3,r18,r21
10002ed8:	18038f26 	beq	r3,zero,10003d18 <___vfprintf_internal_r+0x1914>
10002edc:	00800c04 	movi	r2,48
10002ee0:	d8812705 	stb	r2,1180(sp)
10002ee4:	dc012745 	stb	r16,1181(sp)
10002ee8:	e7000094 	ori	fp,fp,2
10002eec:	00800084 	movi	r2,2
10002ef0:	003fd406 	br	10002e44 <__alt_data_end+0xf8002e44>
10002ef4:	9cc00814 	ori	r19,r19,32
10002ef8:	e005883a 	mov	r2,fp
10002efc:	e4000007 	ldb	r16,0(fp)
10002f00:	003da806 	br	100025a4 <__alt_data_end+0xf80025a4>
10002f04:	da012a17 	ldw	r8,1192(sp)
10002f08:	df012a15 	stw	fp,1192(sp)
10002f0c:	9839883a 	mov	fp,r19
10002f10:	e0c0080c 	andi	r3,fp,32
10002f14:	d8812d17 	ldw	r2,1204(sp)
10002f18:	183fd41e 	bne	r3,zero,10002e6c <__alt_data_end+0xf8002e6c>
10002f1c:	e0c0040c 	andi	r3,fp,16
10002f20:	18035f26 	beq	r3,zero,10003ca0 <___vfprintf_internal_r+0x189c>
10002f24:	d9412d17 	ldw	r5,1204(sp)
10002f28:	14800017 	ldw	r18,0(r2)
10002f2c:	002b883a 	mov	r21,zero
10002f30:	29400104 	addi	r5,r5,4
10002f34:	d9412d15 	stw	r5,1204(sp)
10002f38:	00800044 	movi	r2,1
10002f3c:	9007883a 	mov	r3,r18
10002f40:	003fc006 	br	10002e44 <__alt_data_end+0xf8002e44>
10002f44:	da012a17 	ldw	r8,1192(sp)
10002f48:	df012a15 	stw	fp,1192(sp)
10002f4c:	9839883a 	mov	fp,r19
10002f50:	dcc12b03 	ldbu	r19,1196(sp)
10002f54:	01040074 	movhi	r4,4097
10002f58:	21070704 	addi	r4,r4,7196
10002f5c:	d9013b15 	stw	r4,1260(sp)
10002f60:	dcc12785 	stb	r19,1182(sp)
10002f64:	e0c0080c 	andi	r3,fp,32
10002f68:	d8812d17 	ldw	r2,1204(sp)
10002f6c:	183fd21e 	bne	r3,zero,10002eb8 <__alt_data_end+0xf8002eb8>
10002f70:	e0c0040c 	andi	r3,fp,16
10002f74:	18035426 	beq	r3,zero,10003cc8 <___vfprintf_internal_r+0x18c4>
10002f78:	d8c12d17 	ldw	r3,1204(sp)
10002f7c:	14800017 	ldw	r18,0(r2)
10002f80:	002b883a 	mov	r21,zero
10002f84:	18c00104 	addi	r3,r3,4
10002f88:	d8c12d15 	stw	r3,1204(sp)
10002f8c:	003fcf06 	br	10002ecc <__alt_data_end+0xf8002ecc>
10002f90:	e4000007 	ldb	r16,0(fp)
10002f94:	00801b04 	movi	r2,108
10002f98:	8083f726 	beq	r16,r2,10003f78 <___vfprintf_internal_r+0x1b74>
10002f9c:	9cc00414 	ori	r19,r19,16
10002fa0:	e005883a 	mov	r2,fp
10002fa4:	003d7f06 	br	100025a4 <__alt_data_end+0xf80025a4>
10002fa8:	da012a17 	ldw	r8,1192(sp)
10002fac:	df012a15 	stw	fp,1192(sp)
10002fb0:	9839883a 	mov	fp,r19
10002fb4:	dcc12b03 	ldbu	r19,1196(sp)
10002fb8:	e080080c 	andi	r2,fp,32
10002fbc:	dcc12785 	stb	r19,1182(sp)
10002fc0:	10032226 	beq	r2,zero,10003c4c <___vfprintf_internal_r+0x1848>
10002fc4:	d9412d17 	ldw	r5,1204(sp)
10002fc8:	d9012f17 	ldw	r4,1212(sp)
10002fcc:	28800017 	ldw	r2,0(r5)
10002fd0:	2007d7fa 	srai	r3,r4,31
10002fd4:	29400104 	addi	r5,r5,4
10002fd8:	d9412d15 	stw	r5,1204(sp)
10002fdc:	11000015 	stw	r4,0(r2)
10002fe0:	10c00115 	stw	r3,4(r2)
10002fe4:	003d4406 	br	100024f8 <__alt_data_end+0xf80024f8>
10002fe8:	da012a17 	ldw	r8,1192(sp)
10002fec:	df012a15 	stw	fp,1192(sp)
10002ff0:	9839883a 	mov	fp,r19
10002ff4:	e0c0080c 	andi	r3,fp,32
10002ff8:	d8812d17 	ldw	r2,1204(sp)
10002ffc:	183f8a1e 	bne	r3,zero,10002e28 <__alt_data_end+0xf8002e28>
10003000:	e0c0040c 	andi	r3,fp,16
10003004:	18031c26 	beq	r3,zero,10003c78 <___vfprintf_internal_r+0x1874>
10003008:	14800017 	ldw	r18,0(r2)
1000300c:	d8812d17 	ldw	r2,1204(sp)
10003010:	002b883a 	mov	r21,zero
10003014:	9007883a 	mov	r3,r18
10003018:	10800104 	addi	r2,r2,4
1000301c:	d8812d15 	stw	r2,1204(sp)
10003020:	0005883a 	mov	r2,zero
10003024:	003f8706 	br	10002e44 <__alt_data_end+0xf8002e44>
10003028:	d9412d17 	ldw	r5,1204(sp)
1000302c:	00800c04 	movi	r2,48
10003030:	d8812705 	stb	r2,1180(sp)
10003034:	2c800017 	ldw	r18,0(r5)
10003038:	00801e04 	movi	r2,120
1000303c:	d8812745 	stb	r2,1181(sp)
10003040:	00840074 	movhi	r2,4097
10003044:	10870704 	addi	r2,r2,7196
10003048:	29400104 	addi	r5,r5,4
1000304c:	da012a17 	ldw	r8,1192(sp)
10003050:	d8813b15 	stw	r2,1260(sp)
10003054:	df012a15 	stw	fp,1192(sp)
10003058:	002b883a 	mov	r21,zero
1000305c:	9f000094 	ori	fp,r19,2
10003060:	d9412d15 	stw	r5,1204(sp)
10003064:	00800084 	movi	r2,2
10003068:	04001e04 	movi	r16,120
1000306c:	9007883a 	mov	r3,r18
10003070:	003f7406 	br	10002e44 <__alt_data_end+0xf8002e44>
10003074:	da012a17 	ldw	r8,1192(sp)
10003078:	df012a15 	stw	fp,1192(sp)
1000307c:	9839883a 	mov	fp,r19
10003080:	dcc12b03 	ldbu	r19,1196(sp)
10003084:	e080080c 	andi	r2,fp,32
10003088:	d8c12d17 	ldw	r3,1204(sp)
1000308c:	dcc12785 	stb	r19,1182(sp)
10003090:	103e321e 	bne	r2,zero,1000295c <__alt_data_end+0xf800295c>
10003094:	e080040c 	andi	r2,fp,16
10003098:	10031326 	beq	r2,zero,10003ce8 <___vfprintf_internal_r+0x18e4>
1000309c:	1c800017 	ldw	r18,0(r3)
100030a0:	d9412d17 	ldw	r5,1204(sp)
100030a4:	902bd7fa 	srai	r21,r18,31
100030a8:	29400104 	addi	r5,r5,4
100030ac:	d9412d15 	stw	r5,1204(sp)
100030b0:	a805883a 	mov	r2,r21
100030b4:	003e2f06 	br	10002974 <__alt_data_end+0xf8002974>
100030b8:	9cc01014 	ori	r19,r19,64
100030bc:	e005883a 	mov	r2,fp
100030c0:	e4000007 	ldb	r16,0(fp)
100030c4:	003d3706 	br	100025a4 <__alt_data_end+0xf80025a4>
100030c8:	d8c12d17 	ldw	r3,1204(sp)
100030cc:	d9012d17 	ldw	r4,1204(sp)
100030d0:	da012a17 	ldw	r8,1192(sp)
100030d4:	18800017 	ldw	r2,0(r3)
100030d8:	21000104 	addi	r4,r4,4
100030dc:	00c00044 	movi	r3,1
100030e0:	df012a15 	stw	fp,1192(sp)
100030e4:	d8c12b15 	stw	r3,1196(sp)
100030e8:	9839883a 	mov	fp,r19
100030ec:	d8012785 	stb	zero,1182(sp)
100030f0:	d8810405 	stb	r2,1040(sp)
100030f4:	d9012d15 	stw	r4,1204(sp)
100030f8:	1823883a 	mov	r17,r3
100030fc:	d8c10404 	addi	r3,sp,1040
10003100:	d8013215 	stw	zero,1224(sp)
10003104:	d8013415 	stw	zero,1232(sp)
10003108:	d8c13115 	stw	r3,1220(sp)
1000310c:	0005883a 	mov	r2,zero
10003110:	003e4306 	br	10002a20 <__alt_data_end+0xf8002a20>
10003114:	d8812b07 	ldb	r2,1196(sp)
10003118:	1002fc1e 	bne	r2,zero,10003d0c <___vfprintf_internal_r+0x1908>
1000311c:	00c00804 	movi	r3,32
10003120:	d8c12b05 	stb	r3,1196(sp)
10003124:	e005883a 	mov	r2,fp
10003128:	e4000007 	ldb	r16,0(fp)
1000312c:	003d1d06 	br	100025a4 <__alt_data_end+0xf80025a4>
10003130:	9cc00054 	ori	r19,r19,1
10003134:	e005883a 	mov	r2,fp
10003138:	e4000007 	ldb	r16,0(fp)
1000313c:	003d1906 	br	100025a4 <__alt_data_end+0xf80025a4>
10003140:	d9012d17 	ldw	r4,1204(sp)
10003144:	d9412d17 	ldw	r5,1204(sp)
10003148:	21000017 	ldw	r4,0(r4)
1000314c:	28c00104 	addi	r3,r5,4
10003150:	d9012e15 	stw	r4,1208(sp)
10003154:	20038c16 	blt	r4,zero,10003f88 <___vfprintf_internal_r+0x1b84>
10003158:	d8c12d15 	stw	r3,1204(sp)
1000315c:	e005883a 	mov	r2,fp
10003160:	e4000007 	ldb	r16,0(fp)
10003164:	003d0f06 	br	100025a4 <__alt_data_end+0xf80025a4>
10003168:	00c00ac4 	movi	r3,43
1000316c:	d8c12b05 	stb	r3,1196(sp)
10003170:	e005883a 	mov	r2,fp
10003174:	e4000007 	ldb	r16,0(fp)
10003178:	003d0a06 	br	100025a4 <__alt_data_end+0xf80025a4>
1000317c:	d8c12d17 	ldw	r3,1204(sp)
10003180:	d9012d17 	ldw	r4,1204(sp)
10003184:	da012a17 	ldw	r8,1192(sp)
10003188:	18c00017 	ldw	r3,0(r3)
1000318c:	df012a15 	stw	fp,1192(sp)
10003190:	d8012785 	stb	zero,1182(sp)
10003194:	d8c13115 	stw	r3,1220(sp)
10003198:	9839883a 	mov	fp,r19
1000319c:	24800104 	addi	r18,r4,4
100031a0:	1803f726 	beq	r3,zero,10004180 <___vfprintf_internal_r+0x1d7c>
100031a4:	d9013117 	ldw	r4,1220(sp)
100031a8:	48038916 	blt	r9,zero,10003fd0 <___vfprintf_internal_r+0x1bcc>
100031ac:	480d883a 	mov	r6,r9
100031b0:	000b883a 	mov	r5,zero
100031b4:	da013f15 	stw	r8,1276(sp)
100031b8:	da413e15 	stw	r9,1272(sp)
100031bc:	0007a180 	call	10007a18 <memchr>
100031c0:	da013f17 	ldw	r8,1276(sp)
100031c4:	da413e17 	ldw	r9,1272(sp)
100031c8:	10045926 	beq	r2,zero,10004330 <___vfprintf_internal_r+0x1f2c>
100031cc:	d8c13117 	ldw	r3,1220(sp)
100031d0:	10e3c83a 	sub	r17,r2,r3
100031d4:	4c433516 	blt	r9,r17,10003eac <___vfprintf_internal_r+0x1aa8>
100031d8:	8805883a 	mov	r2,r17
100031dc:	88038116 	blt	r17,zero,10003fe4 <___vfprintf_internal_r+0x1be0>
100031e0:	dcc12783 	ldbu	r19,1182(sp)
100031e4:	d8812b15 	stw	r2,1196(sp)
100031e8:	dc812d15 	stw	r18,1204(sp)
100031ec:	d8013215 	stw	zero,1224(sp)
100031f0:	d8013415 	stw	zero,1232(sp)
100031f4:	003e0306 	br	10002a04 <__alt_data_end+0xf8002a04>
100031f8:	da012a17 	ldw	r8,1192(sp)
100031fc:	df012a15 	stw	fp,1192(sp)
10003200:	9839883a 	mov	fp,r19
10003204:	dcc12b03 	ldbu	r19,1196(sp)
10003208:	dcc12785 	stb	r19,1182(sp)
1000320c:	803d8f26 	beq	r16,zero,1000284c <__alt_data_end+0xf800284c>
10003210:	00c00044 	movi	r3,1
10003214:	d8c12b15 	stw	r3,1196(sp)
10003218:	dc010405 	stb	r16,1040(sp)
1000321c:	d8012785 	stb	zero,1182(sp)
10003220:	003fb506 	br	100030f8 <__alt_data_end+0xf80030f8>
10003224:	d8c12017 	ldw	r3,1152(sp)
10003228:	003e3506 	br	10002b00 <__alt_data_end+0xf8002b00>
1000322c:	10803fcc 	andi	r2,r2,255
10003230:	00c00044 	movi	r3,1
10003234:	10fddc1e 	bne	r2,r3,100029a8 <__alt_data_end+0xf80029a8>
10003238:	a800021e 	bne	r21,zero,10003244 <___vfprintf_internal_r+0xe40>
1000323c:	00800244 	movi	r2,9
10003240:	14801e2e 	bgeu	r2,r18,100032bc <___vfprintf_internal_r+0xeb8>
10003244:	dc012b15 	stw	r16,1196(sp)
10003248:	dc410e04 	addi	r17,sp,1080
1000324c:	9021883a 	mov	r16,r18
10003250:	da012c15 	stw	r8,1200(sp)
10003254:	a825883a 	mov	r18,r21
10003258:	482b883a 	mov	r21,r9
1000325c:	8009883a 	mov	r4,r16
10003260:	900b883a 	mov	r5,r18
10003264:	01800284 	movi	r6,10
10003268:	000f883a 	mov	r7,zero
1000326c:	000bc300 	call	1000bc30 <__umoddi3>
10003270:	10800c04 	addi	r2,r2,48
10003274:	8c7fffc4 	addi	r17,r17,-1
10003278:	8009883a 	mov	r4,r16
1000327c:	900b883a 	mov	r5,r18
10003280:	01800284 	movi	r6,10
10003284:	000f883a 	mov	r7,zero
10003288:	88800005 	stb	r2,0(r17)
1000328c:	000b5f00 	call	1000b5f0 <__udivdi3>
10003290:	1021883a 	mov	r16,r2
10003294:	10c4b03a 	or	r2,r2,r3
10003298:	1825883a 	mov	r18,r3
1000329c:	103fef1e 	bne	r2,zero,1000325c <__alt_data_end+0xf800325c>
100032a0:	d9012817 	ldw	r4,1184(sp)
100032a4:	dc413115 	stw	r17,1220(sp)
100032a8:	dc012b17 	ldw	r16,1196(sp)
100032ac:	da012c17 	ldw	r8,1200(sp)
100032b0:	a813883a 	mov	r9,r21
100032b4:	2463c83a 	sub	r17,r4,r17
100032b8:	003dcd06 	br	100029f0 <__alt_data_end+0xf80029f0>
100032bc:	94800c04 	addi	r18,r18,48
100032c0:	d8c10dc4 	addi	r3,sp,1079
100032c4:	dc810dc5 	stb	r18,1079(sp)
100032c8:	dc413c17 	ldw	r17,1264(sp)
100032cc:	d8c13115 	stw	r3,1220(sp)
100032d0:	003dc706 	br	100029f0 <__alt_data_end+0xf80029f0>
100032d4:	00801944 	movi	r2,101
100032d8:	1400720e 	bge	r2,r16,100034a4 <___vfprintf_internal_r+0x10a0>
100032dc:	d9013717 	ldw	r4,1244(sp)
100032e0:	d9413917 	ldw	r5,1252(sp)
100032e4:	000d883a 	mov	r6,zero
100032e8:	000f883a 	mov	r7,zero
100032ec:	d8c13d15 	stw	r3,1268(sp)
100032f0:	da013f15 	stw	r8,1276(sp)
100032f4:	000d5bc0 	call	1000d5bc <__eqdf2>
100032f8:	d8c13d17 	ldw	r3,1268(sp)
100032fc:	da013f17 	ldw	r8,1276(sp)
10003300:	1000f41e 	bne	r2,zero,100036d4 <___vfprintf_internal_r+0x12d0>
10003304:	d8811f17 	ldw	r2,1148(sp)
10003308:	01040074 	movhi	r4,4097
1000330c:	21070e04 	addi	r4,r4,7224
10003310:	18c00044 	addi	r3,r3,1
10003314:	10800044 	addi	r2,r2,1
10003318:	41000015 	stw	r4,0(r8)
1000331c:	01000044 	movi	r4,1
10003320:	41000115 	stw	r4,4(r8)
10003324:	d8c12015 	stw	r3,1152(sp)
10003328:	d8811f15 	stw	r2,1148(sp)
1000332c:	010001c4 	movi	r4,7
10003330:	20828d16 	blt	r4,r2,10003d68 <___vfprintf_internal_r+0x1964>
10003334:	42000204 	addi	r8,r8,8
10003338:	d8812617 	ldw	r2,1176(sp)
1000333c:	d9413317 	ldw	r5,1228(sp)
10003340:	11400216 	blt	r2,r5,1000334c <___vfprintf_internal_r+0xf48>
10003344:	e080004c 	andi	r2,fp,1
10003348:	103e4126 	beq	r2,zero,10002c50 <__alt_data_end+0xf8002c50>
1000334c:	d8813817 	ldw	r2,1248(sp)
10003350:	d9013517 	ldw	r4,1236(sp)
10003354:	d9413817 	ldw	r5,1248(sp)
10003358:	1887883a 	add	r3,r3,r2
1000335c:	d8811f17 	ldw	r2,1148(sp)
10003360:	41000015 	stw	r4,0(r8)
10003364:	41400115 	stw	r5,4(r8)
10003368:	10800044 	addi	r2,r2,1
1000336c:	d8c12015 	stw	r3,1152(sp)
10003370:	d8811f15 	stw	r2,1148(sp)
10003374:	010001c4 	movi	r4,7
10003378:	20830916 	blt	r4,r2,10003fa0 <___vfprintf_internal_r+0x1b9c>
1000337c:	42000204 	addi	r8,r8,8
10003380:	d8813317 	ldw	r2,1228(sp)
10003384:	143fffc4 	addi	r16,r2,-1
10003388:	043e310e 	bge	zero,r16,10002c50 <__alt_data_end+0xf8002c50>
1000338c:	04400404 	movi	r17,16
10003390:	d8811f17 	ldw	r2,1148(sp)
10003394:	8c007e0e 	bge	r17,r16,10003590 <___vfprintf_internal_r+0x118c>
10003398:	01440074 	movhi	r5,4097
1000339c:	29470e84 	addi	r5,r5,7226
100033a0:	d9412c15 	stw	r5,1200(sp)
100033a4:	04c001c4 	movi	r19,7
100033a8:	00000306 	br	100033b8 <___vfprintf_internal_r+0xfb4>
100033ac:	42000204 	addi	r8,r8,8
100033b0:	843ffc04 	addi	r16,r16,-16
100033b4:	8c00790e 	bge	r17,r16,1000359c <___vfprintf_internal_r+0x1198>
100033b8:	18c00404 	addi	r3,r3,16
100033bc:	10800044 	addi	r2,r2,1
100033c0:	45000015 	stw	r20,0(r8)
100033c4:	44400115 	stw	r17,4(r8)
100033c8:	d8c12015 	stw	r3,1152(sp)
100033cc:	d8811f15 	stw	r2,1148(sp)
100033d0:	98bff60e 	bge	r19,r2,100033ac <__alt_data_end+0xf80033ac>
100033d4:	b809883a 	mov	r4,r23
100033d8:	b00b883a 	mov	r5,r22
100033dc:	d9811e04 	addi	r6,sp,1144
100033e0:	00098440 	call	10009844 <__sprint_r>
100033e4:	103d1f1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
100033e8:	d8c12017 	ldw	r3,1152(sp)
100033ec:	d8811f17 	ldw	r2,1148(sp)
100033f0:	da000404 	addi	r8,sp,16
100033f4:	003fee06 	br	100033b0 <__alt_data_end+0xf80033b0>
100033f8:	d9412e17 	ldw	r5,1208(sp)
100033fc:	d8812b17 	ldw	r2,1196(sp)
10003400:	28a7c83a 	sub	r19,r5,r2
10003404:	04fddc0e 	bge	zero,r19,10002b78 <__alt_data_end+0xf8002b78>
10003408:	05400404 	movi	r21,16
1000340c:	d8811f17 	ldw	r2,1148(sp)
10003410:	acc3870e 	bge	r21,r19,10004230 <___vfprintf_internal_r+0x1e2c>
10003414:	01440074 	movhi	r5,4097
10003418:	29470e84 	addi	r5,r5,7226
1000341c:	d9412c15 	stw	r5,1200(sp)
10003420:	048001c4 	movi	r18,7
10003424:	00000306 	br	10003434 <___vfprintf_internal_r+0x1030>
10003428:	9cfffc04 	addi	r19,r19,-16
1000342c:	42000204 	addi	r8,r8,8
10003430:	acc0110e 	bge	r21,r19,10003478 <___vfprintf_internal_r+0x1074>
10003434:	18c00404 	addi	r3,r3,16
10003438:	10800044 	addi	r2,r2,1
1000343c:	45000015 	stw	r20,0(r8)
10003440:	45400115 	stw	r21,4(r8)
10003444:	d8c12015 	stw	r3,1152(sp)
10003448:	d8811f15 	stw	r2,1148(sp)
1000344c:	90bff60e 	bge	r18,r2,10003428 <__alt_data_end+0xf8003428>
10003450:	b809883a 	mov	r4,r23
10003454:	b00b883a 	mov	r5,r22
10003458:	d9811e04 	addi	r6,sp,1144
1000345c:	00098440 	call	10009844 <__sprint_r>
10003460:	103d001e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003464:	9cfffc04 	addi	r19,r19,-16
10003468:	d8c12017 	ldw	r3,1152(sp)
1000346c:	d8811f17 	ldw	r2,1148(sp)
10003470:	da000404 	addi	r8,sp,16
10003474:	acffef16 	blt	r21,r19,10003434 <__alt_data_end+0xf8003434>
10003478:	d9012c17 	ldw	r4,1200(sp)
1000347c:	1cc7883a 	add	r3,r3,r19
10003480:	10800044 	addi	r2,r2,1
10003484:	41000015 	stw	r4,0(r8)
10003488:	44c00115 	stw	r19,4(r8)
1000348c:	d8c12015 	stw	r3,1152(sp)
10003490:	d8811f15 	stw	r2,1148(sp)
10003494:	010001c4 	movi	r4,7
10003498:	20817816 	blt	r4,r2,10003a7c <___vfprintf_internal_r+0x1678>
1000349c:	42000204 	addi	r8,r8,8
100034a0:	003db506 	br	10002b78 <__alt_data_end+0xf8002b78>
100034a4:	d9413317 	ldw	r5,1228(sp)
100034a8:	00800044 	movi	r2,1
100034ac:	18c00044 	addi	r3,r3,1
100034b0:	11413e0e 	bge	r2,r5,100039ac <___vfprintf_internal_r+0x15a8>
100034b4:	dc011f17 	ldw	r16,1148(sp)
100034b8:	d8813117 	ldw	r2,1220(sp)
100034bc:	d8c12015 	stw	r3,1152(sp)
100034c0:	84000044 	addi	r16,r16,1
100034c4:	40800015 	stw	r2,0(r8)
100034c8:	00800044 	movi	r2,1
100034cc:	40800115 	stw	r2,4(r8)
100034d0:	dc011f15 	stw	r16,1148(sp)
100034d4:	008001c4 	movi	r2,7
100034d8:	14015616 	blt	r2,r16,10003a34 <___vfprintf_internal_r+0x1630>
100034dc:	42000204 	addi	r8,r8,8
100034e0:	d9013817 	ldw	r4,1248(sp)
100034e4:	d9413517 	ldw	r5,1236(sp)
100034e8:	84000044 	addi	r16,r16,1
100034ec:	1907883a 	add	r3,r3,r4
100034f0:	41400015 	stw	r5,0(r8)
100034f4:	41000115 	stw	r4,4(r8)
100034f8:	d8c12015 	stw	r3,1152(sp)
100034fc:	dc011f15 	stw	r16,1148(sp)
10003500:	008001c4 	movi	r2,7
10003504:	14015416 	blt	r2,r16,10003a58 <___vfprintf_internal_r+0x1654>
10003508:	44400204 	addi	r17,r8,8
1000350c:	d9013717 	ldw	r4,1244(sp)
10003510:	d9413917 	ldw	r5,1252(sp)
10003514:	000d883a 	mov	r6,zero
10003518:	000f883a 	mov	r7,zero
1000351c:	d8c13d15 	stw	r3,1268(sp)
10003520:	000d5bc0 	call	1000d5bc <__eqdf2>
10003524:	d8c13d17 	ldw	r3,1268(sp)
10003528:	1000a726 	beq	r2,zero,100037c8 <___vfprintf_internal_r+0x13c4>
1000352c:	d9013317 	ldw	r4,1228(sp)
10003530:	d9413117 	ldw	r5,1220(sp)
10003534:	84000044 	addi	r16,r16,1
10003538:	20bfffc4 	addi	r2,r4,-1
1000353c:	1887883a 	add	r3,r3,r2
10003540:	29000044 	addi	r4,r5,1
10003544:	88800115 	stw	r2,4(r17)
10003548:	89000015 	stw	r4,0(r17)
1000354c:	d8c12015 	stw	r3,1152(sp)
10003550:	dc011f15 	stw	r16,1148(sp)
10003554:	008001c4 	movi	r2,7
10003558:	14012d16 	blt	r2,r16,10003a10 <___vfprintf_internal_r+0x160c>
1000355c:	8c400204 	addi	r17,r17,8
10003560:	d9413a17 	ldw	r5,1256(sp)
10003564:	dcc122c4 	addi	r19,sp,1163
10003568:	84000044 	addi	r16,r16,1
1000356c:	28c7883a 	add	r3,r5,r3
10003570:	8cc00015 	stw	r19,0(r17)
10003574:	89400115 	stw	r5,4(r17)
10003578:	d8c12015 	stw	r3,1152(sp)
1000357c:	dc011f15 	stw	r16,1148(sp)
10003580:	008001c4 	movi	r2,7
10003584:	14000e16 	blt	r2,r16,100035c0 <___vfprintf_internal_r+0x11bc>
10003588:	8a000204 	addi	r8,r17,8
1000358c:	003db006 	br	10002c50 <__alt_data_end+0xf8002c50>
10003590:	01040074 	movhi	r4,4097
10003594:	21070e84 	addi	r4,r4,7226
10003598:	d9012c15 	stw	r4,1200(sp)
1000359c:	d9012c17 	ldw	r4,1200(sp)
100035a0:	1c07883a 	add	r3,r3,r16
100035a4:	44000115 	stw	r16,4(r8)
100035a8:	41000015 	stw	r4,0(r8)
100035ac:	10800044 	addi	r2,r2,1
100035b0:	d8c12015 	stw	r3,1152(sp)
100035b4:	d8811f15 	stw	r2,1148(sp)
100035b8:	010001c4 	movi	r4,7
100035bc:	20bda30e 	bge	r4,r2,10002c4c <__alt_data_end+0xf8002c4c>
100035c0:	b809883a 	mov	r4,r23
100035c4:	b00b883a 	mov	r5,r22
100035c8:	d9811e04 	addi	r6,sp,1144
100035cc:	00098440 	call	10009844 <__sprint_r>
100035d0:	103ca41e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
100035d4:	d8c12017 	ldw	r3,1152(sp)
100035d8:	da000404 	addi	r8,sp,16
100035dc:	003d9c06 	br	10002c50 <__alt_data_end+0xf8002c50>
100035e0:	b809883a 	mov	r4,r23
100035e4:	b00b883a 	mov	r5,r22
100035e8:	d9811e04 	addi	r6,sp,1144
100035ec:	00098440 	call	10009844 <__sprint_r>
100035f0:	103dd226 	beq	r2,zero,10002d3c <__alt_data_end+0xf8002d3c>
100035f4:	003c9b06 	br	10002864 <__alt_data_end+0xf8002864>
100035f8:	10803fcc 	andi	r2,r2,255
100035fc:	1000311e 	bne	r2,zero,100036c4 <___vfprintf_internal_r+0x12c0>
10003600:	e080004c 	andi	r2,fp,1
10003604:	10002f26 	beq	r2,zero,100036c4 <___vfprintf_internal_r+0x12c0>
10003608:	00800c04 	movi	r2,48
1000360c:	d8c10dc4 	addi	r3,sp,1079
10003610:	d8810dc5 	stb	r2,1079(sp)
10003614:	dc413c17 	ldw	r17,1264(sp)
10003618:	d8c13115 	stw	r3,1220(sp)
1000361c:	003cf406 	br	100029f0 <__alt_data_end+0xf80029f0>
10003620:	b809883a 	mov	r4,r23
10003624:	b00b883a 	mov	r5,r22
10003628:	d9811e04 	addi	r6,sp,1144
1000362c:	00098440 	call	10009844 <__sprint_r>
10003630:	103c8c1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003634:	d8c12017 	ldw	r3,1152(sp)
10003638:	da000404 	addi	r8,sp,16
1000363c:	003d7706 	br	10002c1c <__alt_data_end+0xf8002c1c>
10003640:	b809883a 	mov	r4,r23
10003644:	b00b883a 	mov	r5,r22
10003648:	d9811e04 	addi	r6,sp,1144
1000364c:	00098440 	call	10009844 <__sprint_r>
10003650:	103c841e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003654:	d8c12017 	ldw	r3,1152(sp)
10003658:	da000404 	addi	r8,sp,16
1000365c:	003d3506 	br	10002b34 <__alt_data_end+0xf8002b34>
10003660:	b809883a 	mov	r4,r23
10003664:	b00b883a 	mov	r5,r22
10003668:	d9811e04 	addi	r6,sp,1144
1000366c:	00098440 	call	10009844 <__sprint_r>
10003670:	103c7c1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003674:	d8c12017 	ldw	r3,1152(sp)
10003678:	da000404 	addi	r8,sp,16
1000367c:	003d3b06 	br	10002b6c <__alt_data_end+0xf8002b6c>
10003680:	d9413b17 	ldw	r5,1260(sp)
10003684:	d8c10e04 	addi	r3,sp,1080
10003688:	908003cc 	andi	r2,r18,15
1000368c:	a808973a 	slli	r4,r21,28
10003690:	2885883a 	add	r2,r5,r2
10003694:	9024d13a 	srli	r18,r18,4
10003698:	10800003 	ldbu	r2,0(r2)
1000369c:	a82ad13a 	srli	r21,r21,4
100036a0:	18ffffc4 	addi	r3,r3,-1
100036a4:	24a4b03a 	or	r18,r4,r18
100036a8:	18800005 	stb	r2,0(r3)
100036ac:	9544b03a 	or	r2,r18,r21
100036b0:	103ff51e 	bne	r2,zero,10003688 <__alt_data_end+0xf8003688>
100036b4:	d9412817 	ldw	r5,1184(sp)
100036b8:	d8c13115 	stw	r3,1220(sp)
100036bc:	28e3c83a 	sub	r17,r5,r3
100036c0:	003ccb06 	br	100029f0 <__alt_data_end+0xf80029f0>
100036c4:	d8c10e04 	addi	r3,sp,1080
100036c8:	0023883a 	mov	r17,zero
100036cc:	d8c13115 	stw	r3,1220(sp)
100036d0:	003cc706 	br	100029f0 <__alt_data_end+0xf80029f0>
100036d4:	dc012617 	ldw	r16,1176(sp)
100036d8:	0401ab0e 	bge	zero,r16,10003d88 <___vfprintf_internal_r+0x1984>
100036dc:	d8813317 	ldw	r2,1228(sp)
100036e0:	d9413117 	ldw	r5,1220(sp)
100036e4:	d9013417 	ldw	r4,1232(sp)
100036e8:	1023883a 	mov	r17,r2
100036ec:	28a1883a 	add	r16,r5,r2
100036f0:	2080010e 	bge	r4,r2,100036f8 <___vfprintf_internal_r+0x12f4>
100036f4:	2023883a 	mov	r17,r4
100036f8:	04400b0e 	bge	zero,r17,10003728 <___vfprintf_internal_r+0x1324>
100036fc:	d8811f17 	ldw	r2,1148(sp)
10003700:	d9413117 	ldw	r5,1220(sp)
10003704:	1c47883a 	add	r3,r3,r17
10003708:	10800044 	addi	r2,r2,1
1000370c:	41400015 	stw	r5,0(r8)
10003710:	44400115 	stw	r17,4(r8)
10003714:	d8c12015 	stw	r3,1152(sp)
10003718:	d8811f15 	stw	r2,1148(sp)
1000371c:	010001c4 	movi	r4,7
10003720:	20826716 	blt	r4,r2,100040c0 <___vfprintf_internal_r+0x1cbc>
10003724:	42000204 	addi	r8,r8,8
10003728:	88026316 	blt	r17,zero,100040b8 <___vfprintf_internal_r+0x1cb4>
1000372c:	d8813417 	ldw	r2,1232(sp)
10003730:	1463c83a 	sub	r17,r2,r17
10003734:	0440590e 	bge	zero,r17,1000389c <___vfprintf_internal_r+0x1498>
10003738:	04c00404 	movi	r19,16
1000373c:	d8811f17 	ldw	r2,1148(sp)
10003740:	9c41770e 	bge	r19,r17,10003d20 <___vfprintf_internal_r+0x191c>
10003744:	01440074 	movhi	r5,4097
10003748:	29470e84 	addi	r5,r5,7226
1000374c:	d9412c15 	stw	r5,1200(sp)
10003750:	054001c4 	movi	r21,7
10003754:	00000306 	br	10003764 <___vfprintf_internal_r+0x1360>
10003758:	42000204 	addi	r8,r8,8
1000375c:	8c7ffc04 	addi	r17,r17,-16
10003760:	9c41720e 	bge	r19,r17,10003d2c <___vfprintf_internal_r+0x1928>
10003764:	18c00404 	addi	r3,r3,16
10003768:	10800044 	addi	r2,r2,1
1000376c:	45000015 	stw	r20,0(r8)
10003770:	44c00115 	stw	r19,4(r8)
10003774:	d8c12015 	stw	r3,1152(sp)
10003778:	d8811f15 	stw	r2,1148(sp)
1000377c:	a8bff60e 	bge	r21,r2,10003758 <__alt_data_end+0xf8003758>
10003780:	b809883a 	mov	r4,r23
10003784:	b00b883a 	mov	r5,r22
10003788:	d9811e04 	addi	r6,sp,1144
1000378c:	00098440 	call	10009844 <__sprint_r>
10003790:	103c341e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003794:	d8c12017 	ldw	r3,1152(sp)
10003798:	d8811f17 	ldw	r2,1148(sp)
1000379c:	da000404 	addi	r8,sp,16
100037a0:	003fee06 	br	1000375c <__alt_data_end+0xf800375c>
100037a4:	b809883a 	mov	r4,r23
100037a8:	b00b883a 	mov	r5,r22
100037ac:	d9811e04 	addi	r6,sp,1144
100037b0:	00098440 	call	10009844 <__sprint_r>
100037b4:	103c2b1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
100037b8:	d8c12017 	ldw	r3,1152(sp)
100037bc:	d8812787 	ldb	r2,1182(sp)
100037c0:	da000404 	addi	r8,sp,16
100037c4:	003cce06 	br	10002b00 <__alt_data_end+0xf8002b00>
100037c8:	d8813317 	ldw	r2,1228(sp)
100037cc:	14ffffc4 	addi	r19,r2,-1
100037d0:	04ff630e 	bge	zero,r19,10003560 <__alt_data_end+0xf8003560>
100037d4:	05400404 	movi	r21,16
100037d8:	acc0810e 	bge	r21,r19,100039e0 <___vfprintf_internal_r+0x15dc>
100037dc:	01440074 	movhi	r5,4097
100037e0:	29470e84 	addi	r5,r5,7226
100037e4:	d9412c15 	stw	r5,1200(sp)
100037e8:	01c001c4 	movi	r7,7
100037ec:	00000306 	br	100037fc <___vfprintf_internal_r+0x13f8>
100037f0:	8c400204 	addi	r17,r17,8
100037f4:	9cfffc04 	addi	r19,r19,-16
100037f8:	acc07c0e 	bge	r21,r19,100039ec <___vfprintf_internal_r+0x15e8>
100037fc:	18c00404 	addi	r3,r3,16
10003800:	84000044 	addi	r16,r16,1
10003804:	8d000015 	stw	r20,0(r17)
10003808:	8d400115 	stw	r21,4(r17)
1000380c:	d8c12015 	stw	r3,1152(sp)
10003810:	dc011f15 	stw	r16,1148(sp)
10003814:	3c3ff60e 	bge	r7,r16,100037f0 <__alt_data_end+0xf80037f0>
10003818:	b809883a 	mov	r4,r23
1000381c:	b00b883a 	mov	r5,r22
10003820:	d9811e04 	addi	r6,sp,1144
10003824:	d9c13d15 	stw	r7,1268(sp)
10003828:	00098440 	call	10009844 <__sprint_r>
1000382c:	d9c13d17 	ldw	r7,1268(sp)
10003830:	103c0c1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003834:	d8c12017 	ldw	r3,1152(sp)
10003838:	dc011f17 	ldw	r16,1148(sp)
1000383c:	dc400404 	addi	r17,sp,16
10003840:	003fec06 	br	100037f4 <__alt_data_end+0xf80037f4>
10003844:	00800084 	movi	r2,2
10003848:	9546b03a 	or	r3,r18,r21
1000384c:	003d7d06 	br	10002e44 <__alt_data_end+0xf8002e44>
10003850:	10803fcc 	andi	r2,r2,255
10003854:	1080201c 	xori	r2,r2,128
10003858:	10bfe004 	addi	r2,r2,-128
1000385c:	01000c04 	movi	r4,48
10003860:	1101d726 	beq	r2,r4,10003fc0 <___vfprintf_internal_r+0x1bbc>
10003864:	d9413117 	ldw	r5,1220(sp)
10003868:	d8812817 	ldw	r2,1184(sp)
1000386c:	193fffc5 	stb	r4,-1(r3)
10003870:	297fffc4 	addi	r5,r5,-1
10003874:	d9413115 	stw	r5,1220(sp)
10003878:	1163c83a 	sub	r17,r2,r5
1000387c:	003c5c06 	br	100029f0 <__alt_data_end+0xf80029f0>
10003880:	b809883a 	mov	r4,r23
10003884:	b00b883a 	mov	r5,r22
10003888:	d9811e04 	addi	r6,sp,1144
1000388c:	00098440 	call	10009844 <__sprint_r>
10003890:	103bf41e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003894:	d8c12017 	ldw	r3,1152(sp)
10003898:	da000404 	addi	r8,sp,16
1000389c:	d9413117 	ldw	r5,1220(sp)
100038a0:	d9013417 	ldw	r4,1232(sp)
100038a4:	d8812617 	ldw	r2,1176(sp)
100038a8:	2923883a 	add	r17,r5,r4
100038ac:	d9413317 	ldw	r5,1228(sp)
100038b0:	11400216 	blt	r2,r5,100038bc <___vfprintf_internal_r+0x14b8>
100038b4:	e100004c 	andi	r4,fp,1
100038b8:	20000d26 	beq	r4,zero,100038f0 <___vfprintf_internal_r+0x14ec>
100038bc:	d9013817 	ldw	r4,1248(sp)
100038c0:	d9413517 	ldw	r5,1236(sp)
100038c4:	1907883a 	add	r3,r3,r4
100038c8:	d9011f17 	ldw	r4,1148(sp)
100038cc:	41400015 	stw	r5,0(r8)
100038d0:	d9413817 	ldw	r5,1248(sp)
100038d4:	21000044 	addi	r4,r4,1
100038d8:	d8c12015 	stw	r3,1152(sp)
100038dc:	41400115 	stw	r5,4(r8)
100038e0:	d9011f15 	stw	r4,1148(sp)
100038e4:	014001c4 	movi	r5,7
100038e8:	2901fd16 	blt	r5,r4,100040e0 <___vfprintf_internal_r+0x1cdc>
100038ec:	42000204 	addi	r8,r8,8
100038f0:	d9013317 	ldw	r4,1228(sp)
100038f4:	2085c83a 	sub	r2,r4,r2
100038f8:	8449c83a 	sub	r4,r16,r17
100038fc:	1021883a 	mov	r16,r2
10003900:	2080010e 	bge	r4,r2,10003908 <___vfprintf_internal_r+0x1504>
10003904:	2021883a 	mov	r16,r4
10003908:	04000a0e 	bge	zero,r16,10003934 <___vfprintf_internal_r+0x1530>
1000390c:	d9011f17 	ldw	r4,1148(sp)
10003910:	1c07883a 	add	r3,r3,r16
10003914:	44400015 	stw	r17,0(r8)
10003918:	21000044 	addi	r4,r4,1
1000391c:	44000115 	stw	r16,4(r8)
10003920:	d8c12015 	stw	r3,1152(sp)
10003924:	d9011f15 	stw	r4,1148(sp)
10003928:	014001c4 	movi	r5,7
1000392c:	29020916 	blt	r5,r4,10004154 <___vfprintf_internal_r+0x1d50>
10003930:	42000204 	addi	r8,r8,8
10003934:	80020116 	blt	r16,zero,1000413c <___vfprintf_internal_r+0x1d38>
10003938:	1421c83a 	sub	r16,r2,r16
1000393c:	043cc40e 	bge	zero,r16,10002c50 <__alt_data_end+0xf8002c50>
10003940:	04400404 	movi	r17,16
10003944:	d8811f17 	ldw	r2,1148(sp)
10003948:	8c3f110e 	bge	r17,r16,10003590 <__alt_data_end+0xf8003590>
1000394c:	01440074 	movhi	r5,4097
10003950:	29470e84 	addi	r5,r5,7226
10003954:	d9412c15 	stw	r5,1200(sp)
10003958:	04c001c4 	movi	r19,7
1000395c:	00000306 	br	1000396c <___vfprintf_internal_r+0x1568>
10003960:	42000204 	addi	r8,r8,8
10003964:	843ffc04 	addi	r16,r16,-16
10003968:	8c3f0c0e 	bge	r17,r16,1000359c <__alt_data_end+0xf800359c>
1000396c:	18c00404 	addi	r3,r3,16
10003970:	10800044 	addi	r2,r2,1
10003974:	45000015 	stw	r20,0(r8)
10003978:	44400115 	stw	r17,4(r8)
1000397c:	d8c12015 	stw	r3,1152(sp)
10003980:	d8811f15 	stw	r2,1148(sp)
10003984:	98bff60e 	bge	r19,r2,10003960 <__alt_data_end+0xf8003960>
10003988:	b809883a 	mov	r4,r23
1000398c:	b00b883a 	mov	r5,r22
10003990:	d9811e04 	addi	r6,sp,1144
10003994:	00098440 	call	10009844 <__sprint_r>
10003998:	103bb21e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
1000399c:	d8c12017 	ldw	r3,1152(sp)
100039a0:	d8811f17 	ldw	r2,1148(sp)
100039a4:	da000404 	addi	r8,sp,16
100039a8:	003fee06 	br	10003964 <__alt_data_end+0xf8003964>
100039ac:	e088703a 	and	r4,fp,r2
100039b0:	203ec01e 	bne	r4,zero,100034b4 <__alt_data_end+0xf80034b4>
100039b4:	dc011f17 	ldw	r16,1148(sp)
100039b8:	d9013117 	ldw	r4,1220(sp)
100039bc:	40800115 	stw	r2,4(r8)
100039c0:	84000044 	addi	r16,r16,1
100039c4:	41000015 	stw	r4,0(r8)
100039c8:	d8c12015 	stw	r3,1152(sp)
100039cc:	dc011f15 	stw	r16,1148(sp)
100039d0:	008001c4 	movi	r2,7
100039d4:	14000e16 	blt	r2,r16,10003a10 <___vfprintf_internal_r+0x160c>
100039d8:	44400204 	addi	r17,r8,8
100039dc:	003ee006 	br	10003560 <__alt_data_end+0xf8003560>
100039e0:	01040074 	movhi	r4,4097
100039e4:	21070e84 	addi	r4,r4,7226
100039e8:	d9012c15 	stw	r4,1200(sp)
100039ec:	d8812c17 	ldw	r2,1200(sp)
100039f0:	1cc7883a 	add	r3,r3,r19
100039f4:	84000044 	addi	r16,r16,1
100039f8:	88800015 	stw	r2,0(r17)
100039fc:	8cc00115 	stw	r19,4(r17)
10003a00:	d8c12015 	stw	r3,1152(sp)
10003a04:	dc011f15 	stw	r16,1148(sp)
10003a08:	008001c4 	movi	r2,7
10003a0c:	143ed30e 	bge	r2,r16,1000355c <__alt_data_end+0xf800355c>
10003a10:	b809883a 	mov	r4,r23
10003a14:	b00b883a 	mov	r5,r22
10003a18:	d9811e04 	addi	r6,sp,1144
10003a1c:	00098440 	call	10009844 <__sprint_r>
10003a20:	103b901e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003a24:	d8c12017 	ldw	r3,1152(sp)
10003a28:	dc011f17 	ldw	r16,1148(sp)
10003a2c:	dc400404 	addi	r17,sp,16
10003a30:	003ecb06 	br	10003560 <__alt_data_end+0xf8003560>
10003a34:	b809883a 	mov	r4,r23
10003a38:	b00b883a 	mov	r5,r22
10003a3c:	d9811e04 	addi	r6,sp,1144
10003a40:	00098440 	call	10009844 <__sprint_r>
10003a44:	103b871e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003a48:	d8c12017 	ldw	r3,1152(sp)
10003a4c:	dc011f17 	ldw	r16,1148(sp)
10003a50:	da000404 	addi	r8,sp,16
10003a54:	003ea206 	br	100034e0 <__alt_data_end+0xf80034e0>
10003a58:	b809883a 	mov	r4,r23
10003a5c:	b00b883a 	mov	r5,r22
10003a60:	d9811e04 	addi	r6,sp,1144
10003a64:	00098440 	call	10009844 <__sprint_r>
10003a68:	103b7e1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003a6c:	d8c12017 	ldw	r3,1152(sp)
10003a70:	dc011f17 	ldw	r16,1148(sp)
10003a74:	dc400404 	addi	r17,sp,16
10003a78:	003ea406 	br	1000350c <__alt_data_end+0xf800350c>
10003a7c:	b809883a 	mov	r4,r23
10003a80:	b00b883a 	mov	r5,r22
10003a84:	d9811e04 	addi	r6,sp,1144
10003a88:	00098440 	call	10009844 <__sprint_r>
10003a8c:	103b751e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003a90:	d8c12017 	ldw	r3,1152(sp)
10003a94:	da000404 	addi	r8,sp,16
10003a98:	003c3706 	br	10002b78 <__alt_data_end+0xf8002b78>
10003a9c:	04a5c83a 	sub	r18,zero,r18
10003aa0:	9004c03a 	cmpne	r2,r18,zero
10003aa4:	056bc83a 	sub	r21,zero,r21
10003aa8:	a8abc83a 	sub	r21,r21,r2
10003aac:	04c00b44 	movi	r19,45
10003ab0:	dcc12785 	stb	r19,1182(sp)
10003ab4:	da413215 	stw	r9,1224(sp)
10003ab8:	00800044 	movi	r2,1
10003abc:	9546b03a 	or	r3,r18,r21
10003ac0:	003bb106 	br	10002988 <__alt_data_end+0xf8002988>
10003ac4:	da013f15 	stw	r8,1276(sp)
10003ac8:	da413e15 	stw	r9,1272(sp)
10003acc:	00094a00 	call	100094a0 <__fpclassifyd>
10003ad0:	da013f17 	ldw	r8,1276(sp)
10003ad4:	da413e17 	ldw	r9,1272(sp)
10003ad8:	1000e526 	beq	r2,zero,10003e70 <___vfprintf_internal_r+0x1a6c>
10003adc:	04fff7c4 	movi	r19,-33
10003ae0:	00bfffc4 	movi	r2,-1
10003ae4:	84e6703a 	and	r19,r16,r19
10003ae8:	48822926 	beq	r9,r2,10004390 <___vfprintf_internal_r+0x1f8c>
10003aec:	008011c4 	movi	r2,71
10003af0:	98821626 	beq	r19,r2,1000434c <___vfprintf_internal_r+0x1f48>
10003af4:	d9013917 	ldw	r4,1252(sp)
10003af8:	e0c04014 	ori	r3,fp,256
10003afc:	d8c12d15 	stw	r3,1204(sp)
10003b00:	20021f16 	blt	r4,zero,10004380 <___vfprintf_internal_r+0x1f7c>
10003b04:	dc413917 	ldw	r17,1252(sp)
10003b08:	d8012b05 	stb	zero,1196(sp)
10003b0c:	00801984 	movi	r2,102
10003b10:	80814d26 	beq	r16,r2,10004048 <___vfprintf_internal_r+0x1c44>
10003b14:	00801184 	movi	r2,70
10003b18:	80814b26 	beq	r16,r2,10004048 <___vfprintf_internal_r+0x1c44>
10003b1c:	00801144 	movi	r2,69
10003b20:	98821d26 	beq	r19,r2,10004398 <___vfprintf_internal_r+0x1f94>
10003b24:	482b883a 	mov	r21,r9
10003b28:	d8812604 	addi	r2,sp,1176
10003b2c:	d8800115 	stw	r2,4(sp)
10003b30:	d9413717 	ldw	r5,1244(sp)
10003b34:	d8812504 	addi	r2,sp,1172
10003b38:	d8800215 	stw	r2,8(sp)
10003b3c:	d8812104 	addi	r2,sp,1156
10003b40:	dd400015 	stw	r21,0(sp)
10003b44:	d8800315 	stw	r2,12(sp)
10003b48:	b809883a 	mov	r4,r23
10003b4c:	880d883a 	mov	r6,r17
10003b50:	01c00084 	movi	r7,2
10003b54:	da013f15 	stw	r8,1276(sp)
10003b58:	da413e15 	stw	r9,1272(sp)
10003b5c:	000487c0 	call	1000487c <_dtoa_r>
10003b60:	d8813115 	stw	r2,1220(sp)
10003b64:	008019c4 	movi	r2,103
10003b68:	da013f17 	ldw	r8,1276(sp)
10003b6c:	da413e17 	ldw	r9,1272(sp)
10003b70:	80800226 	beq	r16,r2,10003b7c <___vfprintf_internal_r+0x1778>
10003b74:	008011c4 	movi	r2,71
10003b78:	8081451e 	bne	r16,r2,10004090 <___vfprintf_internal_r+0x1c8c>
10003b7c:	e080004c 	andi	r2,fp,1
10003b80:	10021e26 	beq	r2,zero,100043fc <___vfprintf_internal_r+0x1ff8>
10003b84:	d8c13117 	ldw	r3,1220(sp)
10003b88:	1d55883a 	add	r10,r3,r21
10003b8c:	d9013717 	ldw	r4,1244(sp)
10003b90:	880b883a 	mov	r5,r17
10003b94:	000d883a 	mov	r6,zero
10003b98:	000f883a 	mov	r7,zero
10003b9c:	da013f15 	stw	r8,1276(sp)
10003ba0:	da413e15 	stw	r9,1272(sp)
10003ba4:	da813d15 	stw	r10,1268(sp)
10003ba8:	000d5bc0 	call	1000d5bc <__eqdf2>
10003bac:	da013f17 	ldw	r8,1276(sp)
10003bb0:	da413e17 	ldw	r9,1272(sp)
10003bb4:	da813d17 	ldw	r10,1268(sp)
10003bb8:	1001a126 	beq	r2,zero,10004240 <___vfprintf_internal_r+0x1e3c>
10003bbc:	d8812117 	ldw	r2,1156(sp)
10003bc0:	1280062e 	bgeu	r2,r10,10003bdc <___vfprintf_internal_r+0x17d8>
10003bc4:	01000c04 	movi	r4,48
10003bc8:	10c00044 	addi	r3,r2,1
10003bcc:	d8c12115 	stw	r3,1156(sp)
10003bd0:	11000005 	stb	r4,0(r2)
10003bd4:	d8812117 	ldw	r2,1156(sp)
10003bd8:	12bffb36 	bltu	r2,r10,10003bc8 <__alt_data_end+0xf8003bc8>
10003bdc:	d8c13117 	ldw	r3,1220(sp)
10003be0:	10c5c83a 	sub	r2,r2,r3
10003be4:	d8813315 	stw	r2,1228(sp)
10003be8:	008011c4 	movi	r2,71
10003bec:	98818926 	beq	r19,r2,10004214 <___vfprintf_internal_r+0x1e10>
10003bf0:	00801944 	movi	r2,101
10003bf4:	14023c0e 	bge	r2,r16,100044e8 <___vfprintf_internal_r+0x20e4>
10003bf8:	d8c12617 	ldw	r3,1176(sp)
10003bfc:	00801984 	movi	r2,102
10003c00:	d8c13415 	stw	r3,1232(sp)
10003c04:	8081ef26 	beq	r16,r2,100043c4 <___vfprintf_internal_r+0x1fc0>
10003c08:	d8c13417 	ldw	r3,1232(sp)
10003c0c:	d9013317 	ldw	r4,1228(sp)
10003c10:	1901e316 	blt	r3,r4,100043a0 <___vfprintf_internal_r+0x1f9c>
10003c14:	e080004c 	andi	r2,fp,1
10003c18:	1001f426 	beq	r2,zero,100043ec <___vfprintf_internal_r+0x1fe8>
10003c1c:	d8c13417 	ldw	r3,1232(sp)
10003c20:	1c400044 	addi	r17,r3,1
10003c24:	8839883a 	mov	fp,r17
10003c28:	8801e416 	blt	r17,zero,100043bc <___vfprintf_internal_r+0x1fb8>
10003c2c:	dd412b07 	ldb	r21,1196(sp)
10003c30:	a801701e 	bne	r21,zero,100041f4 <___vfprintf_internal_r+0x1df0>
10003c34:	df012b15 	stw	fp,1196(sp)
10003c38:	dcc12783 	ldbu	r19,1182(sp)
10003c3c:	df012d17 	ldw	fp,1204(sp)
10003c40:	d8013215 	stw	zero,1224(sp)
10003c44:	dc812d15 	stw	r18,1204(sp)
10003c48:	003b6e06 	br	10002a04 <__alt_data_end+0xf8002a04>
10003c4c:	e080040c 	andi	r2,fp,16
10003c50:	1000b51e 	bne	r2,zero,10003f28 <___vfprintf_internal_r+0x1b24>
10003c54:	e080100c 	andi	r2,fp,64
10003c58:	10015b26 	beq	r2,zero,100041c8 <___vfprintf_internal_r+0x1dc4>
10003c5c:	d9012d17 	ldw	r4,1204(sp)
10003c60:	d9412f17 	ldw	r5,1212(sp)
10003c64:	20800017 	ldw	r2,0(r4)
10003c68:	21000104 	addi	r4,r4,4
10003c6c:	d9012d15 	stw	r4,1204(sp)
10003c70:	1140000d 	sth	r5,0(r2)
10003c74:	003a2006 	br	100024f8 <__alt_data_end+0xf80024f8>
10003c78:	e0c0100c 	andi	r3,fp,64
10003c7c:	1800a226 	beq	r3,zero,10003f08 <___vfprintf_internal_r+0x1b04>
10003c80:	d8c12d17 	ldw	r3,1204(sp)
10003c84:	1480000b 	ldhu	r18,0(r2)
10003c88:	002b883a 	mov	r21,zero
10003c8c:	18c00104 	addi	r3,r3,4
10003c90:	d8c12d15 	stw	r3,1204(sp)
10003c94:	0005883a 	mov	r2,zero
10003c98:	9007883a 	mov	r3,r18
10003c9c:	003c6906 	br	10002e44 <__alt_data_end+0xf8002e44>
10003ca0:	e0c0100c 	andi	r3,fp,64
10003ca4:	18009026 	beq	r3,zero,10003ee8 <___vfprintf_internal_r+0x1ae4>
10003ca8:	1480000b 	ldhu	r18,0(r2)
10003cac:	d8812d17 	ldw	r2,1204(sp)
10003cb0:	002b883a 	mov	r21,zero
10003cb4:	9007883a 	mov	r3,r18
10003cb8:	10800104 	addi	r2,r2,4
10003cbc:	d8812d15 	stw	r2,1204(sp)
10003cc0:	00800044 	movi	r2,1
10003cc4:	003c5f06 	br	10002e44 <__alt_data_end+0xf8002e44>
10003cc8:	e0c0100c 	andi	r3,fp,64
10003ccc:	18008026 	beq	r3,zero,10003ed0 <___vfprintf_internal_r+0x1acc>
10003cd0:	d9012d17 	ldw	r4,1204(sp)
10003cd4:	1480000b 	ldhu	r18,0(r2)
10003cd8:	002b883a 	mov	r21,zero
10003cdc:	21000104 	addi	r4,r4,4
10003ce0:	d9012d15 	stw	r4,1204(sp)
10003ce4:	003c7906 	br	10002ecc <__alt_data_end+0xf8002ecc>
10003ce8:	e080100c 	andi	r2,fp,64
10003cec:	10007126 	beq	r2,zero,10003eb4 <___vfprintf_internal_r+0x1ab0>
10003cf0:	1c80000f 	ldh	r18,0(r3)
10003cf4:	d8812d17 	ldw	r2,1204(sp)
10003cf8:	902bd7fa 	srai	r21,r18,31
10003cfc:	10800104 	addi	r2,r2,4
10003d00:	d8812d15 	stw	r2,1204(sp)
10003d04:	a805883a 	mov	r2,r21
10003d08:	003b1a06 	br	10002974 <__alt_data_end+0xf8002974>
10003d0c:	e4000007 	ldb	r16,0(fp)
10003d10:	e005883a 	mov	r2,fp
10003d14:	003a2306 	br	100025a4 <__alt_data_end+0xf80025a4>
10003d18:	00800084 	movi	r2,2
10003d1c:	003c4906 	br	10002e44 <__alt_data_end+0xf8002e44>
10003d20:	01040074 	movhi	r4,4097
10003d24:	21070e84 	addi	r4,r4,7226
10003d28:	d9012c15 	stw	r4,1200(sp)
10003d2c:	d9012c17 	ldw	r4,1200(sp)
10003d30:	1c47883a 	add	r3,r3,r17
10003d34:	10800044 	addi	r2,r2,1
10003d38:	41000015 	stw	r4,0(r8)
10003d3c:	44400115 	stw	r17,4(r8)
10003d40:	d8c12015 	stw	r3,1152(sp)
10003d44:	d8811f15 	stw	r2,1148(sp)
10003d48:	010001c4 	movi	r4,7
10003d4c:	20becc16 	blt	r4,r2,10003880 <__alt_data_end+0xf8003880>
10003d50:	42000204 	addi	r8,r8,8
10003d54:	003ed106 	br	1000389c <__alt_data_end+0xf800389c>
10003d58:	01040074 	movhi	r4,4097
10003d5c:	21070e84 	addi	r4,r4,7226
10003d60:	d9012c15 	stw	r4,1200(sp)
10003d64:	003ba306 	br	10002bf4 <__alt_data_end+0xf8002bf4>
10003d68:	b809883a 	mov	r4,r23
10003d6c:	b00b883a 	mov	r5,r22
10003d70:	d9811e04 	addi	r6,sp,1144
10003d74:	00098440 	call	10009844 <__sprint_r>
10003d78:	103aba1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003d7c:	d8c12017 	ldw	r3,1152(sp)
10003d80:	da000404 	addi	r8,sp,16
10003d84:	003d6c06 	br	10003338 <__alt_data_end+0xf8003338>
10003d88:	d8811f17 	ldw	r2,1148(sp)
10003d8c:	01440074 	movhi	r5,4097
10003d90:	01000044 	movi	r4,1
10003d94:	18c00044 	addi	r3,r3,1
10003d98:	10800044 	addi	r2,r2,1
10003d9c:	29470e04 	addi	r5,r5,7224
10003da0:	41000115 	stw	r4,4(r8)
10003da4:	41400015 	stw	r5,0(r8)
10003da8:	d8c12015 	stw	r3,1152(sp)
10003dac:	d8811f15 	stw	r2,1148(sp)
10003db0:	010001c4 	movi	r4,7
10003db4:	20806716 	blt	r4,r2,10003f54 <___vfprintf_internal_r+0x1b50>
10003db8:	42000204 	addi	r8,r8,8
10003dbc:	8000041e 	bne	r16,zero,10003dd0 <___vfprintf_internal_r+0x19cc>
10003dc0:	d8813317 	ldw	r2,1228(sp)
10003dc4:	1000021e 	bne	r2,zero,10003dd0 <___vfprintf_internal_r+0x19cc>
10003dc8:	e080004c 	andi	r2,fp,1
10003dcc:	103ba026 	beq	r2,zero,10002c50 <__alt_data_end+0xf8002c50>
10003dd0:	d9013817 	ldw	r4,1248(sp)
10003dd4:	d8811f17 	ldw	r2,1148(sp)
10003dd8:	d9413517 	ldw	r5,1236(sp)
10003ddc:	1907883a 	add	r3,r3,r4
10003de0:	10800044 	addi	r2,r2,1
10003de4:	41000115 	stw	r4,4(r8)
10003de8:	41400015 	stw	r5,0(r8)
10003dec:	d8c12015 	stw	r3,1152(sp)
10003df0:	d8811f15 	stw	r2,1148(sp)
10003df4:	010001c4 	movi	r4,7
10003df8:	20815716 	blt	r4,r2,10004358 <___vfprintf_internal_r+0x1f54>
10003dfc:	42000204 	addi	r8,r8,8
10003e00:	0421c83a 	sub	r16,zero,r16
10003e04:	0400810e 	bge	zero,r16,1000400c <___vfprintf_internal_r+0x1c08>
10003e08:	04400404 	movi	r17,16
10003e0c:	8c00bd0e 	bge	r17,r16,10004104 <___vfprintf_internal_r+0x1d00>
10003e10:	01440074 	movhi	r5,4097
10003e14:	29470e84 	addi	r5,r5,7226
10003e18:	d9412c15 	stw	r5,1200(sp)
10003e1c:	04c001c4 	movi	r19,7
10003e20:	00000306 	br	10003e30 <___vfprintf_internal_r+0x1a2c>
10003e24:	42000204 	addi	r8,r8,8
10003e28:	843ffc04 	addi	r16,r16,-16
10003e2c:	8c00b80e 	bge	r17,r16,10004110 <___vfprintf_internal_r+0x1d0c>
10003e30:	18c00404 	addi	r3,r3,16
10003e34:	10800044 	addi	r2,r2,1
10003e38:	45000015 	stw	r20,0(r8)
10003e3c:	44400115 	stw	r17,4(r8)
10003e40:	d8c12015 	stw	r3,1152(sp)
10003e44:	d8811f15 	stw	r2,1148(sp)
10003e48:	98bff60e 	bge	r19,r2,10003e24 <__alt_data_end+0xf8003e24>
10003e4c:	b809883a 	mov	r4,r23
10003e50:	b00b883a 	mov	r5,r22
10003e54:	d9811e04 	addi	r6,sp,1144
10003e58:	00098440 	call	10009844 <__sprint_r>
10003e5c:	103a811e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003e60:	d8c12017 	ldw	r3,1152(sp)
10003e64:	d8811f17 	ldw	r2,1148(sp)
10003e68:	da000404 	addi	r8,sp,16
10003e6c:	003fee06 	br	10003e28 <__alt_data_end+0xf8003e28>
10003e70:	008011c4 	movi	r2,71
10003e74:	1400db16 	blt	r2,r16,100041e4 <___vfprintf_internal_r+0x1de0>
10003e78:	01040074 	movhi	r4,4097
10003e7c:	21070004 	addi	r4,r4,7168
10003e80:	d9013115 	stw	r4,1220(sp)
10003e84:	00c000c4 	movi	r3,3
10003e88:	00bfdfc4 	movi	r2,-129
10003e8c:	d8c12b15 	stw	r3,1196(sp)
10003e90:	e0b8703a 	and	fp,fp,r2
10003e94:	dcc12783 	ldbu	r19,1182(sp)
10003e98:	dc812d15 	stw	r18,1204(sp)
10003e9c:	1823883a 	mov	r17,r3
10003ea0:	d8013215 	stw	zero,1224(sp)
10003ea4:	d8013415 	stw	zero,1232(sp)
10003ea8:	003ad606 	br	10002a04 <__alt_data_end+0xf8002a04>
10003eac:	4823883a 	mov	r17,r9
10003eb0:	003cc906 	br	100031d8 <__alt_data_end+0xf80031d8>
10003eb4:	1c800017 	ldw	r18,0(r3)
10003eb8:	d8c12d17 	ldw	r3,1204(sp)
10003ebc:	902bd7fa 	srai	r21,r18,31
10003ec0:	18c00104 	addi	r3,r3,4
10003ec4:	d8c12d15 	stw	r3,1204(sp)
10003ec8:	a805883a 	mov	r2,r21
10003ecc:	003aa906 	br	10002974 <__alt_data_end+0xf8002974>
10003ed0:	d9412d17 	ldw	r5,1204(sp)
10003ed4:	14800017 	ldw	r18,0(r2)
10003ed8:	002b883a 	mov	r21,zero
10003edc:	29400104 	addi	r5,r5,4
10003ee0:	d9412d15 	stw	r5,1204(sp)
10003ee4:	003bf906 	br	10002ecc <__alt_data_end+0xf8002ecc>
10003ee8:	d8c12d17 	ldw	r3,1204(sp)
10003eec:	14800017 	ldw	r18,0(r2)
10003ef0:	002b883a 	mov	r21,zero
10003ef4:	18c00104 	addi	r3,r3,4
10003ef8:	d8c12d15 	stw	r3,1204(sp)
10003efc:	00800044 	movi	r2,1
10003f00:	9007883a 	mov	r3,r18
10003f04:	003bcf06 	br	10002e44 <__alt_data_end+0xf8002e44>
10003f08:	d9012d17 	ldw	r4,1204(sp)
10003f0c:	14800017 	ldw	r18,0(r2)
10003f10:	002b883a 	mov	r21,zero
10003f14:	21000104 	addi	r4,r4,4
10003f18:	d9012d15 	stw	r4,1204(sp)
10003f1c:	0005883a 	mov	r2,zero
10003f20:	9007883a 	mov	r3,r18
10003f24:	003bc706 	br	10002e44 <__alt_data_end+0xf8002e44>
10003f28:	d9412d17 	ldw	r5,1204(sp)
10003f2c:	d8c12f17 	ldw	r3,1212(sp)
10003f30:	28800017 	ldw	r2,0(r5)
10003f34:	29400104 	addi	r5,r5,4
10003f38:	d9412d15 	stw	r5,1204(sp)
10003f3c:	10c00015 	stw	r3,0(r2)
10003f40:	00396d06 	br	100024f8 <__alt_data_end+0xf80024f8>
10003f44:	01040074 	movhi	r4,4097
10003f48:	2106fe04 	addi	r4,r4,7160
10003f4c:	d9013115 	stw	r4,1220(sp)
10003f50:	003ba206 	br	10002ddc <__alt_data_end+0xf8002ddc>
10003f54:	b809883a 	mov	r4,r23
10003f58:	b00b883a 	mov	r5,r22
10003f5c:	d9811e04 	addi	r6,sp,1144
10003f60:	00098440 	call	10009844 <__sprint_r>
10003f64:	103a3f1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003f68:	dc012617 	ldw	r16,1176(sp)
10003f6c:	d8c12017 	ldw	r3,1152(sp)
10003f70:	da000404 	addi	r8,sp,16
10003f74:	003f9106 	br	10003dbc <__alt_data_end+0xf8003dbc>
10003f78:	e0800044 	addi	r2,fp,1
10003f7c:	9cc00814 	ori	r19,r19,32
10003f80:	e4000047 	ldb	r16,1(fp)
10003f84:	00398706 	br	100025a4 <__alt_data_end+0xf80025a4>
10003f88:	d8812e17 	ldw	r2,1208(sp)
10003f8c:	d8c12d15 	stw	r3,1204(sp)
10003f90:	0085c83a 	sub	r2,zero,r2
10003f94:	d8812e15 	stw	r2,1208(sp)
10003f98:	e005883a 	mov	r2,fp
10003f9c:	003a3a06 	br	10002888 <__alt_data_end+0xf8002888>
10003fa0:	b809883a 	mov	r4,r23
10003fa4:	b00b883a 	mov	r5,r22
10003fa8:	d9811e04 	addi	r6,sp,1144
10003fac:	00098440 	call	10009844 <__sprint_r>
10003fb0:	103a2c1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10003fb4:	d8c12017 	ldw	r3,1152(sp)
10003fb8:	da000404 	addi	r8,sp,16
10003fbc:	003cf006 	br	10003380 <__alt_data_end+0xf8003380>
10003fc0:	d8c12817 	ldw	r3,1184(sp)
10003fc4:	d9013117 	ldw	r4,1220(sp)
10003fc8:	1923c83a 	sub	r17,r3,r4
10003fcc:	003a8806 	br	100029f0 <__alt_data_end+0xf80029f0>
10003fd0:	da013f15 	stw	r8,1276(sp)
10003fd4:	000236c0 	call	1000236c <strlen>
10003fd8:	1023883a 	mov	r17,r2
10003fdc:	da013f17 	ldw	r8,1276(sp)
10003fe0:	883c7f0e 	bge	r17,zero,100031e0 <__alt_data_end+0xf80031e0>
10003fe4:	0005883a 	mov	r2,zero
10003fe8:	003c7d06 	br	100031e0 <__alt_data_end+0xf80031e0>
10003fec:	b809883a 	mov	r4,r23
10003ff0:	b00b883a 	mov	r5,r22
10003ff4:	d9811e04 	addi	r6,sp,1144
10003ff8:	00098440 	call	10009844 <__sprint_r>
10003ffc:	103a191e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10004000:	d8c12017 	ldw	r3,1152(sp)
10004004:	d8811f17 	ldw	r2,1148(sp)
10004008:	da000404 	addi	r8,sp,16
1000400c:	d9413317 	ldw	r5,1228(sp)
10004010:	d9013117 	ldw	r4,1220(sp)
10004014:	10800044 	addi	r2,r2,1
10004018:	28c7883a 	add	r3,r5,r3
1000401c:	41000015 	stw	r4,0(r8)
10004020:	41400115 	stw	r5,4(r8)
10004024:	d8c12015 	stw	r3,1152(sp)
10004028:	d8811f15 	stw	r2,1148(sp)
1000402c:	010001c4 	movi	r4,7
10004030:	20bb060e 	bge	r4,r2,10002c4c <__alt_data_end+0xf8002c4c>
10004034:	003d6206 	br	100035c0 <__alt_data_end+0xf80035c0>
10004038:	01040074 	movhi	r4,4097
1000403c:	21071284 	addi	r4,r4,7242
10004040:	d9013615 	stw	r4,1240(sp)
10004044:	003aa306 	br	10002ad4 <__alt_data_end+0xf8002ad4>
10004048:	d8812604 	addi	r2,sp,1176
1000404c:	d8800115 	stw	r2,4(sp)
10004050:	d9413717 	ldw	r5,1244(sp)
10004054:	d8812504 	addi	r2,sp,1172
10004058:	d8800215 	stw	r2,8(sp)
1000405c:	d8812104 	addi	r2,sp,1156
10004060:	da400015 	stw	r9,0(sp)
10004064:	d8800315 	stw	r2,12(sp)
10004068:	b809883a 	mov	r4,r23
1000406c:	880d883a 	mov	r6,r17
10004070:	01c000c4 	movi	r7,3
10004074:	da013f15 	stw	r8,1276(sp)
10004078:	da413e15 	stw	r9,1272(sp)
1000407c:	000487c0 	call	1000487c <_dtoa_r>
10004080:	da413e17 	ldw	r9,1272(sp)
10004084:	da013f17 	ldw	r8,1276(sp)
10004088:	d8813115 	stw	r2,1220(sp)
1000408c:	482b883a 	mov	r21,r9
10004090:	d8c13117 	ldw	r3,1220(sp)
10004094:	00801184 	movi	r2,70
10004098:	1d55883a 	add	r10,r3,r21
1000409c:	98bebb1e 	bne	r19,r2,10003b8c <__alt_data_end+0xf8003b8c>
100040a0:	19000007 	ldb	r4,0(r3)
100040a4:	00800c04 	movi	r2,48
100040a8:	2080dd26 	beq	r4,r2,10004420 <___vfprintf_internal_r+0x201c>
100040ac:	d8c12617 	ldw	r3,1176(sp)
100040b0:	50d5883a 	add	r10,r10,r3
100040b4:	003eb506 	br	10003b8c <__alt_data_end+0xf8003b8c>
100040b8:	0023883a 	mov	r17,zero
100040bc:	003d9b06 	br	1000372c <__alt_data_end+0xf800372c>
100040c0:	b809883a 	mov	r4,r23
100040c4:	b00b883a 	mov	r5,r22
100040c8:	d9811e04 	addi	r6,sp,1144
100040cc:	00098440 	call	10009844 <__sprint_r>
100040d0:	1039e41e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
100040d4:	d8c12017 	ldw	r3,1152(sp)
100040d8:	da000404 	addi	r8,sp,16
100040dc:	003d9206 	br	10003728 <__alt_data_end+0xf8003728>
100040e0:	b809883a 	mov	r4,r23
100040e4:	b00b883a 	mov	r5,r22
100040e8:	d9811e04 	addi	r6,sp,1144
100040ec:	00098440 	call	10009844 <__sprint_r>
100040f0:	1039dc1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
100040f4:	d8812617 	ldw	r2,1176(sp)
100040f8:	d8c12017 	ldw	r3,1152(sp)
100040fc:	da000404 	addi	r8,sp,16
10004100:	003dfb06 	br	100038f0 <__alt_data_end+0xf80038f0>
10004104:	01040074 	movhi	r4,4097
10004108:	21070e84 	addi	r4,r4,7226
1000410c:	d9012c15 	stw	r4,1200(sp)
10004110:	d9012c17 	ldw	r4,1200(sp)
10004114:	1c07883a 	add	r3,r3,r16
10004118:	10800044 	addi	r2,r2,1
1000411c:	41000015 	stw	r4,0(r8)
10004120:	44000115 	stw	r16,4(r8)
10004124:	d8c12015 	stw	r3,1152(sp)
10004128:	d8811f15 	stw	r2,1148(sp)
1000412c:	010001c4 	movi	r4,7
10004130:	20bfae16 	blt	r4,r2,10003fec <__alt_data_end+0xf8003fec>
10004134:	42000204 	addi	r8,r8,8
10004138:	003fb406 	br	1000400c <__alt_data_end+0xf800400c>
1000413c:	0021883a 	mov	r16,zero
10004140:	003dfd06 	br	10003938 <__alt_data_end+0xf8003938>
10004144:	01440074 	movhi	r5,4097
10004148:	29471284 	addi	r5,r5,7242
1000414c:	d9413615 	stw	r5,1240(sp)
10004150:	003ae306 	br	10002ce0 <__alt_data_end+0xf8002ce0>
10004154:	b809883a 	mov	r4,r23
10004158:	b00b883a 	mov	r5,r22
1000415c:	d9811e04 	addi	r6,sp,1144
10004160:	00098440 	call	10009844 <__sprint_r>
10004164:	1039bf1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
10004168:	d8812617 	ldw	r2,1176(sp)
1000416c:	d9413317 	ldw	r5,1228(sp)
10004170:	d8c12017 	ldw	r3,1152(sp)
10004174:	da000404 	addi	r8,sp,16
10004178:	2885c83a 	sub	r2,r5,r2
1000417c:	003ded06 	br	10003934 <__alt_data_end+0xf8003934>
10004180:	00800184 	movi	r2,6
10004184:	1240012e 	bgeu	r2,r9,1000418c <___vfprintf_internal_r+0x1d88>
10004188:	1013883a 	mov	r9,r2
1000418c:	4823883a 	mov	r17,r9
10004190:	4805883a 	mov	r2,r9
10004194:	4800b216 	blt	r9,zero,10004460 <___vfprintf_internal_r+0x205c>
10004198:	01440074 	movhi	r5,4097
1000419c:	29470c04 	addi	r5,r5,7216
100041a0:	d8812b15 	stw	r2,1196(sp)
100041a4:	dc812d15 	stw	r18,1204(sp)
100041a8:	d8013215 	stw	zero,1224(sp)
100041ac:	d8013415 	stw	zero,1232(sp)
100041b0:	d9413115 	stw	r5,1220(sp)
100041b4:	0005883a 	mov	r2,zero
100041b8:	003a1906 	br	10002a20 <__alt_data_end+0xf8002a20>
100041bc:	04c00b44 	movi	r19,45
100041c0:	dcc12785 	stb	r19,1182(sp)
100041c4:	003b0006 	br	10002dc8 <__alt_data_end+0xf8002dc8>
100041c8:	d8c12d17 	ldw	r3,1204(sp)
100041cc:	d9012f17 	ldw	r4,1212(sp)
100041d0:	18800017 	ldw	r2,0(r3)
100041d4:	18c00104 	addi	r3,r3,4
100041d8:	d8c12d15 	stw	r3,1204(sp)
100041dc:	11000015 	stw	r4,0(r2)
100041e0:	0038c506 	br	100024f8 <__alt_data_end+0xf80024f8>
100041e4:	01440074 	movhi	r5,4097
100041e8:	29470104 	addi	r5,r5,7172
100041ec:	d9413115 	stw	r5,1220(sp)
100041f0:	003f2406 	br	10003e84 <__alt_data_end+0xf8003e84>
100041f4:	00800b44 	movi	r2,45
100041f8:	d8812785 	stb	r2,1182(sp)
100041fc:	df012b15 	stw	fp,1196(sp)
10004200:	d8013215 	stw	zero,1224(sp)
10004204:	df012d17 	ldw	fp,1204(sp)
10004208:	00800b44 	movi	r2,45
1000420c:	dc812d15 	stw	r18,1204(sp)
10004210:	003a0006 	br	10002a14 <__alt_data_end+0xf8002a14>
10004214:	d8c12617 	ldw	r3,1176(sp)
10004218:	00bfff44 	movi	r2,-3
1000421c:	18800a16 	blt	r3,r2,10004248 <___vfprintf_internal_r+0x1e44>
10004220:	48c00916 	blt	r9,r3,10004248 <___vfprintf_internal_r+0x1e44>
10004224:	d8c13415 	stw	r3,1232(sp)
10004228:	040019c4 	movi	r16,103
1000422c:	003e7606 	br	10003c08 <__alt_data_end+0xf8003c08>
10004230:	01040074 	movhi	r4,4097
10004234:	21070e84 	addi	r4,r4,7226
10004238:	d9012c15 	stw	r4,1200(sp)
1000423c:	003c8e06 	br	10003478 <__alt_data_end+0xf8003478>
10004240:	5005883a 	mov	r2,r10
10004244:	003e6506 	br	10003bdc <__alt_data_end+0xf8003bdc>
10004248:	843fff84 	addi	r16,r16,-2
1000424c:	1d7fffc4 	addi	r21,r3,-1
10004250:	dd412615 	stw	r21,1176(sp)
10004254:	dc0122c5 	stb	r16,1163(sp)
10004258:	a8009216 	blt	r21,zero,100044a4 <___vfprintf_internal_r+0x20a0>
1000425c:	00800ac4 	movi	r2,43
10004260:	d8812305 	stb	r2,1164(sp)
10004264:	00800244 	movi	r2,9
10004268:	1540660e 	bge	r2,r21,10004404 <___vfprintf_internal_r+0x2000>
1000426c:	dcc122c4 	addi	r19,sp,1163
10004270:	dc012c15 	stw	r16,1200(sp)
10004274:	4023883a 	mov	r17,r8
10004278:	9821883a 	mov	r16,r19
1000427c:	a809883a 	mov	r4,r21
10004280:	01400284 	movi	r5,10
10004284:	000c30c0 	call	1000c30c <__modsi3>
10004288:	10800c04 	addi	r2,r2,48
1000428c:	843fffc4 	addi	r16,r16,-1
10004290:	a809883a 	mov	r4,r21
10004294:	01400284 	movi	r5,10
10004298:	80800005 	stb	r2,0(r16)
1000429c:	000c2b80 	call	1000c2b8 <__divsi3>
100042a0:	01000244 	movi	r4,9
100042a4:	102b883a 	mov	r21,r2
100042a8:	20bff416 	blt	r4,r2,1000427c <__alt_data_end+0xf800427c>
100042ac:	8811883a 	mov	r8,r17
100042b0:	10800c04 	addi	r2,r2,48
100042b4:	8023883a 	mov	r17,r16
100042b8:	897fffc4 	addi	r5,r17,-1
100042bc:	88bfffc5 	stb	r2,-1(r17)
100042c0:	dc012c17 	ldw	r16,1200(sp)
100042c4:	2cc08a2e 	bgeu	r5,r19,100044f0 <___vfprintf_internal_r+0x20ec>
100042c8:	d9812384 	addi	r6,sp,1166
100042cc:	344dc83a 	sub	r6,r6,r17
100042d0:	d9012344 	addi	r4,sp,1165
100042d4:	998d883a 	add	r6,r19,r6
100042d8:	00000106 	br	100042e0 <___vfprintf_internal_r+0x1edc>
100042dc:	28800003 	ldbu	r2,0(r5)
100042e0:	20800005 	stb	r2,0(r4)
100042e4:	21000044 	addi	r4,r4,1
100042e8:	29400044 	addi	r5,r5,1
100042ec:	21bffb1e 	bne	r4,r6,100042dc <__alt_data_end+0xf80042dc>
100042f0:	d8812304 	addi	r2,sp,1164
100042f4:	1445c83a 	sub	r2,r2,r17
100042f8:	d9412344 	addi	r5,sp,1165
100042fc:	2885883a 	add	r2,r5,r2
10004300:	14e7c83a 	sub	r19,r2,r19
10004304:	d8813317 	ldw	r2,1228(sp)
10004308:	d8c13317 	ldw	r3,1228(sp)
1000430c:	dcc13a15 	stw	r19,1256(sp)
10004310:	14e3883a 	add	r17,r2,r19
10004314:	00800044 	movi	r2,1
10004318:	10c0550e 	bge	r2,r3,10004470 <___vfprintf_internal_r+0x206c>
1000431c:	8c400044 	addi	r17,r17,1
10004320:	8839883a 	mov	fp,r17
10004324:	88005016 	blt	r17,zero,10004468 <___vfprintf_internal_r+0x2064>
10004328:	d8013415 	stw	zero,1232(sp)
1000432c:	003e3f06 	br	10003c2c <__alt_data_end+0xf8003c2c>
10004330:	da412b15 	stw	r9,1196(sp)
10004334:	dcc12783 	ldbu	r19,1182(sp)
10004338:	4823883a 	mov	r17,r9
1000433c:	dc812d15 	stw	r18,1204(sp)
10004340:	d8013215 	stw	zero,1224(sp)
10004344:	d8013415 	stw	zero,1232(sp)
10004348:	0039ae06 	br	10002a04 <__alt_data_end+0xf8002a04>
1000434c:	483de91e 	bne	r9,zero,10003af4 <__alt_data_end+0xf8003af4>
10004350:	8813883a 	mov	r9,r17
10004354:	003de706 	br	10003af4 <__alt_data_end+0xf8003af4>
10004358:	b809883a 	mov	r4,r23
1000435c:	b00b883a 	mov	r5,r22
10004360:	d9811e04 	addi	r6,sp,1144
10004364:	00098440 	call	10009844 <__sprint_r>
10004368:	10393e1e 	bne	r2,zero,10002864 <__alt_data_end+0xf8002864>
1000436c:	dc012617 	ldw	r16,1176(sp)
10004370:	d8c12017 	ldw	r3,1152(sp)
10004374:	d8811f17 	ldw	r2,1148(sp)
10004378:	da000404 	addi	r8,sp,16
1000437c:	003ea006 	br	10003e00 <__alt_data_end+0xf8003e00>
10004380:	00c00b44 	movi	r3,45
10004384:	2460003c 	xorhi	r17,r4,32768
10004388:	d8c12b05 	stb	r3,1196(sp)
1000438c:	003ddf06 	br	10003b0c <__alt_data_end+0xf8003b0c>
10004390:	02400184 	movi	r9,6
10004394:	003dd706 	br	10003af4 <__alt_data_end+0xf8003af4>
10004398:	4d400044 	addi	r21,r9,1
1000439c:	003de206 	br	10003b28 <__alt_data_end+0xf8003b28>
100043a0:	d8c13417 	ldw	r3,1232(sp)
100043a4:	00c0490e 	bge	zero,r3,100044cc <___vfprintf_internal_r+0x20c8>
100043a8:	04400044 	movi	r17,1
100043ac:	d9013317 	ldw	r4,1228(sp)
100043b0:	8923883a 	add	r17,r17,r4
100043b4:	8839883a 	mov	fp,r17
100043b8:	883e1c0e 	bge	r17,zero,10003c2c <__alt_data_end+0xf8003c2c>
100043bc:	0039883a 	mov	fp,zero
100043c0:	003e1a06 	br	10003c2c <__alt_data_end+0xf8003c2c>
100043c4:	00c03b0e 	bge	zero,r3,100044b4 <___vfprintf_internal_r+0x20b0>
100043c8:	4800021e 	bne	r9,zero,100043d4 <___vfprintf_internal_r+0x1fd0>
100043cc:	e080004c 	andi	r2,fp,1
100043d0:	10000626 	beq	r2,zero,100043ec <___vfprintf_internal_r+0x1fe8>
100043d4:	d8c13417 	ldw	r3,1232(sp)
100043d8:	4a400044 	addi	r9,r9,1
100043dc:	1a63883a 	add	r17,r3,r9
100043e0:	8839883a 	mov	fp,r17
100043e4:	883e110e 	bge	r17,zero,10003c2c <__alt_data_end+0xf8003c2c>
100043e8:	003ff406 	br	100043bc <__alt_data_end+0xf80043bc>
100043ec:	1839883a 	mov	fp,r3
100043f0:	18004116 	blt	r3,zero,100044f8 <___vfprintf_internal_r+0x20f4>
100043f4:	dc413417 	ldw	r17,1232(sp)
100043f8:	003e0c06 	br	10003c2c <__alt_data_end+0xf8003c2c>
100043fc:	d8812117 	ldw	r2,1156(sp)
10004400:	003df606 	br	10003bdc <__alt_data_end+0xf8003bdc>
10004404:	00800c04 	movi	r2,48
10004408:	a8c00c04 	addi	r3,r21,48
1000440c:	d8812345 	stb	r2,1165(sp)
10004410:	d8c12385 	stb	r3,1166(sp)
10004414:	d88123c4 	addi	r2,sp,1167
10004418:	dcc122c4 	addi	r19,sp,1163
1000441c:	003fb806 	br	10004300 <__alt_data_end+0xf8004300>
10004420:	d9013717 	ldw	r4,1244(sp)
10004424:	880b883a 	mov	r5,r17
10004428:	000d883a 	mov	r6,zero
1000442c:	000f883a 	mov	r7,zero
10004430:	da013f15 	stw	r8,1276(sp)
10004434:	da413e15 	stw	r9,1272(sp)
10004438:	da813d15 	stw	r10,1268(sp)
1000443c:	000d5bc0 	call	1000d5bc <__eqdf2>
10004440:	da013f17 	ldw	r8,1276(sp)
10004444:	da413e17 	ldw	r9,1272(sp)
10004448:	da813d17 	ldw	r10,1268(sp)
1000444c:	103f1726 	beq	r2,zero,100040ac <__alt_data_end+0xf80040ac>
10004450:	00800044 	movi	r2,1
10004454:	1547c83a 	sub	r3,r2,r21
10004458:	d8c12615 	stw	r3,1176(sp)
1000445c:	003f1406 	br	100040b0 <__alt_data_end+0xf80040b0>
10004460:	0005883a 	mov	r2,zero
10004464:	003f4c06 	br	10004198 <__alt_data_end+0xf8004198>
10004468:	0039883a 	mov	fp,zero
1000446c:	003fae06 	br	10004328 <__alt_data_end+0xf8004328>
10004470:	e084703a 	and	r2,fp,r2
10004474:	103faa26 	beq	r2,zero,10004320 <__alt_data_end+0xf8004320>
10004478:	003fa806 	br	1000431c <__alt_data_end+0xf800431c>
1000447c:	d9412d17 	ldw	r5,1204(sp)
10004480:	2a400017 	ldw	r9,0(r5)
10004484:	28c00104 	addi	r3,r5,4
10004488:	d8c12d15 	stw	r3,1204(sp)
1000448c:	483ebc0e 	bge	r9,zero,10003f80 <__alt_data_end+0xf8003f80>
10004490:	027fffc4 	movi	r9,-1
10004494:	e4000047 	ldb	r16,1(fp)
10004498:	00384206 	br	100025a4 <__alt_data_end+0xf80025a4>
1000449c:	043fffc4 	movi	r16,-1
100044a0:	0038ce06 	br	100027dc <__alt_data_end+0xf80027dc>
100044a4:	00800b44 	movi	r2,45
100044a8:	056bc83a 	sub	r21,zero,r21
100044ac:	d8812305 	stb	r2,1164(sp)
100044b0:	003f6c06 	br	10004264 <__alt_data_end+0xf8004264>
100044b4:	4800081e 	bne	r9,zero,100044d8 <___vfprintf_internal_r+0x20d4>
100044b8:	e080004c 	andi	r2,fp,1
100044bc:	1000061e 	bne	r2,zero,100044d8 <___vfprintf_internal_r+0x20d4>
100044c0:	07000044 	movi	fp,1
100044c4:	e023883a 	mov	r17,fp
100044c8:	003dd806 	br	10003c2c <__alt_data_end+0xf8003c2c>
100044cc:	04400084 	movi	r17,2
100044d0:	88e3c83a 	sub	r17,r17,r3
100044d4:	003fb506 	br	100043ac <__alt_data_end+0xf80043ac>
100044d8:	4c400084 	addi	r17,r9,2
100044dc:	8839883a 	mov	fp,r17
100044e0:	883dd20e 	bge	r17,zero,10003c2c <__alt_data_end+0xf8003c2c>
100044e4:	003fb506 	br	100043bc <__alt_data_end+0xf80043bc>
100044e8:	d8c12617 	ldw	r3,1176(sp)
100044ec:	003f5706 	br	1000424c <__alt_data_end+0xf800424c>
100044f0:	d8812344 	addi	r2,sp,1165
100044f4:	003f8206 	br	10004300 <__alt_data_end+0xf8004300>
100044f8:	0039883a 	mov	fp,zero
100044fc:	003fbd06 	br	100043f4 <__alt_data_end+0xf80043f4>

10004500 <__vfprintf_internal>:
10004500:	2007883a 	mov	r3,r4
10004504:	01040074 	movhi	r4,4097
10004508:	210e6904 	addi	r4,r4,14756
1000450c:	21000017 	ldw	r4,0(r4)
10004510:	2805883a 	mov	r2,r5
10004514:	300f883a 	mov	r7,r6
10004518:	180b883a 	mov	r5,r3
1000451c:	100d883a 	mov	r6,r2
10004520:	00024041 	jmpi	10002404 <___vfprintf_internal_r>

10004524 <__swsetup_r>:
10004524:	00840074 	movhi	r2,4097
10004528:	defffd04 	addi	sp,sp,-12
1000452c:	108e6904 	addi	r2,r2,14756
10004530:	dc400115 	stw	r17,4(sp)
10004534:	2023883a 	mov	r17,r4
10004538:	11000017 	ldw	r4,0(r2)
1000453c:	dc000015 	stw	r16,0(sp)
10004540:	dfc00215 	stw	ra,8(sp)
10004544:	2821883a 	mov	r16,r5
10004548:	20000226 	beq	r4,zero,10004554 <__swsetup_r+0x30>
1000454c:	20c00e17 	ldw	r3,56(r4)
10004550:	18002e26 	beq	r3,zero,1000460c <__swsetup_r+0xe8>
10004554:	8080030b 	ldhu	r2,12(r16)
10004558:	10c0020c 	andi	r3,r2,8
1000455c:	100d883a 	mov	r6,r2
10004560:	18000f26 	beq	r3,zero,100045a0 <__swsetup_r+0x7c>
10004564:	80c00417 	ldw	r3,16(r16)
10004568:	18001526 	beq	r3,zero,100045c0 <__swsetup_r+0x9c>
1000456c:	1100004c 	andi	r4,r2,1
10004570:	20001c1e 	bne	r4,zero,100045e4 <__swsetup_r+0xc0>
10004574:	1080008c 	andi	r2,r2,2
10004578:	1000261e 	bne	r2,zero,10004614 <__swsetup_r+0xf0>
1000457c:	80800517 	ldw	r2,20(r16)
10004580:	80800215 	stw	r2,8(r16)
10004584:	18001c26 	beq	r3,zero,100045f8 <__swsetup_r+0xd4>
10004588:	0005883a 	mov	r2,zero
1000458c:	dfc00217 	ldw	ra,8(sp)
10004590:	dc400117 	ldw	r17,4(sp)
10004594:	dc000017 	ldw	r16,0(sp)
10004598:	dec00304 	addi	sp,sp,12
1000459c:	f800283a 	ret
100045a0:	3080040c 	andi	r2,r6,16
100045a4:	10001726 	beq	r2,zero,10004604 <__swsetup_r+0xe0>
100045a8:	3080010c 	andi	r2,r6,4
100045ac:	10001b1e 	bne	r2,zero,1000461c <__swsetup_r+0xf8>
100045b0:	80c00417 	ldw	r3,16(r16)
100045b4:	30800214 	ori	r2,r6,8
100045b8:	8080030d 	sth	r2,12(r16)
100045bc:	183feb1e 	bne	r3,zero,1000456c <__alt_data_end+0xf800456c>
100045c0:	1140a00c 	andi	r5,r2,640
100045c4:	01008004 	movi	r4,512
100045c8:	293fe826 	beq	r5,r4,1000456c <__alt_data_end+0xf800456c>
100045cc:	8809883a 	mov	r4,r17
100045d0:	800b883a 	mov	r5,r16
100045d4:	00070b80 	call	100070b8 <__smakebuf_r>
100045d8:	8080030b 	ldhu	r2,12(r16)
100045dc:	80c00417 	ldw	r3,16(r16)
100045e0:	003fe206 	br	1000456c <__alt_data_end+0xf800456c>
100045e4:	80800517 	ldw	r2,20(r16)
100045e8:	80000215 	stw	zero,8(r16)
100045ec:	0085c83a 	sub	r2,zero,r2
100045f0:	80800615 	stw	r2,24(r16)
100045f4:	183fe41e 	bne	r3,zero,10004588 <__alt_data_end+0xf8004588>
100045f8:	8080030b 	ldhu	r2,12(r16)
100045fc:	1080200c 	andi	r2,r2,128
10004600:	103fe226 	beq	r2,zero,1000458c <__alt_data_end+0xf800458c>
10004604:	00bfffc4 	movi	r2,-1
10004608:	003fe006 	br	1000458c <__alt_data_end+0xf800458c>
1000460c:	00065600 	call	10006560 <__sinit>
10004610:	003fd006 	br	10004554 <__alt_data_end+0xf8004554>
10004614:	0005883a 	mov	r2,zero
10004618:	003fd906 	br	10004580 <__alt_data_end+0xf8004580>
1000461c:	81400c17 	ldw	r5,48(r16)
10004620:	28000626 	beq	r5,zero,1000463c <__swsetup_r+0x118>
10004624:	80801004 	addi	r2,r16,64
10004628:	28800326 	beq	r5,r2,10004638 <__swsetup_r+0x114>
1000462c:	8809883a 	mov	r4,r17
10004630:	00066d40 	call	100066d4 <_free_r>
10004634:	8180030b 	ldhu	r6,12(r16)
10004638:	80000c15 	stw	zero,48(r16)
1000463c:	80c00417 	ldw	r3,16(r16)
10004640:	00bff6c4 	movi	r2,-37
10004644:	118c703a 	and	r6,r2,r6
10004648:	80000115 	stw	zero,4(r16)
1000464c:	80c00015 	stw	r3,0(r16)
10004650:	003fd806 	br	100045b4 <__alt_data_end+0xf80045b4>

10004654 <quorem>:
10004654:	defff204 	addi	sp,sp,-56
10004658:	ddc00b15 	stw	r23,44(sp)
1000465c:	20800417 	ldw	r2,16(r4)
10004660:	2dc00417 	ldw	r23,16(r5)
10004664:	dfc00d15 	stw	ra,52(sp)
10004668:	df000c15 	stw	fp,48(sp)
1000466c:	dd800a15 	stw	r22,40(sp)
10004670:	dd400915 	stw	r21,36(sp)
10004674:	dd000815 	stw	r20,32(sp)
10004678:	dcc00715 	stw	r19,28(sp)
1000467c:	dc800615 	stw	r18,24(sp)
10004680:	dc400515 	stw	r17,20(sp)
10004684:	dc000415 	stw	r16,16(sp)
10004688:	15c07a16 	blt	r2,r23,10004874 <quorem+0x220>
1000468c:	bdffffc4 	addi	r23,r23,-1
10004690:	bde9883a 	add	r20,r23,r23
10004694:	28c00504 	addi	r3,r5,20
10004698:	a529883a 	add	r20,r20,r20
1000469c:	1d39883a 	add	fp,r3,r20
100046a0:	24c00504 	addi	r19,r4,20
100046a4:	d9400215 	stw	r5,8(sp)
100046a8:	9d29883a 	add	r20,r19,r20
100046ac:	e1400017 	ldw	r5,0(fp)
100046b0:	d9000015 	stw	r4,0(sp)
100046b4:	a1000017 	ldw	r4,0(r20)
100046b8:	29400044 	addi	r5,r5,1
100046bc:	d8c00115 	stw	r3,4(sp)
100046c0:	dd000315 	stw	r20,12(sp)
100046c4:	000c3680 	call	1000c368 <__udivsi3>
100046c8:	1025883a 	mov	r18,r2
100046cc:	10003026 	beq	r2,zero,10004790 <quorem+0x13c>
100046d0:	dc400117 	ldw	r17,4(sp)
100046d4:	9829883a 	mov	r20,r19
100046d8:	002d883a 	mov	r22,zero
100046dc:	0021883a 	mov	r16,zero
100046e0:	8d400017 	ldw	r21,0(r17)
100046e4:	900b883a 	mov	r5,r18
100046e8:	8c400104 	addi	r17,r17,4
100046ec:	a93fffcc 	andi	r4,r21,65535
100046f0:	000c3780 	call	1000c378 <__mulsi3>
100046f4:	a808d43a 	srli	r4,r21,16
100046f8:	900b883a 	mov	r5,r18
100046fc:	b0ad883a 	add	r22,r22,r2
10004700:	000c3780 	call	1000c378 <__mulsi3>
10004704:	a1000017 	ldw	r4,0(r20)
10004708:	b00cd43a 	srli	r6,r22,16
1000470c:	b0ffffcc 	andi	r3,r22,65535
10004710:	217fffcc 	andi	r5,r4,65535
10004714:	2c21883a 	add	r16,r5,r16
10004718:	80c7c83a 	sub	r3,r16,r3
1000471c:	2008d43a 	srli	r4,r4,16
10004720:	3085883a 	add	r2,r6,r2
10004724:	1821d43a 	srai	r16,r3,16
10004728:	117fffcc 	andi	r5,r2,65535
1000472c:	2149c83a 	sub	r4,r4,r5
10004730:	2421883a 	add	r16,r4,r16
10004734:	8008943a 	slli	r4,r16,16
10004738:	18ffffcc 	andi	r3,r3,65535
1000473c:	102cd43a 	srli	r22,r2,16
10004740:	20c8b03a 	or	r4,r4,r3
10004744:	a1000015 	stw	r4,0(r20)
10004748:	8021d43a 	srai	r16,r16,16
1000474c:	a5000104 	addi	r20,r20,4
10004750:	e47fe32e 	bgeu	fp,r17,100046e0 <__alt_data_end+0xf80046e0>
10004754:	d8c00317 	ldw	r3,12(sp)
10004758:	18800017 	ldw	r2,0(r3)
1000475c:	10000c1e 	bne	r2,zero,10004790 <quorem+0x13c>
10004760:	18bfff04 	addi	r2,r3,-4
10004764:	9880082e 	bgeu	r19,r2,10004788 <quorem+0x134>
10004768:	18ffff17 	ldw	r3,-4(r3)
1000476c:	18000326 	beq	r3,zero,1000477c <quorem+0x128>
10004770:	00000506 	br	10004788 <quorem+0x134>
10004774:	10c00017 	ldw	r3,0(r2)
10004778:	1800031e 	bne	r3,zero,10004788 <quorem+0x134>
1000477c:	10bfff04 	addi	r2,r2,-4
10004780:	bdffffc4 	addi	r23,r23,-1
10004784:	98bffb36 	bltu	r19,r2,10004774 <__alt_data_end+0xf8004774>
10004788:	d8c00017 	ldw	r3,0(sp)
1000478c:	1dc00415 	stw	r23,16(r3)
10004790:	d9000017 	ldw	r4,0(sp)
10004794:	d9400217 	ldw	r5,8(sp)
10004798:	00088340 	call	10008834 <__mcmp>
1000479c:	10002816 	blt	r2,zero,10004840 <quorem+0x1ec>
100047a0:	dc400117 	ldw	r17,4(sp)
100047a4:	94800044 	addi	r18,r18,1
100047a8:	980d883a 	mov	r6,r19
100047ac:	0007883a 	mov	r3,zero
100047b0:	31000017 	ldw	r4,0(r6)
100047b4:	89400017 	ldw	r5,0(r17)
100047b8:	31800104 	addi	r6,r6,4
100047bc:	20bfffcc 	andi	r2,r4,65535
100047c0:	10c7883a 	add	r3,r2,r3
100047c4:	28bfffcc 	andi	r2,r5,65535
100047c8:	1885c83a 	sub	r2,r3,r2
100047cc:	280ad43a 	srli	r5,r5,16
100047d0:	2008d43a 	srli	r4,r4,16
100047d4:	1007d43a 	srai	r3,r2,16
100047d8:	10bfffcc 	andi	r2,r2,65535
100047dc:	2149c83a 	sub	r4,r4,r5
100047e0:	20c9883a 	add	r4,r4,r3
100047e4:	200a943a 	slli	r5,r4,16
100047e8:	8c400104 	addi	r17,r17,4
100047ec:	2007d43a 	srai	r3,r4,16
100047f0:	2884b03a 	or	r2,r5,r2
100047f4:	30bfff15 	stw	r2,-4(r6)
100047f8:	e47fed2e 	bgeu	fp,r17,100047b0 <__alt_data_end+0xf80047b0>
100047fc:	bdc5883a 	add	r2,r23,r23
10004800:	1085883a 	add	r2,r2,r2
10004804:	9887883a 	add	r3,r19,r2
10004808:	18800017 	ldw	r2,0(r3)
1000480c:	10000c1e 	bne	r2,zero,10004840 <quorem+0x1ec>
10004810:	18bfff04 	addi	r2,r3,-4
10004814:	9880082e 	bgeu	r19,r2,10004838 <quorem+0x1e4>
10004818:	18ffff17 	ldw	r3,-4(r3)
1000481c:	18000326 	beq	r3,zero,1000482c <quorem+0x1d8>
10004820:	00000506 	br	10004838 <quorem+0x1e4>
10004824:	10c00017 	ldw	r3,0(r2)
10004828:	1800031e 	bne	r3,zero,10004838 <quorem+0x1e4>
1000482c:	10bfff04 	addi	r2,r2,-4
10004830:	bdffffc4 	addi	r23,r23,-1
10004834:	98bffb36 	bltu	r19,r2,10004824 <__alt_data_end+0xf8004824>
10004838:	d8c00017 	ldw	r3,0(sp)
1000483c:	1dc00415 	stw	r23,16(r3)
10004840:	9005883a 	mov	r2,r18
10004844:	dfc00d17 	ldw	ra,52(sp)
10004848:	df000c17 	ldw	fp,48(sp)
1000484c:	ddc00b17 	ldw	r23,44(sp)
10004850:	dd800a17 	ldw	r22,40(sp)
10004854:	dd400917 	ldw	r21,36(sp)
10004858:	dd000817 	ldw	r20,32(sp)
1000485c:	dcc00717 	ldw	r19,28(sp)
10004860:	dc800617 	ldw	r18,24(sp)
10004864:	dc400517 	ldw	r17,20(sp)
10004868:	dc000417 	ldw	r16,16(sp)
1000486c:	dec00e04 	addi	sp,sp,56
10004870:	f800283a 	ret
10004874:	0005883a 	mov	r2,zero
10004878:	003ff206 	br	10004844 <__alt_data_end+0xf8004844>

1000487c <_dtoa_r>:
1000487c:	20801017 	ldw	r2,64(r4)
10004880:	deffde04 	addi	sp,sp,-136
10004884:	dd401d15 	stw	r21,116(sp)
10004888:	dcc01b15 	stw	r19,108(sp)
1000488c:	dc801a15 	stw	r18,104(sp)
10004890:	dc401915 	stw	r17,100(sp)
10004894:	dc001815 	stw	r16,96(sp)
10004898:	dfc02115 	stw	ra,132(sp)
1000489c:	df002015 	stw	fp,128(sp)
100048a0:	ddc01f15 	stw	r23,124(sp)
100048a4:	dd801e15 	stw	r22,120(sp)
100048a8:	dd001c15 	stw	r20,112(sp)
100048ac:	d9c00315 	stw	r7,12(sp)
100048b0:	2021883a 	mov	r16,r4
100048b4:	302b883a 	mov	r21,r6
100048b8:	2825883a 	mov	r18,r5
100048bc:	dc402417 	ldw	r17,144(sp)
100048c0:	3027883a 	mov	r19,r6
100048c4:	10000826 	beq	r2,zero,100048e8 <_dtoa_r+0x6c>
100048c8:	21801117 	ldw	r6,68(r4)
100048cc:	00c00044 	movi	r3,1
100048d0:	100b883a 	mov	r5,r2
100048d4:	1986983a 	sll	r3,r3,r6
100048d8:	11800115 	stw	r6,4(r2)
100048dc:	10c00215 	stw	r3,8(r2)
100048e0:	0007f600 	call	10007f60 <_Bfree>
100048e4:	80001015 	stw	zero,64(r16)
100048e8:	a8002d16 	blt	r21,zero,100049a0 <_dtoa_r+0x124>
100048ec:	88000015 	stw	zero,0(r17)
100048f0:	a8dffc2c 	andhi	r3,r21,32752
100048f4:	009ffc34 	movhi	r2,32752
100048f8:	18801b26 	beq	r3,r2,10004968 <_dtoa_r+0xec>
100048fc:	9009883a 	mov	r4,r18
10004900:	980b883a 	mov	r5,r19
10004904:	000d883a 	mov	r6,zero
10004908:	000f883a 	mov	r7,zero
1000490c:	000d5bc0 	call	1000d5bc <__eqdf2>
10004910:	10002a1e 	bne	r2,zero,100049bc <_dtoa_r+0x140>
10004914:	d8c02317 	ldw	r3,140(sp)
10004918:	d9002517 	ldw	r4,148(sp)
1000491c:	00800044 	movi	r2,1
10004920:	18800015 	stw	r2,0(r3)
10004924:	2001a226 	beq	r4,zero,10004fb0 <_dtoa_r+0x734>
10004928:	00840074 	movhi	r2,4097
1000492c:	10870e44 	addi	r2,r2,7225
10004930:	20800015 	stw	r2,0(r4)
10004934:	10bfffc4 	addi	r2,r2,-1
10004938:	dfc02117 	ldw	ra,132(sp)
1000493c:	df002017 	ldw	fp,128(sp)
10004940:	ddc01f17 	ldw	r23,124(sp)
10004944:	dd801e17 	ldw	r22,120(sp)
10004948:	dd401d17 	ldw	r21,116(sp)
1000494c:	dd001c17 	ldw	r20,112(sp)
10004950:	dcc01b17 	ldw	r19,108(sp)
10004954:	dc801a17 	ldw	r18,104(sp)
10004958:	dc401917 	ldw	r17,100(sp)
1000495c:	dc001817 	ldw	r16,96(sp)
10004960:	dec02204 	addi	sp,sp,136
10004964:	f800283a 	ret
10004968:	d8c02317 	ldw	r3,140(sp)
1000496c:	0089c3c4 	movi	r2,9999
10004970:	18800015 	stw	r2,0(r3)
10004974:	90017c26 	beq	r18,zero,10004f68 <_dtoa_r+0x6ec>
10004978:	00840074 	movhi	r2,4097
1000497c:	10871a04 	addi	r2,r2,7272
10004980:	d9002517 	ldw	r4,148(sp)
10004984:	203fec26 	beq	r4,zero,10004938 <__alt_data_end+0xf8004938>
10004988:	10c000c7 	ldb	r3,3(r2)
1000498c:	18017d1e 	bne	r3,zero,10004f84 <_dtoa_r+0x708>
10004990:	10c000c4 	addi	r3,r2,3
10004994:	d9802517 	ldw	r6,148(sp)
10004998:	30c00015 	stw	r3,0(r6)
1000499c:	003fe606 	br	10004938 <__alt_data_end+0xf8004938>
100049a0:	04e00034 	movhi	r19,32768
100049a4:	9cffffc4 	addi	r19,r19,-1
100049a8:	00800044 	movi	r2,1
100049ac:	ace6703a 	and	r19,r21,r19
100049b0:	88800015 	stw	r2,0(r17)
100049b4:	982b883a 	mov	r21,r19
100049b8:	003fcd06 	br	100048f0 <__alt_data_end+0xf80048f0>
100049bc:	d8800204 	addi	r2,sp,8
100049c0:	a822d53a 	srli	r17,r21,20
100049c4:	d8800015 	stw	r2,0(sp)
100049c8:	8009883a 	mov	r4,r16
100049cc:	900b883a 	mov	r5,r18
100049d0:	980d883a 	mov	r6,r19
100049d4:	d9c00104 	addi	r7,sp,4
100049d8:	0008ba80 	call	10008ba8 <__d2b>
100049dc:	1039883a 	mov	fp,r2
100049e0:	88016a1e 	bne	r17,zero,10004f8c <_dtoa_r+0x710>
100049e4:	dd000217 	ldw	r20,8(sp)
100049e8:	dc400117 	ldw	r17,4(sp)
100049ec:	00befbc4 	movi	r2,-1041
100049f0:	a463883a 	add	r17,r20,r17
100049f4:	8882ea16 	blt	r17,r2,100055a0 <_dtoa_r+0xd24>
100049f8:	00bf0384 	movi	r2,-1010
100049fc:	1445c83a 	sub	r2,r2,r17
10004a00:	89010484 	addi	r4,r17,1042
10004a04:	a8aa983a 	sll	r21,r21,r2
10004a08:	9108d83a 	srl	r4,r18,r4
10004a0c:	a908b03a 	or	r4,r21,r4
10004a10:	000ea940 	call	1000ea94 <__floatunsidf>
10004a14:	017f8434 	movhi	r5,65040
10004a18:	01800044 	movi	r6,1
10004a1c:	1009883a 	mov	r4,r2
10004a20:	194b883a 	add	r5,r3,r5
10004a24:	8c7fffc4 	addi	r17,r17,-1
10004a28:	d9800f15 	stw	r6,60(sp)
10004a2c:	000d883a 	mov	r6,zero
10004a30:	01cffe34 	movhi	r7,16376
10004a34:	000e06c0 	call	1000e06c <__subdf3>
10004a38:	0198dbf4 	movhi	r6,25455
10004a3c:	01cff4f4 	movhi	r7,16339
10004a40:	1009883a 	mov	r4,r2
10004a44:	180b883a 	mov	r5,r3
10004a48:	3190d844 	addi	r6,r6,17249
10004a4c:	39e1e9c4 	addi	r7,r7,-30809
10004a50:	000d8000 	call	1000d800 <__muldf3>
10004a54:	01a2d874 	movhi	r6,35681
10004a58:	01cff1f4 	movhi	r7,16327
10004a5c:	180b883a 	mov	r5,r3
10004a60:	31b22cc4 	addi	r6,r6,-14157
10004a64:	39e28a04 	addi	r7,r7,-30168
10004a68:	1009883a 	mov	r4,r2
10004a6c:	000c3a00 	call	1000c3a0 <__adddf3>
10004a70:	8809883a 	mov	r4,r17
10004a74:	102d883a 	mov	r22,r2
10004a78:	182b883a 	mov	r21,r3
10004a7c:	000e9c40 	call	1000e9c4 <__floatsidf>
10004a80:	019427f4 	movhi	r6,20639
10004a84:	01cff4f4 	movhi	r7,16339
10004a88:	1009883a 	mov	r4,r2
10004a8c:	180b883a 	mov	r5,r3
10004a90:	319e7ec4 	addi	r6,r6,31227
10004a94:	39d104c4 	addi	r7,r7,17427
10004a98:	000d8000 	call	1000d800 <__muldf3>
10004a9c:	b009883a 	mov	r4,r22
10004aa0:	a80b883a 	mov	r5,r21
10004aa4:	100d883a 	mov	r6,r2
10004aa8:	180f883a 	mov	r7,r3
10004aac:	000c3a00 	call	1000c3a0 <__adddf3>
10004ab0:	1009883a 	mov	r4,r2
10004ab4:	180b883a 	mov	r5,r3
10004ab8:	102d883a 	mov	r22,r2
10004abc:	182b883a 	mov	r21,r3
10004ac0:	000e93c0 	call	1000e93c <__fixdfsi>
10004ac4:	b009883a 	mov	r4,r22
10004ac8:	a80b883a 	mov	r5,r21
10004acc:	000d883a 	mov	r6,zero
10004ad0:	000f883a 	mov	r7,zero
10004ad4:	d8800515 	stw	r2,20(sp)
10004ad8:	000d7200 	call	1000d720 <__ledf2>
10004adc:	10023116 	blt	r2,zero,100053a4 <_dtoa_r+0xb28>
10004ae0:	d8c00517 	ldw	r3,20(sp)
10004ae4:	00800584 	movi	r2,22
10004ae8:	10c21f36 	bltu	r2,r3,10005368 <_dtoa_r+0xaec>
10004aec:	180490fa 	slli	r2,r3,3
10004af0:	00c40074 	movhi	r3,4097
10004af4:	18c73604 	addi	r3,r3,7384
10004af8:	1885883a 	add	r2,r3,r2
10004afc:	11000017 	ldw	r4,0(r2)
10004b00:	11400117 	ldw	r5,4(r2)
10004b04:	900d883a 	mov	r6,r18
10004b08:	980f883a 	mov	r7,r19
10004b0c:	000d6400 	call	1000d640 <__gedf2>
10004b10:	0082a70e 	bge	zero,r2,100055b0 <_dtoa_r+0xd34>
10004b14:	d9000517 	ldw	r4,20(sp)
10004b18:	d8000c15 	stw	zero,48(sp)
10004b1c:	213fffc4 	addi	r4,r4,-1
10004b20:	d9000515 	stw	r4,20(sp)
10004b24:	a463c83a 	sub	r17,r20,r17
10004b28:	8dbfffc4 	addi	r22,r17,-1
10004b2c:	b0021916 	blt	r22,zero,10005394 <_dtoa_r+0xb18>
10004b30:	d8000815 	stw	zero,32(sp)
10004b34:	d8800517 	ldw	r2,20(sp)
10004b38:	10020e16 	blt	r2,zero,10005374 <_dtoa_r+0xaf8>
10004b3c:	b0ad883a 	add	r22,r22,r2
10004b40:	d8800a15 	stw	r2,40(sp)
10004b44:	d8000915 	stw	zero,36(sp)
10004b48:	d8c00317 	ldw	r3,12(sp)
10004b4c:	00800244 	movi	r2,9
10004b50:	10c11a36 	bltu	r2,r3,10004fbc <_dtoa_r+0x740>
10004b54:	00800144 	movi	r2,5
10004b58:	10c4fc0e 	bge	r2,r3,10005f4c <_dtoa_r+0x16d0>
10004b5c:	18ffff04 	addi	r3,r3,-4
10004b60:	d8c00315 	stw	r3,12(sp)
10004b64:	0029883a 	mov	r20,zero
10004b68:	d9800317 	ldw	r6,12(sp)
10004b6c:	008000c4 	movi	r2,3
10004b70:	3083bd26 	beq	r6,r2,10005a68 <_dtoa_r+0x11ec>
10004b74:	1183670e 	bge	r2,r6,10005914 <_dtoa_r+0x1098>
10004b78:	d8c00317 	ldw	r3,12(sp)
10004b7c:	00800104 	movi	r2,4
10004b80:	1882e726 	beq	r3,r2,10005720 <_dtoa_r+0xea4>
10004b84:	00800144 	movi	r2,5
10004b88:	1884f21e 	bne	r3,r2,10005f54 <_dtoa_r+0x16d8>
10004b8c:	00800044 	movi	r2,1
10004b90:	d8800b15 	stw	r2,44(sp)
10004b94:	d8c02217 	ldw	r3,136(sp)
10004b98:	d9000517 	ldw	r4,20(sp)
10004b9c:	1907883a 	add	r3,r3,r4
10004ba0:	19800044 	addi	r6,r3,1
10004ba4:	d8c00d15 	stw	r3,52(sp)
10004ba8:	d9800615 	stw	r6,24(sp)
10004bac:	0183c30e 	bge	zero,r6,10005abc <_dtoa_r+0x1240>
10004bb0:	d9800617 	ldw	r6,24(sp)
10004bb4:	3023883a 	mov	r17,r6
10004bb8:	80001115 	stw	zero,68(r16)
10004bbc:	008005c4 	movi	r2,23
10004bc0:	1184f62e 	bgeu	r2,r6,10005f9c <_dtoa_r+0x1720>
10004bc4:	00c00044 	movi	r3,1
10004bc8:	00800104 	movi	r2,4
10004bcc:	1085883a 	add	r2,r2,r2
10004bd0:	11000504 	addi	r4,r2,20
10004bd4:	180b883a 	mov	r5,r3
10004bd8:	18c00044 	addi	r3,r3,1
10004bdc:	313ffb2e 	bgeu	r6,r4,10004bcc <__alt_data_end+0xf8004bcc>
10004be0:	81401115 	stw	r5,68(r16)
10004be4:	8009883a 	mov	r4,r16
10004be8:	0007eb80 	call	10007eb8 <_Balloc>
10004bec:	d8800715 	stw	r2,28(sp)
10004bf0:	80801015 	stw	r2,64(r16)
10004bf4:	00800384 	movi	r2,14
10004bf8:	1440fd36 	bltu	r2,r17,10004ff0 <_dtoa_r+0x774>
10004bfc:	a000fc26 	beq	r20,zero,10004ff0 <_dtoa_r+0x774>
10004c00:	d8800517 	ldw	r2,20(sp)
10004c04:	0083b90e 	bge	zero,r2,10005aec <_dtoa_r+0x1270>
10004c08:	d8c00517 	ldw	r3,20(sp)
10004c0c:	108003cc 	andi	r2,r2,15
10004c10:	100490fa 	slli	r2,r2,3
10004c14:	182fd13a 	srai	r23,r3,4
10004c18:	00c40074 	movhi	r3,4097
10004c1c:	18c73604 	addi	r3,r3,7384
10004c20:	1885883a 	add	r2,r3,r2
10004c24:	b8c0040c 	andi	r3,r23,16
10004c28:	12c00017 	ldw	r11,0(r2)
10004c2c:	12800117 	ldw	r10,4(r2)
10004c30:	18039726 	beq	r3,zero,10005a90 <_dtoa_r+0x1214>
10004c34:	00840074 	movhi	r2,4097
10004c38:	10872c04 	addi	r2,r2,7344
10004c3c:	11800817 	ldw	r6,32(r2)
10004c40:	11c00917 	ldw	r7,36(r2)
10004c44:	9009883a 	mov	r4,r18
10004c48:	980b883a 	mov	r5,r19
10004c4c:	da801615 	stw	r10,88(sp)
10004c50:	dac01515 	stw	r11,84(sp)
10004c54:	000cc3c0 	call	1000cc3c <__divdf3>
10004c58:	da801617 	ldw	r10,88(sp)
10004c5c:	dac01517 	ldw	r11,84(sp)
10004c60:	bdc003cc 	andi	r23,r23,15
10004c64:	044000c4 	movi	r17,3
10004c68:	d8800e15 	stw	r2,56(sp)
10004c6c:	182b883a 	mov	r21,r3
10004c70:	b8001126 	beq	r23,zero,10004cb8 <_dtoa_r+0x43c>
10004c74:	05040074 	movhi	r20,4097
10004c78:	a5072c04 	addi	r20,r20,7344
10004c7c:	5805883a 	mov	r2,r11
10004c80:	5007883a 	mov	r3,r10
10004c84:	b980004c 	andi	r6,r23,1
10004c88:	1009883a 	mov	r4,r2
10004c8c:	b82fd07a 	srai	r23,r23,1
10004c90:	180b883a 	mov	r5,r3
10004c94:	30000426 	beq	r6,zero,10004ca8 <_dtoa_r+0x42c>
10004c98:	a1800017 	ldw	r6,0(r20)
10004c9c:	a1c00117 	ldw	r7,4(r20)
10004ca0:	8c400044 	addi	r17,r17,1
10004ca4:	000d8000 	call	1000d800 <__muldf3>
10004ca8:	a5000204 	addi	r20,r20,8
10004cac:	b83ff51e 	bne	r23,zero,10004c84 <__alt_data_end+0xf8004c84>
10004cb0:	1017883a 	mov	r11,r2
10004cb4:	1815883a 	mov	r10,r3
10004cb8:	d9000e17 	ldw	r4,56(sp)
10004cbc:	a80b883a 	mov	r5,r21
10004cc0:	580d883a 	mov	r6,r11
10004cc4:	500f883a 	mov	r7,r10
10004cc8:	000cc3c0 	call	1000cc3c <__divdf3>
10004ccc:	1029883a 	mov	r20,r2
10004cd0:	182b883a 	mov	r21,r3
10004cd4:	d9800c17 	ldw	r6,48(sp)
10004cd8:	30000626 	beq	r6,zero,10004cf4 <_dtoa_r+0x478>
10004cdc:	a009883a 	mov	r4,r20
10004ce0:	a80b883a 	mov	r5,r21
10004ce4:	000d883a 	mov	r6,zero
10004ce8:	01cffc34 	movhi	r7,16368
10004cec:	000d7200 	call	1000d720 <__ledf2>
10004cf0:	10043216 	blt	r2,zero,10005dbc <_dtoa_r+0x1540>
10004cf4:	8809883a 	mov	r4,r17
10004cf8:	000e9c40 	call	1000e9c4 <__floatsidf>
10004cfc:	1009883a 	mov	r4,r2
10004d00:	180b883a 	mov	r5,r3
10004d04:	a00d883a 	mov	r6,r20
10004d08:	a80f883a 	mov	r7,r21
10004d0c:	000d8000 	call	1000d800 <__muldf3>
10004d10:	000d883a 	mov	r6,zero
10004d14:	1009883a 	mov	r4,r2
10004d18:	180b883a 	mov	r5,r3
10004d1c:	01d00734 	movhi	r7,16412
10004d20:	000c3a00 	call	1000c3a0 <__adddf3>
10004d24:	1023883a 	mov	r17,r2
10004d28:	d9800617 	ldw	r6,24(sp)
10004d2c:	00bf3034 	movhi	r2,64704
10004d30:	1885883a 	add	r2,r3,r2
10004d34:	d8800e15 	stw	r2,56(sp)
10004d38:	30032e26 	beq	r6,zero,100059f4 <_dtoa_r+0x1178>
10004d3c:	d8c00517 	ldw	r3,20(sp)
10004d40:	da800617 	ldw	r10,24(sp)
10004d44:	d8c01215 	stw	r3,72(sp)
10004d48:	d9000b17 	ldw	r4,44(sp)
10004d4c:	2003b026 	beq	r4,zero,10005c10 <_dtoa_r+0x1394>
10004d50:	50bfffc4 	addi	r2,r10,-1
10004d54:	100490fa 	slli	r2,r2,3
10004d58:	00c40074 	movhi	r3,4097
10004d5c:	18c73604 	addi	r3,r3,7384
10004d60:	1885883a 	add	r2,r3,r2
10004d64:	11800017 	ldw	r6,0(r2)
10004d68:	11c00117 	ldw	r7,4(r2)
10004d6c:	d8800717 	ldw	r2,28(sp)
10004d70:	0009883a 	mov	r4,zero
10004d74:	014ff834 	movhi	r5,16352
10004d78:	da801615 	stw	r10,88(sp)
10004d7c:	15c00044 	addi	r23,r2,1
10004d80:	000cc3c0 	call	1000cc3c <__divdf3>
10004d84:	d9c00e17 	ldw	r7,56(sp)
10004d88:	880d883a 	mov	r6,r17
10004d8c:	1009883a 	mov	r4,r2
10004d90:	180b883a 	mov	r5,r3
10004d94:	000e06c0 	call	1000e06c <__subdf3>
10004d98:	a80b883a 	mov	r5,r21
10004d9c:	a009883a 	mov	r4,r20
10004da0:	d8c01015 	stw	r3,64(sp)
10004da4:	d8800e15 	stw	r2,56(sp)
10004da8:	000e93c0 	call	1000e93c <__fixdfsi>
10004dac:	1009883a 	mov	r4,r2
10004db0:	d8801715 	stw	r2,92(sp)
10004db4:	000e9c40 	call	1000e9c4 <__floatsidf>
10004db8:	a009883a 	mov	r4,r20
10004dbc:	a80b883a 	mov	r5,r21
10004dc0:	100d883a 	mov	r6,r2
10004dc4:	180f883a 	mov	r7,r3
10004dc8:	000e06c0 	call	1000e06c <__subdf3>
10004dcc:	da001717 	ldw	r8,92(sp)
10004dd0:	1829883a 	mov	r20,r3
10004dd4:	d8c00717 	ldw	r3,28(sp)
10004dd8:	d9000e17 	ldw	r4,56(sp)
10004ddc:	d9401017 	ldw	r5,64(sp)
10004de0:	42000c04 	addi	r8,r8,48
10004de4:	1023883a 	mov	r17,r2
10004de8:	1a000005 	stb	r8,0(r3)
10004dec:	880d883a 	mov	r6,r17
10004df0:	a00f883a 	mov	r7,r20
10004df4:	402b883a 	mov	r21,r8
10004df8:	000d6400 	call	1000d640 <__gedf2>
10004dfc:	00844516 	blt	zero,r2,10005f14 <_dtoa_r+0x1698>
10004e00:	0009883a 	mov	r4,zero
10004e04:	014ffc34 	movhi	r5,16368
10004e08:	880d883a 	mov	r6,r17
10004e0c:	a00f883a 	mov	r7,r20
10004e10:	000e06c0 	call	1000e06c <__subdf3>
10004e14:	d9000e17 	ldw	r4,56(sp)
10004e18:	d9401017 	ldw	r5,64(sp)
10004e1c:	100d883a 	mov	r6,r2
10004e20:	180f883a 	mov	r7,r3
10004e24:	000d6400 	call	1000d640 <__gedf2>
10004e28:	da801617 	ldw	r10,88(sp)
10004e2c:	00843616 	blt	zero,r2,10005f08 <_dtoa_r+0x168c>
10004e30:	00800044 	movi	r2,1
10004e34:	12806e0e 	bge	r2,r10,10004ff0 <_dtoa_r+0x774>
10004e38:	d9000717 	ldw	r4,28(sp)
10004e3c:	dd801315 	stw	r22,76(sp)
10004e40:	dc001115 	stw	r16,68(sp)
10004e44:	2295883a 	add	r10,r4,r10
10004e48:	dcc01415 	stw	r19,80(sp)
10004e4c:	502d883a 	mov	r22,r10
10004e50:	dcc01017 	ldw	r19,64(sp)
10004e54:	b821883a 	mov	r16,r23
10004e58:	dc801015 	stw	r18,64(sp)
10004e5c:	dc800e17 	ldw	r18,56(sp)
10004e60:	00000906 	br	10004e88 <_dtoa_r+0x60c>
10004e64:	000e06c0 	call	1000e06c <__subdf3>
10004e68:	1009883a 	mov	r4,r2
10004e6c:	180b883a 	mov	r5,r3
10004e70:	900d883a 	mov	r6,r18
10004e74:	980f883a 	mov	r7,r19
10004e78:	000d7200 	call	1000d720 <__ledf2>
10004e7c:	10040e16 	blt	r2,zero,10005eb8 <_dtoa_r+0x163c>
10004e80:	b821883a 	mov	r16,r23
10004e84:	bd841026 	beq	r23,r22,10005ec8 <_dtoa_r+0x164c>
10004e88:	9009883a 	mov	r4,r18
10004e8c:	980b883a 	mov	r5,r19
10004e90:	000d883a 	mov	r6,zero
10004e94:	01d00934 	movhi	r7,16420
10004e98:	000d8000 	call	1000d800 <__muldf3>
10004e9c:	000d883a 	mov	r6,zero
10004ea0:	01d00934 	movhi	r7,16420
10004ea4:	8809883a 	mov	r4,r17
10004ea8:	a00b883a 	mov	r5,r20
10004eac:	1025883a 	mov	r18,r2
10004eb0:	1827883a 	mov	r19,r3
10004eb4:	000d8000 	call	1000d800 <__muldf3>
10004eb8:	180b883a 	mov	r5,r3
10004ebc:	1009883a 	mov	r4,r2
10004ec0:	1823883a 	mov	r17,r3
10004ec4:	1029883a 	mov	r20,r2
10004ec8:	000e93c0 	call	1000e93c <__fixdfsi>
10004ecc:	1009883a 	mov	r4,r2
10004ed0:	102b883a 	mov	r21,r2
10004ed4:	000e9c40 	call	1000e9c4 <__floatsidf>
10004ed8:	a009883a 	mov	r4,r20
10004edc:	880b883a 	mov	r5,r17
10004ee0:	100d883a 	mov	r6,r2
10004ee4:	180f883a 	mov	r7,r3
10004ee8:	000e06c0 	call	1000e06c <__subdf3>
10004eec:	ad400c04 	addi	r21,r21,48
10004ef0:	1009883a 	mov	r4,r2
10004ef4:	180b883a 	mov	r5,r3
10004ef8:	900d883a 	mov	r6,r18
10004efc:	980f883a 	mov	r7,r19
10004f00:	85400005 	stb	r21,0(r16)
10004f04:	1023883a 	mov	r17,r2
10004f08:	1829883a 	mov	r20,r3
10004f0c:	000d7200 	call	1000d720 <__ledf2>
10004f10:	bdc00044 	addi	r23,r23,1
10004f14:	0009883a 	mov	r4,zero
10004f18:	014ffc34 	movhi	r5,16368
10004f1c:	880d883a 	mov	r6,r17
10004f20:	a00f883a 	mov	r7,r20
10004f24:	103fcf0e 	bge	r2,zero,10004e64 <__alt_data_end+0xf8004e64>
10004f28:	d9801217 	ldw	r6,72(sp)
10004f2c:	dc001117 	ldw	r16,68(sp)
10004f30:	d9800515 	stw	r6,20(sp)
10004f34:	8009883a 	mov	r4,r16
10004f38:	e00b883a 	mov	r5,fp
10004f3c:	0007f600 	call	10007f60 <_Bfree>
10004f40:	d8c00517 	ldw	r3,20(sp)
10004f44:	d9002317 	ldw	r4,140(sp)
10004f48:	d9802517 	ldw	r6,148(sp)
10004f4c:	b8000005 	stb	zero,0(r23)
10004f50:	18800044 	addi	r2,r3,1
10004f54:	20800015 	stw	r2,0(r4)
10004f58:	30027226 	beq	r6,zero,10005924 <_dtoa_r+0x10a8>
10004f5c:	35c00015 	stw	r23,0(r6)
10004f60:	d8800717 	ldw	r2,28(sp)
10004f64:	003e7406 	br	10004938 <__alt_data_end+0xf8004938>
10004f68:	00800434 	movhi	r2,16
10004f6c:	10bfffc4 	addi	r2,r2,-1
10004f70:	a8aa703a 	and	r21,r21,r2
10004f74:	a83e801e 	bne	r21,zero,10004978 <__alt_data_end+0xf8004978>
10004f78:	00840074 	movhi	r2,4097
10004f7c:	10871704 	addi	r2,r2,7260
10004f80:	003e7f06 	br	10004980 <__alt_data_end+0xf8004980>
10004f84:	10c00204 	addi	r3,r2,8
10004f88:	003e8206 	br	10004994 <__alt_data_end+0xf8004994>
10004f8c:	01400434 	movhi	r5,16
10004f90:	297fffc4 	addi	r5,r5,-1
10004f94:	994a703a 	and	r5,r19,r5
10004f98:	9009883a 	mov	r4,r18
10004f9c:	8c7f0044 	addi	r17,r17,-1023
10004fa0:	294ffc34 	orhi	r5,r5,16368
10004fa4:	dd000217 	ldw	r20,8(sp)
10004fa8:	d8000f15 	stw	zero,60(sp)
10004fac:	003e9f06 	br	10004a2c <__alt_data_end+0xf8004a2c>
10004fb0:	00840074 	movhi	r2,4097
10004fb4:	10870e04 	addi	r2,r2,7224
10004fb8:	003e5f06 	br	10004938 <__alt_data_end+0xf8004938>
10004fbc:	80001115 	stw	zero,68(r16)
10004fc0:	8009883a 	mov	r4,r16
10004fc4:	000b883a 	mov	r5,zero
10004fc8:	0007eb80 	call	10007eb8 <_Balloc>
10004fcc:	01bfffc4 	movi	r6,-1
10004fd0:	d8800715 	stw	r2,28(sp)
10004fd4:	80801015 	stw	r2,64(r16)
10004fd8:	00800044 	movi	r2,1
10004fdc:	d9800615 	stw	r6,24(sp)
10004fe0:	d8800b15 	stw	r2,44(sp)
10004fe4:	d8002215 	stw	zero,136(sp)
10004fe8:	d9800d15 	stw	r6,52(sp)
10004fec:	d8000315 	stw	zero,12(sp)
10004ff0:	d8800117 	ldw	r2,4(sp)
10004ff4:	10008e16 	blt	r2,zero,10005230 <_dtoa_r+0x9b4>
10004ff8:	d9000517 	ldw	r4,20(sp)
10004ffc:	00c00384 	movi	r3,14
10005000:	19008b16 	blt	r3,r4,10005230 <_dtoa_r+0x9b4>
10005004:	200490fa 	slli	r2,r4,3
10005008:	00c40074 	movhi	r3,4097
1000500c:	d9802217 	ldw	r6,136(sp)
10005010:	18c73604 	addi	r3,r3,7384
10005014:	1885883a 	add	r2,r3,r2
10005018:	14400017 	ldw	r17,0(r2)
1000501c:	15000117 	ldw	r20,4(r2)
10005020:	3001c716 	blt	r6,zero,10005740 <_dtoa_r+0xec4>
10005024:	880d883a 	mov	r6,r17
10005028:	a00f883a 	mov	r7,r20
1000502c:	9009883a 	mov	r4,r18
10005030:	980b883a 	mov	r5,r19
10005034:	000cc3c0 	call	1000cc3c <__divdf3>
10005038:	180b883a 	mov	r5,r3
1000503c:	1009883a 	mov	r4,r2
10005040:	000e93c0 	call	1000e93c <__fixdfsi>
10005044:	1009883a 	mov	r4,r2
10005048:	102d883a 	mov	r22,r2
1000504c:	000e9c40 	call	1000e9c4 <__floatsidf>
10005050:	1009883a 	mov	r4,r2
10005054:	180b883a 	mov	r5,r3
10005058:	880d883a 	mov	r6,r17
1000505c:	a00f883a 	mov	r7,r20
10005060:	000d8000 	call	1000d800 <__muldf3>
10005064:	9009883a 	mov	r4,r18
10005068:	980b883a 	mov	r5,r19
1000506c:	100d883a 	mov	r6,r2
10005070:	180f883a 	mov	r7,r3
10005074:	000e06c0 	call	1000e06c <__subdf3>
10005078:	d9000717 	ldw	r4,28(sp)
1000507c:	d9800617 	ldw	r6,24(sp)
10005080:	180b883a 	mov	r5,r3
10005084:	b0c00c04 	addi	r3,r22,48
10005088:	20c00005 	stb	r3,0(r4)
1000508c:	25c00044 	addi	r23,r4,1
10005090:	01000044 	movi	r4,1
10005094:	1011883a 	mov	r8,r2
10005098:	2807883a 	mov	r3,r5
1000509c:	31003d26 	beq	r6,r4,10005194 <_dtoa_r+0x918>
100050a0:	000d883a 	mov	r6,zero
100050a4:	01d00934 	movhi	r7,16420
100050a8:	1009883a 	mov	r4,r2
100050ac:	000d8000 	call	1000d800 <__muldf3>
100050b0:	1009883a 	mov	r4,r2
100050b4:	180b883a 	mov	r5,r3
100050b8:	000d883a 	mov	r6,zero
100050bc:	000f883a 	mov	r7,zero
100050c0:	1027883a 	mov	r19,r2
100050c4:	182b883a 	mov	r21,r3
100050c8:	000d5bc0 	call	1000d5bc <__eqdf2>
100050cc:	103f9926 	beq	r2,zero,10004f34 <__alt_data_end+0xf8004f34>
100050d0:	d8c00617 	ldw	r3,24(sp)
100050d4:	d9000717 	ldw	r4,28(sp)
100050d8:	b825883a 	mov	r18,r23
100050dc:	18bfffc4 	addi	r2,r3,-1
100050e0:	20ad883a 	add	r22,r4,r2
100050e4:	dc000315 	stw	r16,12(sp)
100050e8:	00000a06 	br	10005114 <_dtoa_r+0x898>
100050ec:	000d8000 	call	1000d800 <__muldf3>
100050f0:	1009883a 	mov	r4,r2
100050f4:	180b883a 	mov	r5,r3
100050f8:	000d883a 	mov	r6,zero
100050fc:	000f883a 	mov	r7,zero
10005100:	1027883a 	mov	r19,r2
10005104:	182b883a 	mov	r21,r3
10005108:	b825883a 	mov	r18,r23
1000510c:	000d5bc0 	call	1000d5bc <__eqdf2>
10005110:	10022626 	beq	r2,zero,100059ac <_dtoa_r+0x1130>
10005114:	880d883a 	mov	r6,r17
10005118:	a00f883a 	mov	r7,r20
1000511c:	9809883a 	mov	r4,r19
10005120:	a80b883a 	mov	r5,r21
10005124:	000cc3c0 	call	1000cc3c <__divdf3>
10005128:	180b883a 	mov	r5,r3
1000512c:	1009883a 	mov	r4,r2
10005130:	000e93c0 	call	1000e93c <__fixdfsi>
10005134:	1009883a 	mov	r4,r2
10005138:	1021883a 	mov	r16,r2
1000513c:	000e9c40 	call	1000e9c4 <__floatsidf>
10005140:	1009883a 	mov	r4,r2
10005144:	180b883a 	mov	r5,r3
10005148:	880d883a 	mov	r6,r17
1000514c:	a00f883a 	mov	r7,r20
10005150:	000d8000 	call	1000d800 <__muldf3>
10005154:	9809883a 	mov	r4,r19
10005158:	a80b883a 	mov	r5,r21
1000515c:	100d883a 	mov	r6,r2
10005160:	180f883a 	mov	r7,r3
10005164:	000e06c0 	call	1000e06c <__subdf3>
10005168:	82000c04 	addi	r8,r16,48
1000516c:	92000005 	stb	r8,0(r18)
10005170:	1009883a 	mov	r4,r2
10005174:	180b883a 	mov	r5,r3
10005178:	000d883a 	mov	r6,zero
1000517c:	01d00934 	movhi	r7,16420
10005180:	1011883a 	mov	r8,r2
10005184:	bdc00044 	addi	r23,r23,1
10005188:	95bfd81e 	bne	r18,r22,100050ec <__alt_data_end+0xf80050ec>
1000518c:	802d883a 	mov	r22,r16
10005190:	dc000317 	ldw	r16,12(sp)
10005194:	4009883a 	mov	r4,r8
10005198:	180b883a 	mov	r5,r3
1000519c:	400d883a 	mov	r6,r8
100051a0:	180f883a 	mov	r7,r3
100051a4:	000c3a00 	call	1000c3a0 <__adddf3>
100051a8:	8809883a 	mov	r4,r17
100051ac:	a00b883a 	mov	r5,r20
100051b0:	100d883a 	mov	r6,r2
100051b4:	180f883a 	mov	r7,r3
100051b8:	1027883a 	mov	r19,r2
100051bc:	1825883a 	mov	r18,r3
100051c0:	000d7200 	call	1000d720 <__ledf2>
100051c4:	10000816 	blt	r2,zero,100051e8 <_dtoa_r+0x96c>
100051c8:	8809883a 	mov	r4,r17
100051cc:	a00b883a 	mov	r5,r20
100051d0:	980d883a 	mov	r6,r19
100051d4:	900f883a 	mov	r7,r18
100051d8:	000d5bc0 	call	1000d5bc <__eqdf2>
100051dc:	103f551e 	bne	r2,zero,10004f34 <__alt_data_end+0xf8004f34>
100051e0:	b580004c 	andi	r22,r22,1
100051e4:	b03f5326 	beq	r22,zero,10004f34 <__alt_data_end+0xf8004f34>
100051e8:	bd7fffc3 	ldbu	r21,-1(r23)
100051ec:	b8bfffc4 	addi	r2,r23,-1
100051f0:	1007883a 	mov	r3,r2
100051f4:	01400e44 	movi	r5,57
100051f8:	d9800717 	ldw	r6,28(sp)
100051fc:	00000506 	br	10005214 <_dtoa_r+0x998>
10005200:	18ffffc4 	addi	r3,r3,-1
10005204:	30825e26 	beq	r6,r2,10005b80 <_dtoa_r+0x1304>
10005208:	1d400003 	ldbu	r21,0(r3)
1000520c:	102f883a 	mov	r23,r2
10005210:	10bfffc4 	addi	r2,r2,-1
10005214:	a9003fcc 	andi	r4,r21,255
10005218:	2100201c 	xori	r4,r4,128
1000521c:	213fe004 	addi	r4,r4,-128
10005220:	217ff726 	beq	r4,r5,10005200 <__alt_data_end+0xf8005200>
10005224:	aa000044 	addi	r8,r21,1
10005228:	12000005 	stb	r8,0(r2)
1000522c:	003f4106 	br	10004f34 <__alt_data_end+0xf8004f34>
10005230:	d8c00b17 	ldw	r3,44(sp)
10005234:	18006726 	beq	r3,zero,100053d4 <_dtoa_r+0xb58>
10005238:	d9000317 	ldw	r4,12(sp)
1000523c:	00c00044 	movi	r3,1
10005240:	19016a0e 	bge	r3,r4,100057ec <_dtoa_r+0xf70>
10005244:	d8800617 	ldw	r2,24(sp)
10005248:	d8c00917 	ldw	r3,36(sp)
1000524c:	157fffc4 	addi	r21,r2,-1
10005250:	1d420716 	blt	r3,r21,10005a70 <_dtoa_r+0x11f4>
10005254:	1d6bc83a 	sub	r21,r3,r21
10005258:	d8800617 	ldw	r2,24(sp)
1000525c:	1002c716 	blt	r2,zero,10005d7c <_dtoa_r+0x1500>
10005260:	dd000817 	ldw	r20,32(sp)
10005264:	d8800617 	ldw	r2,24(sp)
10005268:	d9800817 	ldw	r6,32(sp)
1000526c:	8009883a 	mov	r4,r16
10005270:	01400044 	movi	r5,1
10005274:	308d883a 	add	r6,r6,r2
10005278:	d9800815 	stw	r6,32(sp)
1000527c:	b0ad883a 	add	r22,r22,r2
10005280:	00082e00 	call	100082e0 <__i2b>
10005284:	1023883a 	mov	r17,r2
10005288:	a0000826 	beq	r20,zero,100052ac <_dtoa_r+0xa30>
1000528c:	0580070e 	bge	zero,r22,100052ac <_dtoa_r+0xa30>
10005290:	b005883a 	mov	r2,r22
10005294:	a5812016 	blt	r20,r22,10005718 <_dtoa_r+0xe9c>
10005298:	d8c00817 	ldw	r3,32(sp)
1000529c:	a0a9c83a 	sub	r20,r20,r2
100052a0:	b0adc83a 	sub	r22,r22,r2
100052a4:	1887c83a 	sub	r3,r3,r2
100052a8:	d8c00815 	stw	r3,32(sp)
100052ac:	d9000917 	ldw	r4,36(sp)
100052b0:	0100140e 	bge	zero,r4,10005304 <_dtoa_r+0xa88>
100052b4:	d9800b17 	ldw	r6,44(sp)
100052b8:	3001e526 	beq	r6,zero,10005a50 <_dtoa_r+0x11d4>
100052bc:	05400e0e 	bge	zero,r21,100052f8 <_dtoa_r+0xa7c>
100052c0:	880b883a 	mov	r5,r17
100052c4:	8009883a 	mov	r4,r16
100052c8:	a80d883a 	mov	r6,r21
100052cc:	00085ac0 	call	100085ac <__pow5mult>
100052d0:	e00d883a 	mov	r6,fp
100052d4:	8009883a 	mov	r4,r16
100052d8:	100b883a 	mov	r5,r2
100052dc:	1023883a 	mov	r17,r2
100052e0:	000831c0 	call	1000831c <__multiply>
100052e4:	102f883a 	mov	r23,r2
100052e8:	e00b883a 	mov	r5,fp
100052ec:	8009883a 	mov	r4,r16
100052f0:	0007f600 	call	10007f60 <_Bfree>
100052f4:	b839883a 	mov	fp,r23
100052f8:	d8800917 	ldw	r2,36(sp)
100052fc:	154dc83a 	sub	r6,r2,r21
10005300:	3001281e 	bne	r6,zero,100057a4 <_dtoa_r+0xf28>
10005304:	05c00044 	movi	r23,1
10005308:	8009883a 	mov	r4,r16
1000530c:	b80b883a 	mov	r5,r23
10005310:	00082e00 	call	100082e0 <__i2b>
10005314:	d8c00a17 	ldw	r3,40(sp)
10005318:	102b883a 	mov	r21,r2
1000531c:	00c0310e 	bge	zero,r3,100053e4 <_dtoa_r+0xb68>
10005320:	8009883a 	mov	r4,r16
10005324:	100b883a 	mov	r5,r2
10005328:	180d883a 	mov	r6,r3
1000532c:	00085ac0 	call	100085ac <__pow5mult>
10005330:	d9000317 	ldw	r4,12(sp)
10005334:	102b883a 	mov	r21,r2
10005338:	b9011f0e 	bge	r23,r4,100057b8 <_dtoa_r+0xf3c>
1000533c:	0027883a 	mov	r19,zero
10005340:	a8800417 	ldw	r2,16(r21)
10005344:	10800104 	addi	r2,r2,4
10005348:	1085883a 	add	r2,r2,r2
1000534c:	1085883a 	add	r2,r2,r2
10005350:	a885883a 	add	r2,r21,r2
10005354:	11000017 	ldw	r4,0(r2)
10005358:	00081c80 	call	100081c8 <__hi0bits>
1000535c:	00c00804 	movi	r3,32
10005360:	1885c83a 	sub	r2,r3,r2
10005364:	00002506 	br	100053fc <_dtoa_r+0xb80>
10005368:	01800044 	movi	r6,1
1000536c:	d9800c15 	stw	r6,48(sp)
10005370:	003dec06 	br	10004b24 <__alt_data_end+0xf8004b24>
10005374:	d8c00817 	ldw	r3,32(sp)
10005378:	d9000517 	ldw	r4,20(sp)
1000537c:	d8000a15 	stw	zero,40(sp)
10005380:	1907c83a 	sub	r3,r3,r4
10005384:	010dc83a 	sub	r6,zero,r4
10005388:	d8c00815 	stw	r3,32(sp)
1000538c:	d9800915 	stw	r6,36(sp)
10005390:	003ded06 	br	10004b48 <__alt_data_end+0xf8004b48>
10005394:	05adc83a 	sub	r22,zero,r22
10005398:	dd800815 	stw	r22,32(sp)
1000539c:	002d883a 	mov	r22,zero
100053a0:	003de406 	br	10004b34 <__alt_data_end+0xf8004b34>
100053a4:	d9000517 	ldw	r4,20(sp)
100053a8:	000e9c40 	call	1000e9c4 <__floatsidf>
100053ac:	1009883a 	mov	r4,r2
100053b0:	180b883a 	mov	r5,r3
100053b4:	b00d883a 	mov	r6,r22
100053b8:	a80f883a 	mov	r7,r21
100053bc:	000d5bc0 	call	1000d5bc <__eqdf2>
100053c0:	103dc726 	beq	r2,zero,10004ae0 <__alt_data_end+0xf8004ae0>
100053c4:	d8800517 	ldw	r2,20(sp)
100053c8:	10bfffc4 	addi	r2,r2,-1
100053cc:	d8800515 	stw	r2,20(sp)
100053d0:	003dc306 	br	10004ae0 <__alt_data_end+0xf8004ae0>
100053d4:	dd400917 	ldw	r21,36(sp)
100053d8:	dd000817 	ldw	r20,32(sp)
100053dc:	0023883a 	mov	r17,zero
100053e0:	003fa906 	br	10005288 <__alt_data_end+0xf8005288>
100053e4:	d9800317 	ldw	r6,12(sp)
100053e8:	b981670e 	bge	r23,r6,10005988 <_dtoa_r+0x110c>
100053ec:	0027883a 	mov	r19,zero
100053f0:	d8c00a17 	ldw	r3,40(sp)
100053f4:	183fd21e 	bne	r3,zero,10005340 <__alt_data_end+0xf8005340>
100053f8:	00800044 	movi	r2,1
100053fc:	1585883a 	add	r2,r2,r22
10005400:	108007cc 	andi	r2,r2,31
10005404:	10005f26 	beq	r2,zero,10005584 <_dtoa_r+0xd08>
10005408:	00c00804 	movi	r3,32
1000540c:	1887c83a 	sub	r3,r3,r2
10005410:	01000104 	movi	r4,4
10005414:	20c2dd0e 	bge	r4,r3,10005f8c <_dtoa_r+0x1710>
10005418:	d9000817 	ldw	r4,32(sp)
1000541c:	00c00704 	movi	r3,28
10005420:	1885c83a 	sub	r2,r3,r2
10005424:	2089883a 	add	r4,r4,r2
10005428:	d9000815 	stw	r4,32(sp)
1000542c:	a0a9883a 	add	r20,r20,r2
10005430:	b0ad883a 	add	r22,r22,r2
10005434:	d8800817 	ldw	r2,32(sp)
10005438:	0080050e 	bge	zero,r2,10005450 <_dtoa_r+0xbd4>
1000543c:	e00b883a 	mov	r5,fp
10005440:	8009883a 	mov	r4,r16
10005444:	100d883a 	mov	r6,r2
10005448:	00086ec0 	call	100086ec <__lshift>
1000544c:	1039883a 	mov	fp,r2
10005450:	0580050e 	bge	zero,r22,10005468 <_dtoa_r+0xbec>
10005454:	a80b883a 	mov	r5,r21
10005458:	8009883a 	mov	r4,r16
1000545c:	b00d883a 	mov	r6,r22
10005460:	00086ec0 	call	100086ec <__lshift>
10005464:	102b883a 	mov	r21,r2
10005468:	d8c00c17 	ldw	r3,48(sp)
1000546c:	1801161e 	bne	r3,zero,100058c8 <_dtoa_r+0x104c>
10005470:	d8c00617 	ldw	r3,24(sp)
10005474:	00c12d0e 	bge	zero,r3,1000592c <_dtoa_r+0x10b0>
10005478:	d8c00b17 	ldw	r3,44(sp)
1000547c:	1800571e 	bne	r3,zero,100055dc <_dtoa_r+0xd60>
10005480:	dc800717 	ldw	r18,28(sp)
10005484:	dcc00617 	ldw	r19,24(sp)
10005488:	9029883a 	mov	r20,r18
1000548c:	00000206 	br	10005498 <_dtoa_r+0xc1c>
10005490:	0007f880 	call	10007f88 <__multadd>
10005494:	1039883a 	mov	fp,r2
10005498:	e009883a 	mov	r4,fp
1000549c:	a80b883a 	mov	r5,r21
100054a0:	00046540 	call	10004654 <quorem>
100054a4:	10800c04 	addi	r2,r2,48
100054a8:	90800005 	stb	r2,0(r18)
100054ac:	94800044 	addi	r18,r18,1
100054b0:	9507c83a 	sub	r3,r18,r20
100054b4:	8009883a 	mov	r4,r16
100054b8:	e00b883a 	mov	r5,fp
100054bc:	01800284 	movi	r6,10
100054c0:	000f883a 	mov	r7,zero
100054c4:	1cfff216 	blt	r3,r19,10005490 <__alt_data_end+0xf8005490>
100054c8:	1011883a 	mov	r8,r2
100054cc:	d8800617 	ldw	r2,24(sp)
100054d0:	00822e0e 	bge	zero,r2,10005d8c <_dtoa_r+0x1510>
100054d4:	d9000717 	ldw	r4,28(sp)
100054d8:	0025883a 	mov	r18,zero
100054dc:	20af883a 	add	r23,r4,r2
100054e0:	e00b883a 	mov	r5,fp
100054e4:	01800044 	movi	r6,1
100054e8:	8009883a 	mov	r4,r16
100054ec:	da001715 	stw	r8,92(sp)
100054f0:	00086ec0 	call	100086ec <__lshift>
100054f4:	1009883a 	mov	r4,r2
100054f8:	a80b883a 	mov	r5,r21
100054fc:	1039883a 	mov	fp,r2
10005500:	00088340 	call	10008834 <__mcmp>
10005504:	da001717 	ldw	r8,92(sp)
10005508:	00816e0e 	bge	zero,r2,10005ac4 <_dtoa_r+0x1248>
1000550c:	b93fffc3 	ldbu	r4,-1(r23)
10005510:	b8bfffc4 	addi	r2,r23,-1
10005514:	1007883a 	mov	r3,r2
10005518:	01800e44 	movi	r6,57
1000551c:	d9c00717 	ldw	r7,28(sp)
10005520:	00000506 	br	10005538 <_dtoa_r+0xcbc>
10005524:	18ffffc4 	addi	r3,r3,-1
10005528:	38811926 	beq	r7,r2,10005990 <_dtoa_r+0x1114>
1000552c:	19000003 	ldbu	r4,0(r3)
10005530:	102f883a 	mov	r23,r2
10005534:	10bfffc4 	addi	r2,r2,-1
10005538:	21403fcc 	andi	r5,r4,255
1000553c:	2940201c 	xori	r5,r5,128
10005540:	297fe004 	addi	r5,r5,-128
10005544:	29bff726 	beq	r5,r6,10005524 <__alt_data_end+0xf8005524>
10005548:	21000044 	addi	r4,r4,1
1000554c:	11000005 	stb	r4,0(r2)
10005550:	8009883a 	mov	r4,r16
10005554:	a80b883a 	mov	r5,r21
10005558:	0007f600 	call	10007f60 <_Bfree>
1000555c:	883e7526 	beq	r17,zero,10004f34 <__alt_data_end+0xf8004f34>
10005560:	90000426 	beq	r18,zero,10005574 <_dtoa_r+0xcf8>
10005564:	94400326 	beq	r18,r17,10005574 <_dtoa_r+0xcf8>
10005568:	8009883a 	mov	r4,r16
1000556c:	900b883a 	mov	r5,r18
10005570:	0007f600 	call	10007f60 <_Bfree>
10005574:	8009883a 	mov	r4,r16
10005578:	880b883a 	mov	r5,r17
1000557c:	0007f600 	call	10007f60 <_Bfree>
10005580:	003e6c06 	br	10004f34 <__alt_data_end+0xf8004f34>
10005584:	00800704 	movi	r2,28
10005588:	d9800817 	ldw	r6,32(sp)
1000558c:	a0a9883a 	add	r20,r20,r2
10005590:	b0ad883a 	add	r22,r22,r2
10005594:	308d883a 	add	r6,r6,r2
10005598:	d9800815 	stw	r6,32(sp)
1000559c:	003fa506 	br	10005434 <__alt_data_end+0xf8005434>
100055a0:	013efb84 	movi	r4,-1042
100055a4:	246bc83a 	sub	r21,r4,r17
100055a8:	9548983a 	sll	r4,r18,r21
100055ac:	003d1806 	br	10004a10 <__alt_data_end+0xf8004a10>
100055b0:	d8000c15 	stw	zero,48(sp)
100055b4:	003d5b06 	br	10004b24 <__alt_data_end+0xf8004b24>
100055b8:	880b883a 	mov	r5,r17
100055bc:	8009883a 	mov	r4,r16
100055c0:	01800284 	movi	r6,10
100055c4:	000f883a 	mov	r7,zero
100055c8:	0007f880 	call	10007f88 <__multadd>
100055cc:	1023883a 	mov	r17,r2
100055d0:	d8800d17 	ldw	r2,52(sp)
100055d4:	0082550e 	bge	zero,r2,10005f2c <_dtoa_r+0x16b0>
100055d8:	d8800615 	stw	r2,24(sp)
100055dc:	0500050e 	bge	zero,r20,100055f4 <_dtoa_r+0xd78>
100055e0:	880b883a 	mov	r5,r17
100055e4:	8009883a 	mov	r4,r16
100055e8:	a00d883a 	mov	r6,r20
100055ec:	00086ec0 	call	100086ec <__lshift>
100055f0:	1023883a 	mov	r17,r2
100055f4:	98016a1e 	bne	r19,zero,10005ba0 <_dtoa_r+0x1324>
100055f8:	8829883a 	mov	r20,r17
100055fc:	d9000617 	ldw	r4,24(sp)
10005600:	dcc00717 	ldw	r19,28(sp)
10005604:	9480004c 	andi	r18,r18,1
10005608:	20bfffc4 	addi	r2,r4,-1
1000560c:	9885883a 	add	r2,r19,r2
10005610:	d8800415 	stw	r2,16(sp)
10005614:	dc800615 	stw	r18,24(sp)
10005618:	e009883a 	mov	r4,fp
1000561c:	a80b883a 	mov	r5,r21
10005620:	00046540 	call	10004654 <quorem>
10005624:	e009883a 	mov	r4,fp
10005628:	880b883a 	mov	r5,r17
1000562c:	102f883a 	mov	r23,r2
10005630:	00088340 	call	10008834 <__mcmp>
10005634:	8009883a 	mov	r4,r16
10005638:	a80b883a 	mov	r5,r21
1000563c:	a00d883a 	mov	r6,r20
10005640:	102d883a 	mov	r22,r2
10005644:	00088940 	call	10008894 <__mdiff>
10005648:	1007883a 	mov	r3,r2
1000564c:	10800317 	ldw	r2,12(r2)
10005650:	bc800c04 	addi	r18,r23,48
10005654:	1000971e 	bne	r2,zero,100058b4 <_dtoa_r+0x1038>
10005658:	180b883a 	mov	r5,r3
1000565c:	e009883a 	mov	r4,fp
10005660:	d8c01515 	stw	r3,84(sp)
10005664:	00088340 	call	10008834 <__mcmp>
10005668:	d8c01517 	ldw	r3,84(sp)
1000566c:	8009883a 	mov	r4,r16
10005670:	d8801515 	stw	r2,84(sp)
10005674:	180b883a 	mov	r5,r3
10005678:	0007f600 	call	10007f60 <_Bfree>
1000567c:	d8801517 	ldw	r2,84(sp)
10005680:	1000041e 	bne	r2,zero,10005694 <_dtoa_r+0xe18>
10005684:	d9800317 	ldw	r6,12(sp)
10005688:	3000021e 	bne	r6,zero,10005694 <_dtoa_r+0xe18>
1000568c:	d8c00617 	ldw	r3,24(sp)
10005690:	18007626 	beq	r3,zero,1000586c <_dtoa_r+0xff0>
10005694:	b0005b16 	blt	r22,zero,10005804 <_dtoa_r+0xf88>
10005698:	b000041e 	bne	r22,zero,100056ac <_dtoa_r+0xe30>
1000569c:	d9000317 	ldw	r4,12(sp)
100056a0:	2000021e 	bne	r4,zero,100056ac <_dtoa_r+0xe30>
100056a4:	d8c00617 	ldw	r3,24(sp)
100056a8:	18005626 	beq	r3,zero,10005804 <_dtoa_r+0xf88>
100056ac:	00814d16 	blt	zero,r2,10005be4 <_dtoa_r+0x1368>
100056b0:	d8c00417 	ldw	r3,16(sp)
100056b4:	9d800044 	addi	r22,r19,1
100056b8:	9c800005 	stb	r18,0(r19)
100056bc:	b02f883a 	mov	r23,r22
100056c0:	98c14c26 	beq	r19,r3,10005bf4 <_dtoa_r+0x1378>
100056c4:	e00b883a 	mov	r5,fp
100056c8:	8009883a 	mov	r4,r16
100056cc:	01800284 	movi	r6,10
100056d0:	000f883a 	mov	r7,zero
100056d4:	0007f880 	call	10007f88 <__multadd>
100056d8:	1039883a 	mov	fp,r2
100056dc:	8d006d26 	beq	r17,r20,10005894 <_dtoa_r+0x1018>
100056e0:	880b883a 	mov	r5,r17
100056e4:	01800284 	movi	r6,10
100056e8:	000f883a 	mov	r7,zero
100056ec:	8009883a 	mov	r4,r16
100056f0:	0007f880 	call	10007f88 <__multadd>
100056f4:	a00b883a 	mov	r5,r20
100056f8:	8009883a 	mov	r4,r16
100056fc:	01800284 	movi	r6,10
10005700:	000f883a 	mov	r7,zero
10005704:	1023883a 	mov	r17,r2
10005708:	0007f880 	call	10007f88 <__multadd>
1000570c:	1029883a 	mov	r20,r2
10005710:	b027883a 	mov	r19,r22
10005714:	003fc006 	br	10005618 <__alt_data_end+0xf8005618>
10005718:	a005883a 	mov	r2,r20
1000571c:	003ede06 	br	10005298 <__alt_data_end+0xf8005298>
10005720:	01000044 	movi	r4,1
10005724:	d9000b15 	stw	r4,44(sp)
10005728:	d9802217 	ldw	r6,136(sp)
1000572c:	0180dc0e 	bge	zero,r6,10005aa0 <_dtoa_r+0x1224>
10005730:	3023883a 	mov	r17,r6
10005734:	d9800d15 	stw	r6,52(sp)
10005738:	d9800615 	stw	r6,24(sp)
1000573c:	003d1e06 	br	10004bb8 <__alt_data_end+0xf8004bb8>
10005740:	d8800617 	ldw	r2,24(sp)
10005744:	00be3716 	blt	zero,r2,10005024 <__alt_data_end+0xf8005024>
10005748:	1000be1e 	bne	r2,zero,10005a44 <_dtoa_r+0x11c8>
1000574c:	8809883a 	mov	r4,r17
10005750:	a00b883a 	mov	r5,r20
10005754:	000d883a 	mov	r6,zero
10005758:	01d00534 	movhi	r7,16404
1000575c:	000d8000 	call	1000d800 <__muldf3>
10005760:	1009883a 	mov	r4,r2
10005764:	180b883a 	mov	r5,r3
10005768:	900d883a 	mov	r6,r18
1000576c:	980f883a 	mov	r7,r19
10005770:	000d6400 	call	1000d640 <__gedf2>
10005774:	002b883a 	mov	r21,zero
10005778:	0023883a 	mov	r17,zero
1000577c:	10007a16 	blt	r2,zero,10005968 <_dtoa_r+0x10ec>
10005780:	d9002217 	ldw	r4,136(sp)
10005784:	ddc00717 	ldw	r23,28(sp)
10005788:	0108303a 	nor	r4,zero,r4
1000578c:	d9000515 	stw	r4,20(sp)
10005790:	8009883a 	mov	r4,r16
10005794:	a80b883a 	mov	r5,r21
10005798:	0007f600 	call	10007f60 <_Bfree>
1000579c:	883f751e 	bne	r17,zero,10005574 <__alt_data_end+0xf8005574>
100057a0:	003de406 	br	10004f34 <__alt_data_end+0xf8004f34>
100057a4:	e00b883a 	mov	r5,fp
100057a8:	8009883a 	mov	r4,r16
100057ac:	00085ac0 	call	100085ac <__pow5mult>
100057b0:	1039883a 	mov	fp,r2
100057b4:	003ed306 	br	10005304 <__alt_data_end+0xf8005304>
100057b8:	903ee01e 	bne	r18,zero,1000533c <__alt_data_end+0xf800533c>
100057bc:	00800434 	movhi	r2,16
100057c0:	10bfffc4 	addi	r2,r2,-1
100057c4:	9884703a 	and	r2,r19,r2
100057c8:	103f081e 	bne	r2,zero,100053ec <__alt_data_end+0xf80053ec>
100057cc:	9cdffc2c 	andhi	r19,r19,32752
100057d0:	983f0626 	beq	r19,zero,100053ec <__alt_data_end+0xf80053ec>
100057d4:	d8800817 	ldw	r2,32(sp)
100057d8:	b5800044 	addi	r22,r22,1
100057dc:	04c00044 	movi	r19,1
100057e0:	10800044 	addi	r2,r2,1
100057e4:	d8800815 	stw	r2,32(sp)
100057e8:	003f0106 	br	100053f0 <__alt_data_end+0xf80053f0>
100057ec:	d9800f17 	ldw	r6,60(sp)
100057f0:	30016826 	beq	r6,zero,10005d94 <_dtoa_r+0x1518>
100057f4:	10810cc4 	addi	r2,r2,1075
100057f8:	dd400917 	ldw	r21,36(sp)
100057fc:	dd000817 	ldw	r20,32(sp)
10005800:	003e9906 	br	10005268 <__alt_data_end+0xf8005268>
10005804:	9011883a 	mov	r8,r18
10005808:	4007883a 	mov	r3,r8
1000580c:	e02d883a 	mov	r22,fp
10005810:	0080100e 	bge	zero,r2,10005854 <_dtoa_r+0xfd8>
10005814:	01800044 	movi	r6,1
10005818:	8009883a 	mov	r4,r16
1000581c:	e00b883a 	mov	r5,fp
10005820:	da001515 	stw	r8,84(sp)
10005824:	da001715 	stw	r8,92(sp)
10005828:	00086ec0 	call	100086ec <__lshift>
1000582c:	1009883a 	mov	r4,r2
10005830:	a80b883a 	mov	r5,r21
10005834:	102d883a 	mov	r22,r2
10005838:	00088340 	call	10008834 <__mcmp>
1000583c:	d8c01517 	ldw	r3,84(sp)
10005840:	da001717 	ldw	r8,92(sp)
10005844:	0081a50e 	bge	zero,r2,10005edc <_dtoa_r+0x1660>
10005848:	00800e44 	movi	r2,57
1000584c:	40817b26 	beq	r8,r2,10005e3c <_dtoa_r+0x15c0>
10005850:	40c00044 	addi	r3,r8,1
10005854:	8825883a 	mov	r18,r17
10005858:	9dc00044 	addi	r23,r19,1
1000585c:	98c00005 	stb	r3,0(r19)
10005860:	a023883a 	mov	r17,r20
10005864:	b039883a 	mov	fp,r22
10005868:	003f3906 	br	10005550 <__alt_data_end+0xf8005550>
1000586c:	00800e44 	movi	r2,57
10005870:	9011883a 	mov	r8,r18
10005874:	90817226 	beq	r18,r2,10005e40 <_dtoa_r+0x15c4>
10005878:	0580010e 	bge	zero,r22,10005880 <_dtoa_r+0x1004>
1000587c:	ba000c44 	addi	r8,r23,49
10005880:	8825883a 	mov	r18,r17
10005884:	9dc00044 	addi	r23,r19,1
10005888:	9a000005 	stb	r8,0(r19)
1000588c:	a023883a 	mov	r17,r20
10005890:	003f2f06 	br	10005550 <__alt_data_end+0xf8005550>
10005894:	880b883a 	mov	r5,r17
10005898:	8009883a 	mov	r4,r16
1000589c:	01800284 	movi	r6,10
100058a0:	000f883a 	mov	r7,zero
100058a4:	0007f880 	call	10007f88 <__multadd>
100058a8:	1023883a 	mov	r17,r2
100058ac:	1029883a 	mov	r20,r2
100058b0:	003f9706 	br	10005710 <__alt_data_end+0xf8005710>
100058b4:	8009883a 	mov	r4,r16
100058b8:	180b883a 	mov	r5,r3
100058bc:	0007f600 	call	10007f60 <_Bfree>
100058c0:	00800044 	movi	r2,1
100058c4:	003f7306 	br	10005694 <__alt_data_end+0xf8005694>
100058c8:	e009883a 	mov	r4,fp
100058cc:	a80b883a 	mov	r5,r21
100058d0:	00088340 	call	10008834 <__mcmp>
100058d4:	103ee60e 	bge	r2,zero,10005470 <__alt_data_end+0xf8005470>
100058d8:	8009883a 	mov	r4,r16
100058dc:	e00b883a 	mov	r5,fp
100058e0:	01800284 	movi	r6,10
100058e4:	000f883a 	mov	r7,zero
100058e8:	0007f880 	call	10007f88 <__multadd>
100058ec:	d9000517 	ldw	r4,20(sp)
100058f0:	d9800b17 	ldw	r6,44(sp)
100058f4:	1039883a 	mov	fp,r2
100058f8:	213fffc4 	addi	r4,r4,-1
100058fc:	d9000515 	stw	r4,20(sp)
10005900:	303f2d1e 	bne	r6,zero,100055b8 <__alt_data_end+0xf80055b8>
10005904:	d9000d17 	ldw	r4,52(sp)
10005908:	0101780e 	bge	zero,r4,10005eec <_dtoa_r+0x1670>
1000590c:	d9000615 	stw	r4,24(sp)
10005910:	003edb06 	br	10005480 <__alt_data_end+0xf8005480>
10005914:	00800084 	movi	r2,2
10005918:	30818e1e 	bne	r6,r2,10005f54 <_dtoa_r+0x16d8>
1000591c:	d8000b15 	stw	zero,44(sp)
10005920:	003f8106 	br	10005728 <__alt_data_end+0xf8005728>
10005924:	d8800717 	ldw	r2,28(sp)
10005928:	003c0306 	br	10004938 <__alt_data_end+0xf8004938>
1000592c:	d9000317 	ldw	r4,12(sp)
10005930:	00800084 	movi	r2,2
10005934:	113ed00e 	bge	r2,r4,10005478 <__alt_data_end+0xf8005478>
10005938:	d8c00617 	ldw	r3,24(sp)
1000593c:	183f901e 	bne	r3,zero,10005780 <__alt_data_end+0xf8005780>
10005940:	a80b883a 	mov	r5,r21
10005944:	8009883a 	mov	r4,r16
10005948:	01800144 	movi	r6,5
1000594c:	000f883a 	mov	r7,zero
10005950:	0007f880 	call	10007f88 <__multadd>
10005954:	e009883a 	mov	r4,fp
10005958:	100b883a 	mov	r5,r2
1000595c:	102b883a 	mov	r21,r2
10005960:	00088340 	call	10008834 <__mcmp>
10005964:	00bf860e 	bge	zero,r2,10005780 <__alt_data_end+0xf8005780>
10005968:	d9800717 	ldw	r6,28(sp)
1000596c:	00800c44 	movi	r2,49
10005970:	30800005 	stb	r2,0(r6)
10005974:	d8800517 	ldw	r2,20(sp)
10005978:	35c00044 	addi	r23,r6,1
1000597c:	10800044 	addi	r2,r2,1
10005980:	d8800515 	stw	r2,20(sp)
10005984:	003f8206 	br	10005790 <__alt_data_end+0xf8005790>
10005988:	903e981e 	bne	r18,zero,100053ec <__alt_data_end+0xf80053ec>
1000598c:	003f8b06 	br	100057bc <__alt_data_end+0xf80057bc>
10005990:	d9800517 	ldw	r6,20(sp)
10005994:	d8c00717 	ldw	r3,28(sp)
10005998:	00800c44 	movi	r2,49
1000599c:	31800044 	addi	r6,r6,1
100059a0:	d9800515 	stw	r6,20(sp)
100059a4:	18800005 	stb	r2,0(r3)
100059a8:	003ee906 	br	10005550 <__alt_data_end+0xf8005550>
100059ac:	dc000317 	ldw	r16,12(sp)
100059b0:	003d6006 	br	10004f34 <__alt_data_end+0xf8004f34>
100059b4:	8809883a 	mov	r4,r17
100059b8:	000e9c40 	call	1000e9c4 <__floatsidf>
100059bc:	a009883a 	mov	r4,r20
100059c0:	a80b883a 	mov	r5,r21
100059c4:	100d883a 	mov	r6,r2
100059c8:	180f883a 	mov	r7,r3
100059cc:	000d8000 	call	1000d800 <__muldf3>
100059d0:	1009883a 	mov	r4,r2
100059d4:	180b883a 	mov	r5,r3
100059d8:	000d883a 	mov	r6,zero
100059dc:	01d00734 	movhi	r7,16412
100059e0:	000c3a00 	call	1000c3a0 <__adddf3>
100059e4:	1023883a 	mov	r17,r2
100059e8:	00bf3034 	movhi	r2,64704
100059ec:	1885883a 	add	r2,r3,r2
100059f0:	d8800e15 	stw	r2,56(sp)
100059f4:	a009883a 	mov	r4,r20
100059f8:	a80b883a 	mov	r5,r21
100059fc:	000d883a 	mov	r6,zero
10005a00:	01d00534 	movhi	r7,16404
10005a04:	000e06c0 	call	1000e06c <__subdf3>
10005a08:	d9c00e17 	ldw	r7,56(sp)
10005a0c:	1009883a 	mov	r4,r2
10005a10:	180b883a 	mov	r5,r3
10005a14:	880d883a 	mov	r6,r17
10005a18:	102b883a 	mov	r21,r2
10005a1c:	1829883a 	mov	r20,r3
10005a20:	000d6400 	call	1000d640 <__gedf2>
10005a24:	00807716 	blt	zero,r2,10005c04 <_dtoa_r+0x1388>
10005a28:	d8800e17 	ldw	r2,56(sp)
10005a2c:	a809883a 	mov	r4,r21
10005a30:	a00b883a 	mov	r5,r20
10005a34:	11e0003c 	xorhi	r7,r2,32768
10005a38:	880d883a 	mov	r6,r17
10005a3c:	000d7200 	call	1000d720 <__ledf2>
10005a40:	103d6b0e 	bge	r2,zero,10004ff0 <__alt_data_end+0xf8004ff0>
10005a44:	002b883a 	mov	r21,zero
10005a48:	0023883a 	mov	r17,zero
10005a4c:	003f4c06 	br	10005780 <__alt_data_end+0xf8005780>
10005a50:	d9800917 	ldw	r6,36(sp)
10005a54:	e00b883a 	mov	r5,fp
10005a58:	8009883a 	mov	r4,r16
10005a5c:	00085ac0 	call	100085ac <__pow5mult>
10005a60:	1039883a 	mov	fp,r2
10005a64:	003e2706 	br	10005304 <__alt_data_end+0xf8005304>
10005a68:	d8000b15 	stw	zero,44(sp)
10005a6c:	003c4906 	br	10004b94 <__alt_data_end+0xf8004b94>
10005a70:	d9000917 	ldw	r4,36(sp)
10005a74:	d9800a17 	ldw	r6,40(sp)
10005a78:	dd400915 	stw	r21,36(sp)
10005a7c:	a905c83a 	sub	r2,r21,r4
10005a80:	308d883a 	add	r6,r6,r2
10005a84:	d9800a15 	stw	r6,40(sp)
10005a88:	002b883a 	mov	r21,zero
10005a8c:	003df206 	br	10005258 <__alt_data_end+0xf8005258>
10005a90:	dc800e15 	stw	r18,56(sp)
10005a94:	982b883a 	mov	r21,r19
10005a98:	04400084 	movi	r17,2
10005a9c:	003c7406 	br	10004c70 <__alt_data_end+0xf8004c70>
10005aa0:	04400044 	movi	r17,1
10005aa4:	dc400d15 	stw	r17,52(sp)
10005aa8:	dc400615 	stw	r17,24(sp)
10005aac:	dc402215 	stw	r17,136(sp)
10005ab0:	80001115 	stw	zero,68(r16)
10005ab4:	000b883a 	mov	r5,zero
10005ab8:	003c4a06 	br	10004be4 <__alt_data_end+0xf8004be4>
10005abc:	3023883a 	mov	r17,r6
10005ac0:	003ffb06 	br	10005ab0 <__alt_data_end+0xf8005ab0>
10005ac4:	1000021e 	bne	r2,zero,10005ad0 <_dtoa_r+0x1254>
10005ac8:	4200004c 	andi	r8,r8,1
10005acc:	403e8f1e 	bne	r8,zero,1000550c <__alt_data_end+0xf800550c>
10005ad0:	01000c04 	movi	r4,48
10005ad4:	00000106 	br	10005adc <_dtoa_r+0x1260>
10005ad8:	102f883a 	mov	r23,r2
10005adc:	b8bfffc4 	addi	r2,r23,-1
10005ae0:	10c00007 	ldb	r3,0(r2)
10005ae4:	193ffc26 	beq	r3,r4,10005ad8 <__alt_data_end+0xf8005ad8>
10005ae8:	003e9906 	br	10005550 <__alt_data_end+0xf8005550>
10005aec:	d9000517 	ldw	r4,20(sp)
10005af0:	012fc83a 	sub	r23,zero,r4
10005af4:	b800ad26 	beq	r23,zero,10005dac <_dtoa_r+0x1530>
10005af8:	b88003cc 	andi	r2,r23,15
10005afc:	100490fa 	slli	r2,r2,3
10005b00:	00c40074 	movhi	r3,4097
10005b04:	18c73604 	addi	r3,r3,7384
10005b08:	1885883a 	add	r2,r3,r2
10005b0c:	11800017 	ldw	r6,0(r2)
10005b10:	11c00117 	ldw	r7,4(r2)
10005b14:	b82fd13a 	srai	r23,r23,4
10005b18:	9009883a 	mov	r4,r18
10005b1c:	980b883a 	mov	r5,r19
10005b20:	000d8000 	call	1000d800 <__muldf3>
10005b24:	1029883a 	mov	r20,r2
10005b28:	182b883a 	mov	r21,r3
10005b2c:	b800f426 	beq	r23,zero,10005f00 <_dtoa_r+0x1684>
10005b30:	02040074 	movhi	r8,4097
10005b34:	42072c04 	addi	r8,r8,7344
10005b38:	8029883a 	mov	r20,r16
10005b3c:	04400084 	movi	r17,2
10005b40:	4021883a 	mov	r16,r8
10005b44:	b980004c 	andi	r6,r23,1
10005b48:	1009883a 	mov	r4,r2
10005b4c:	b82fd07a 	srai	r23,r23,1
10005b50:	180b883a 	mov	r5,r3
10005b54:	30000426 	beq	r6,zero,10005b68 <_dtoa_r+0x12ec>
10005b58:	81800017 	ldw	r6,0(r16)
10005b5c:	81c00117 	ldw	r7,4(r16)
10005b60:	8c400044 	addi	r17,r17,1
10005b64:	000d8000 	call	1000d800 <__muldf3>
10005b68:	84000204 	addi	r16,r16,8
10005b6c:	b83ff51e 	bne	r23,zero,10005b44 <__alt_data_end+0xf8005b44>
10005b70:	a021883a 	mov	r16,r20
10005b74:	182b883a 	mov	r21,r3
10005b78:	1029883a 	mov	r20,r2
10005b7c:	003c5506 	br	10004cd4 <__alt_data_end+0xf8004cd4>
10005b80:	d9800517 	ldw	r6,20(sp)
10005b84:	d9000717 	ldw	r4,28(sp)
10005b88:	00c00c04 	movi	r3,48
10005b8c:	31800044 	addi	r6,r6,1
10005b90:	d9800515 	stw	r6,20(sp)
10005b94:	20c00005 	stb	r3,0(r4)
10005b98:	02000c44 	movi	r8,49
10005b9c:	003da206 	br	10005228 <__alt_data_end+0xf8005228>
10005ba0:	89400117 	ldw	r5,4(r17)
10005ba4:	8009883a 	mov	r4,r16
10005ba8:	0007eb80 	call	10007eb8 <_Balloc>
10005bac:	89800417 	ldw	r6,16(r17)
10005bb0:	11000304 	addi	r4,r2,12
10005bb4:	89400304 	addi	r5,r17,12
10005bb8:	31800084 	addi	r6,r6,2
10005bbc:	318d883a 	add	r6,r6,r6
10005bc0:	318d883a 	add	r6,r6,r6
10005bc4:	1027883a 	mov	r19,r2
10005bc8:	0007b000 	call	10007b00 <memcpy>
10005bcc:	8009883a 	mov	r4,r16
10005bd0:	980b883a 	mov	r5,r19
10005bd4:	01800044 	movi	r6,1
10005bd8:	00086ec0 	call	100086ec <__lshift>
10005bdc:	1029883a 	mov	r20,r2
10005be0:	003e8606 	br	100055fc <__alt_data_end+0xf80055fc>
10005be4:	00800e44 	movi	r2,57
10005be8:	90809526 	beq	r18,r2,10005e40 <_dtoa_r+0x15c4>
10005bec:	92000044 	addi	r8,r18,1
10005bf0:	003f2306 	br	10005880 <__alt_data_end+0xf8005880>
10005bf4:	9011883a 	mov	r8,r18
10005bf8:	8825883a 	mov	r18,r17
10005bfc:	a023883a 	mov	r17,r20
10005c00:	003e3706 	br	100054e0 <__alt_data_end+0xf80054e0>
10005c04:	002b883a 	mov	r21,zero
10005c08:	0023883a 	mov	r17,zero
10005c0c:	003f5606 	br	10005968 <__alt_data_end+0xf8005968>
10005c10:	51bfffc4 	addi	r6,r10,-1
10005c14:	300490fa 	slli	r2,r6,3
10005c18:	00c40074 	movhi	r3,4097
10005c1c:	18c73604 	addi	r3,r3,7384
10005c20:	1885883a 	add	r2,r3,r2
10005c24:	d9c00e17 	ldw	r7,56(sp)
10005c28:	11000017 	ldw	r4,0(r2)
10005c2c:	11400117 	ldw	r5,4(r2)
10005c30:	d8800717 	ldw	r2,28(sp)
10005c34:	d9801015 	stw	r6,64(sp)
10005c38:	880d883a 	mov	r6,r17
10005c3c:	da801615 	stw	r10,88(sp)
10005c40:	15c00044 	addi	r23,r2,1
10005c44:	000d8000 	call	1000d800 <__muldf3>
10005c48:	a80b883a 	mov	r5,r21
10005c4c:	a009883a 	mov	r4,r20
10005c50:	d8c01115 	stw	r3,68(sp)
10005c54:	d8800e15 	stw	r2,56(sp)
10005c58:	000e93c0 	call	1000e93c <__fixdfsi>
10005c5c:	1009883a 	mov	r4,r2
10005c60:	1023883a 	mov	r17,r2
10005c64:	000e9c40 	call	1000e9c4 <__floatsidf>
10005c68:	a009883a 	mov	r4,r20
10005c6c:	a80b883a 	mov	r5,r21
10005c70:	100d883a 	mov	r6,r2
10005c74:	180f883a 	mov	r7,r3
10005c78:	000e06c0 	call	1000e06c <__subdf3>
10005c7c:	1813883a 	mov	r9,r3
10005c80:	d8c00717 	ldw	r3,28(sp)
10005c84:	8c400c04 	addi	r17,r17,48
10005c88:	1011883a 	mov	r8,r2
10005c8c:	1c400005 	stb	r17,0(r3)
10005c90:	da801617 	ldw	r10,88(sp)
10005c94:	00800044 	movi	r2,1
10005c98:	50802326 	beq	r10,r2,10005d28 <_dtoa_r+0x14ac>
10005c9c:	d8800717 	ldw	r2,28(sp)
10005ca0:	b82b883a 	mov	r21,r23
10005ca4:	dc001315 	stw	r16,76(sp)
10005ca8:	12a9883a 	add	r20,r2,r10
10005cac:	4807883a 	mov	r3,r9
10005cb0:	4005883a 	mov	r2,r8
10005cb4:	dc801415 	stw	r18,80(sp)
10005cb8:	000d883a 	mov	r6,zero
10005cbc:	01d00934 	movhi	r7,16420
10005cc0:	1009883a 	mov	r4,r2
10005cc4:	180b883a 	mov	r5,r3
10005cc8:	000d8000 	call	1000d800 <__muldf3>
10005ccc:	180b883a 	mov	r5,r3
10005cd0:	1009883a 	mov	r4,r2
10005cd4:	1821883a 	mov	r16,r3
10005cd8:	1025883a 	mov	r18,r2
10005cdc:	000e93c0 	call	1000e93c <__fixdfsi>
10005ce0:	1009883a 	mov	r4,r2
10005ce4:	1023883a 	mov	r17,r2
10005ce8:	000e9c40 	call	1000e9c4 <__floatsidf>
10005cec:	9009883a 	mov	r4,r18
10005cf0:	800b883a 	mov	r5,r16
10005cf4:	100d883a 	mov	r6,r2
10005cf8:	180f883a 	mov	r7,r3
10005cfc:	8c400c04 	addi	r17,r17,48
10005d00:	000e06c0 	call	1000e06c <__subdf3>
10005d04:	ad400044 	addi	r21,r21,1
10005d08:	ac7fffc5 	stb	r17,-1(r21)
10005d0c:	ad3fea1e 	bne	r21,r20,10005cb8 <__alt_data_end+0xf8005cb8>
10005d10:	1813883a 	mov	r9,r3
10005d14:	d8c01017 	ldw	r3,64(sp)
10005d18:	dc001317 	ldw	r16,76(sp)
10005d1c:	dc801417 	ldw	r18,80(sp)
10005d20:	1011883a 	mov	r8,r2
10005d24:	b8ef883a 	add	r23,r23,r3
10005d28:	d9000e17 	ldw	r4,56(sp)
10005d2c:	d9401117 	ldw	r5,68(sp)
10005d30:	000d883a 	mov	r6,zero
10005d34:	01cff834 	movhi	r7,16352
10005d38:	da001715 	stw	r8,92(sp)
10005d3c:	da401515 	stw	r9,84(sp)
10005d40:	000c3a00 	call	1000c3a0 <__adddf3>
10005d44:	da001717 	ldw	r8,92(sp)
10005d48:	da401517 	ldw	r9,84(sp)
10005d4c:	1009883a 	mov	r4,r2
10005d50:	400d883a 	mov	r6,r8
10005d54:	480f883a 	mov	r7,r9
10005d58:	180b883a 	mov	r5,r3
10005d5c:	000d7200 	call	1000d720 <__ledf2>
10005d60:	da001717 	ldw	r8,92(sp)
10005d64:	da401517 	ldw	r9,84(sp)
10005d68:	10003b0e 	bge	r2,zero,10005e58 <_dtoa_r+0x15dc>
10005d6c:	d9001217 	ldw	r4,72(sp)
10005d70:	bd7fffc3 	ldbu	r21,-1(r23)
10005d74:	d9000515 	stw	r4,20(sp)
10005d78:	003d1c06 	br	100051ec <__alt_data_end+0xf80051ec>
10005d7c:	d8c00817 	ldw	r3,32(sp)
10005d80:	18a9c83a 	sub	r20,r3,r2
10005d84:	0005883a 	mov	r2,zero
10005d88:	003d3706 	br	10005268 <__alt_data_end+0xf8005268>
10005d8c:	00800044 	movi	r2,1
10005d90:	003dd006 	br	100054d4 <__alt_data_end+0xf80054d4>
10005d94:	d8c00217 	ldw	r3,8(sp)
10005d98:	00800d84 	movi	r2,54
10005d9c:	dd400917 	ldw	r21,36(sp)
10005da0:	10c5c83a 	sub	r2,r2,r3
10005da4:	dd000817 	ldw	r20,32(sp)
10005da8:	003d2f06 	br	10005268 <__alt_data_end+0xf8005268>
10005dac:	9029883a 	mov	r20,r18
10005db0:	982b883a 	mov	r21,r19
10005db4:	04400084 	movi	r17,2
10005db8:	003bc606 	br	10004cd4 <__alt_data_end+0xf8004cd4>
10005dbc:	d8800617 	ldw	r2,24(sp)
10005dc0:	103efc26 	beq	r2,zero,100059b4 <__alt_data_end+0xf80059b4>
10005dc4:	d8c00d17 	ldw	r3,52(sp)
10005dc8:	00fc890e 	bge	zero,r3,10004ff0 <__alt_data_end+0xf8004ff0>
10005dcc:	a80b883a 	mov	r5,r21
10005dd0:	a009883a 	mov	r4,r20
10005dd4:	000d883a 	mov	r6,zero
10005dd8:	01d00934 	movhi	r7,16420
10005ddc:	000d8000 	call	1000d800 <__muldf3>
10005de0:	89000044 	addi	r4,r17,1
10005de4:	1029883a 	mov	r20,r2
10005de8:	182b883a 	mov	r21,r3
10005dec:	000e9c40 	call	1000e9c4 <__floatsidf>
10005df0:	a009883a 	mov	r4,r20
10005df4:	a80b883a 	mov	r5,r21
10005df8:	100d883a 	mov	r6,r2
10005dfc:	180f883a 	mov	r7,r3
10005e00:	000d8000 	call	1000d800 <__muldf3>
10005e04:	1009883a 	mov	r4,r2
10005e08:	180b883a 	mov	r5,r3
10005e0c:	000d883a 	mov	r6,zero
10005e10:	01d00734 	movhi	r7,16412
10005e14:	000c3a00 	call	1000c3a0 <__adddf3>
10005e18:	d9000517 	ldw	r4,20(sp)
10005e1c:	1023883a 	mov	r17,r2
10005e20:	00bf3034 	movhi	r2,64704
10005e24:	213fffc4 	addi	r4,r4,-1
10005e28:	1885883a 	add	r2,r3,r2
10005e2c:	d9001215 	stw	r4,72(sp)
10005e30:	d8800e15 	stw	r2,56(sp)
10005e34:	da800d17 	ldw	r10,52(sp)
10005e38:	003bc306 	br	10004d48 <__alt_data_end+0xf8004d48>
10005e3c:	b039883a 	mov	fp,r22
10005e40:	01000e44 	movi	r4,57
10005e44:	8825883a 	mov	r18,r17
10005e48:	9dc00044 	addi	r23,r19,1
10005e4c:	99000005 	stb	r4,0(r19)
10005e50:	a023883a 	mov	r17,r20
10005e54:	003dae06 	br	10005510 <__alt_data_end+0xf8005510>
10005e58:	d9800e17 	ldw	r6,56(sp)
10005e5c:	d9c01117 	ldw	r7,68(sp)
10005e60:	0009883a 	mov	r4,zero
10005e64:	014ff834 	movhi	r5,16352
10005e68:	da001715 	stw	r8,92(sp)
10005e6c:	da401515 	stw	r9,84(sp)
10005e70:	000e06c0 	call	1000e06c <__subdf3>
10005e74:	da001717 	ldw	r8,92(sp)
10005e78:	da401517 	ldw	r9,84(sp)
10005e7c:	1009883a 	mov	r4,r2
10005e80:	180b883a 	mov	r5,r3
10005e84:	400d883a 	mov	r6,r8
10005e88:	480f883a 	mov	r7,r9
10005e8c:	000d6400 	call	1000d640 <__gedf2>
10005e90:	00bc570e 	bge	zero,r2,10004ff0 <__alt_data_end+0xf8004ff0>
10005e94:	01000c04 	movi	r4,48
10005e98:	00000106 	br	10005ea0 <_dtoa_r+0x1624>
10005e9c:	102f883a 	mov	r23,r2
10005ea0:	b8bfffc4 	addi	r2,r23,-1
10005ea4:	10c00007 	ldb	r3,0(r2)
10005ea8:	193ffc26 	beq	r3,r4,10005e9c <__alt_data_end+0xf8005e9c>
10005eac:	d9801217 	ldw	r6,72(sp)
10005eb0:	d9800515 	stw	r6,20(sp)
10005eb4:	003c1f06 	br	10004f34 <__alt_data_end+0xf8004f34>
10005eb8:	d8801217 	ldw	r2,72(sp)
10005ebc:	dc001117 	ldw	r16,68(sp)
10005ec0:	d8800515 	stw	r2,20(sp)
10005ec4:	003cc906 	br	100051ec <__alt_data_end+0xf80051ec>
10005ec8:	dd801317 	ldw	r22,76(sp)
10005ecc:	dc001117 	ldw	r16,68(sp)
10005ed0:	dcc01417 	ldw	r19,80(sp)
10005ed4:	dc801017 	ldw	r18,64(sp)
10005ed8:	003c4506 	br	10004ff0 <__alt_data_end+0xf8004ff0>
10005edc:	103e5d1e 	bne	r2,zero,10005854 <__alt_data_end+0xf8005854>
10005ee0:	4080004c 	andi	r2,r8,1
10005ee4:	103e5b26 	beq	r2,zero,10005854 <__alt_data_end+0xf8005854>
10005ee8:	003e5706 	br	10005848 <__alt_data_end+0xf8005848>
10005eec:	d8c00317 	ldw	r3,12(sp)
10005ef0:	00800084 	movi	r2,2
10005ef4:	10c00a16 	blt	r2,r3,10005f20 <_dtoa_r+0x16a4>
10005ef8:	d9000d17 	ldw	r4,52(sp)
10005efc:	003e8306 	br	1000590c <__alt_data_end+0xf800590c>
10005f00:	04400084 	movi	r17,2
10005f04:	003b7306 	br	10004cd4 <__alt_data_end+0xf8004cd4>
10005f08:	d9801217 	ldw	r6,72(sp)
10005f0c:	d9800515 	stw	r6,20(sp)
10005f10:	003cb606 	br	100051ec <__alt_data_end+0xf80051ec>
10005f14:	d9001217 	ldw	r4,72(sp)
10005f18:	d9000515 	stw	r4,20(sp)
10005f1c:	003c0506 	br	10004f34 <__alt_data_end+0xf8004f34>
10005f20:	d9800d17 	ldw	r6,52(sp)
10005f24:	d9800615 	stw	r6,24(sp)
10005f28:	003e8306 	br	10005938 <__alt_data_end+0xf8005938>
10005f2c:	d9800317 	ldw	r6,12(sp)
10005f30:	00800084 	movi	r2,2
10005f34:	11800216 	blt	r2,r6,10005f40 <_dtoa_r+0x16c4>
10005f38:	d8800d17 	ldw	r2,52(sp)
10005f3c:	003da606 	br	100055d8 <__alt_data_end+0xf80055d8>
10005f40:	d8800d17 	ldw	r2,52(sp)
10005f44:	d8800615 	stw	r2,24(sp)
10005f48:	003e7b06 	br	10005938 <__alt_data_end+0xf8005938>
10005f4c:	05000044 	movi	r20,1
10005f50:	003b0506 	br	10004b68 <__alt_data_end+0xf8004b68>
10005f54:	8009883a 	mov	r4,r16
10005f58:	80001115 	stw	zero,68(r16)
10005f5c:	000b883a 	mov	r5,zero
10005f60:	0007eb80 	call	10007eb8 <_Balloc>
10005f64:	d8800715 	stw	r2,28(sp)
10005f68:	d8c00717 	ldw	r3,28(sp)
10005f6c:	00bfffc4 	movi	r2,-1
10005f70:	01000044 	movi	r4,1
10005f74:	d8800615 	stw	r2,24(sp)
10005f78:	80c01015 	stw	r3,64(r16)
10005f7c:	d9000b15 	stw	r4,44(sp)
10005f80:	d8002215 	stw	zero,136(sp)
10005f84:	d8800d15 	stw	r2,52(sp)
10005f88:	003c1906 	br	10004ff0 <__alt_data_end+0xf8004ff0>
10005f8c:	193d2926 	beq	r3,r4,10005434 <__alt_data_end+0xf8005434>
10005f90:	00c00f04 	movi	r3,60
10005f94:	1885c83a 	sub	r2,r3,r2
10005f98:	003d7b06 	br	10005588 <__alt_data_end+0xf8005588>
10005f9c:	000b883a 	mov	r5,zero
10005fa0:	003b1006 	br	10004be4 <__alt_data_end+0xf8004be4>

10005fa4 <_fflush_r>:
10005fa4:	defffb04 	addi	sp,sp,-20
10005fa8:	dcc00315 	stw	r19,12(sp)
10005fac:	dc000015 	stw	r16,0(sp)
10005fb0:	dfc00415 	stw	ra,16(sp)
10005fb4:	dc800215 	stw	r18,8(sp)
10005fb8:	dc400115 	stw	r17,4(sp)
10005fbc:	2027883a 	mov	r19,r4
10005fc0:	2821883a 	mov	r16,r5
10005fc4:	20000226 	beq	r4,zero,10005fd0 <_fflush_r+0x2c>
10005fc8:	20800e17 	ldw	r2,56(r4)
10005fcc:	10005326 	beq	r2,zero,1000611c <_fflush_r+0x178>
10005fd0:	8080030b 	ldhu	r2,12(r16)
10005fd4:	10ffffcc 	andi	r3,r2,65535
10005fd8:	18e0001c 	xori	r3,r3,32768
10005fdc:	18e00004 	addi	r3,r3,-32768
10005fe0:	18002c26 	beq	r3,zero,10006094 <_fflush_r+0xf0>
10005fe4:	10c0020c 	andi	r3,r2,8
10005fe8:	1800321e 	bne	r3,zero,100060b4 <_fflush_r+0x110>
10005fec:	80c00117 	ldw	r3,4(r16)
10005ff0:	10820014 	ori	r2,r2,2048
10005ff4:	8080030d 	sth	r2,12(r16)
10005ff8:	00c0570e 	bge	zero,r3,10006158 <_fflush_r+0x1b4>
10005ffc:	82000a17 	ldw	r8,40(r16)
10006000:	40002426 	beq	r8,zero,10006094 <_fflush_r+0xf0>
10006004:	9c400017 	ldw	r17,0(r19)
10006008:	10c4000c 	andi	r3,r2,4096
1000600c:	98000015 	stw	zero,0(r19)
10006010:	18004626 	beq	r3,zero,1000612c <_fflush_r+0x188>
10006014:	81801417 	ldw	r6,80(r16)
10006018:	10c0010c 	andi	r3,r2,4
1000601c:	18000626 	beq	r3,zero,10006038 <_fflush_r+0x94>
10006020:	80c00117 	ldw	r3,4(r16)
10006024:	80800c17 	ldw	r2,48(r16)
10006028:	30cdc83a 	sub	r6,r6,r3
1000602c:	10000226 	beq	r2,zero,10006038 <_fflush_r+0x94>
10006030:	80800f17 	ldw	r2,60(r16)
10006034:	308dc83a 	sub	r6,r6,r2
10006038:	81400717 	ldw	r5,28(r16)
1000603c:	9809883a 	mov	r4,r19
10006040:	000f883a 	mov	r7,zero
10006044:	403ee83a 	callr	r8
10006048:	00ffffc4 	movi	r3,-1
1000604c:	10c04526 	beq	r2,r3,10006164 <_fflush_r+0x1c0>
10006050:	80c0030b 	ldhu	r3,12(r16)
10006054:	81000417 	ldw	r4,16(r16)
10006058:	80000115 	stw	zero,4(r16)
1000605c:	197dffcc 	andi	r5,r3,63487
10006060:	8140030d 	sth	r5,12(r16)
10006064:	81000015 	stw	r4,0(r16)
10006068:	18c4000c 	andi	r3,r3,4096
1000606c:	18000126 	beq	r3,zero,10006074 <_fflush_r+0xd0>
10006070:	80801415 	stw	r2,80(r16)
10006074:	81400c17 	ldw	r5,48(r16)
10006078:	9c400015 	stw	r17,0(r19)
1000607c:	28000526 	beq	r5,zero,10006094 <_fflush_r+0xf0>
10006080:	80801004 	addi	r2,r16,64
10006084:	28800226 	beq	r5,r2,10006090 <_fflush_r+0xec>
10006088:	9809883a 	mov	r4,r19
1000608c:	00066d40 	call	100066d4 <_free_r>
10006090:	80000c15 	stw	zero,48(r16)
10006094:	0005883a 	mov	r2,zero
10006098:	dfc00417 	ldw	ra,16(sp)
1000609c:	dcc00317 	ldw	r19,12(sp)
100060a0:	dc800217 	ldw	r18,8(sp)
100060a4:	dc400117 	ldw	r17,4(sp)
100060a8:	dc000017 	ldw	r16,0(sp)
100060ac:	dec00504 	addi	sp,sp,20
100060b0:	f800283a 	ret
100060b4:	84800417 	ldw	r18,16(r16)
100060b8:	903ff626 	beq	r18,zero,10006094 <__alt_data_end+0xf8006094>
100060bc:	84400017 	ldw	r17,0(r16)
100060c0:	108000cc 	andi	r2,r2,3
100060c4:	84800015 	stw	r18,0(r16)
100060c8:	8ca3c83a 	sub	r17,r17,r18
100060cc:	10001526 	beq	r2,zero,10006124 <_fflush_r+0x180>
100060d0:	0005883a 	mov	r2,zero
100060d4:	80800215 	stw	r2,8(r16)
100060d8:	04400316 	blt	zero,r17,100060e8 <_fflush_r+0x144>
100060dc:	003fed06 	br	10006094 <__alt_data_end+0xf8006094>
100060e0:	90a5883a 	add	r18,r18,r2
100060e4:	047feb0e 	bge	zero,r17,10006094 <__alt_data_end+0xf8006094>
100060e8:	80800917 	ldw	r2,36(r16)
100060ec:	81400717 	ldw	r5,28(r16)
100060f0:	880f883a 	mov	r7,r17
100060f4:	900d883a 	mov	r6,r18
100060f8:	9809883a 	mov	r4,r19
100060fc:	103ee83a 	callr	r2
10006100:	88a3c83a 	sub	r17,r17,r2
10006104:	00bff616 	blt	zero,r2,100060e0 <__alt_data_end+0xf80060e0>
10006108:	80c0030b 	ldhu	r3,12(r16)
1000610c:	00bfffc4 	movi	r2,-1
10006110:	18c01014 	ori	r3,r3,64
10006114:	80c0030d 	sth	r3,12(r16)
10006118:	003fdf06 	br	10006098 <__alt_data_end+0xf8006098>
1000611c:	00065600 	call	10006560 <__sinit>
10006120:	003fab06 	br	10005fd0 <__alt_data_end+0xf8005fd0>
10006124:	80800517 	ldw	r2,20(r16)
10006128:	003fea06 	br	100060d4 <__alt_data_end+0xf80060d4>
1000612c:	81400717 	ldw	r5,28(r16)
10006130:	000d883a 	mov	r6,zero
10006134:	9809883a 	mov	r4,r19
10006138:	01c00044 	movi	r7,1
1000613c:	403ee83a 	callr	r8
10006140:	100d883a 	mov	r6,r2
10006144:	00bfffc4 	movi	r2,-1
10006148:	30801326 	beq	r6,r2,10006198 <_fflush_r+0x1f4>
1000614c:	8080030b 	ldhu	r2,12(r16)
10006150:	82000a17 	ldw	r8,40(r16)
10006154:	003fb006 	br	10006018 <__alt_data_end+0xf8006018>
10006158:	80c00f17 	ldw	r3,60(r16)
1000615c:	00ffa716 	blt	zero,r3,10005ffc <__alt_data_end+0xf8005ffc>
10006160:	003fcc06 	br	10006094 <__alt_data_end+0xf8006094>
10006164:	98c00017 	ldw	r3,0(r19)
10006168:	183fb926 	beq	r3,zero,10006050 <__alt_data_end+0xf8006050>
1000616c:	01000744 	movi	r4,29
10006170:	19000226 	beq	r3,r4,1000617c <_fflush_r+0x1d8>
10006174:	01000584 	movi	r4,22
10006178:	1900101e 	bne	r3,r4,100061bc <_fflush_r+0x218>
1000617c:	8080030b 	ldhu	r2,12(r16)
10006180:	80c00417 	ldw	r3,16(r16)
10006184:	80000115 	stw	zero,4(r16)
10006188:	10bdffcc 	andi	r2,r2,63487
1000618c:	8080030d 	sth	r2,12(r16)
10006190:	80c00015 	stw	r3,0(r16)
10006194:	003fb706 	br	10006074 <__alt_data_end+0xf8006074>
10006198:	98800017 	ldw	r2,0(r19)
1000619c:	103feb26 	beq	r2,zero,1000614c <__alt_data_end+0xf800614c>
100061a0:	00c00744 	movi	r3,29
100061a4:	10c00226 	beq	r2,r3,100061b0 <_fflush_r+0x20c>
100061a8:	00c00584 	movi	r3,22
100061ac:	10ffd61e 	bne	r2,r3,10006108 <__alt_data_end+0xf8006108>
100061b0:	9c400015 	stw	r17,0(r19)
100061b4:	0005883a 	mov	r2,zero
100061b8:	003fb706 	br	10006098 <__alt_data_end+0xf8006098>
100061bc:	80c0030b 	ldhu	r3,12(r16)
100061c0:	18c01014 	ori	r3,r3,64
100061c4:	80c0030d 	sth	r3,12(r16)
100061c8:	003fb306 	br	10006098 <__alt_data_end+0xf8006098>

100061cc <fflush>:
100061cc:	20000526 	beq	r4,zero,100061e4 <fflush+0x18>
100061d0:	00840074 	movhi	r2,4097
100061d4:	108e6904 	addi	r2,r2,14756
100061d8:	200b883a 	mov	r5,r4
100061dc:	11000017 	ldw	r4,0(r2)
100061e0:	0005fa41 	jmpi	10005fa4 <_fflush_r>
100061e4:	00840074 	movhi	r2,4097
100061e8:	108e6804 	addi	r2,r2,14752
100061ec:	11000017 	ldw	r4,0(r2)
100061f0:	01440034 	movhi	r5,4096
100061f4:	2957e904 	addi	r5,r5,24484
100061f8:	0006f201 	jmpi	10006f20 <_fwalk_reent>

100061fc <__fp_lock>:
100061fc:	0005883a 	mov	r2,zero
10006200:	f800283a 	ret

10006204 <__fp_unlock>:
10006204:	0005883a 	mov	r2,zero
10006208:	f800283a 	ret

1000620c <_cleanup_r>:
1000620c:	01440074 	movhi	r5,4097
10006210:	296bcb04 	addi	r5,r5,-20692
10006214:	0006e681 	jmpi	10006e68 <_fwalk>

10006218 <__sinit.part.1>:
10006218:	defff604 	addi	sp,sp,-40
1000621c:	00c40034 	movhi	r3,4096
10006220:	dfc00915 	stw	ra,36(sp)
10006224:	df000815 	stw	fp,32(sp)
10006228:	ddc00715 	stw	r23,28(sp)
1000622c:	dd800615 	stw	r22,24(sp)
10006230:	dd400515 	stw	r21,20(sp)
10006234:	dd000415 	stw	r20,16(sp)
10006238:	dcc00315 	stw	r19,12(sp)
1000623c:	dc800215 	stw	r18,8(sp)
10006240:	dc400115 	stw	r17,4(sp)
10006244:	dc000015 	stw	r16,0(sp)
10006248:	18d88304 	addi	r3,r3,25100
1000624c:	24000117 	ldw	r16,4(r4)
10006250:	20c00f15 	stw	r3,60(r4)
10006254:	07000044 	movi	fp,1
10006258:	00c000c4 	movi	r3,3
1000625c:	2080bb04 	addi	r2,r4,748
10006260:	20c0b915 	stw	r3,740(r4)
10006264:	27000e15 	stw	fp,56(r4)
10006268:	2080ba15 	stw	r2,744(r4)
1000626c:	2000b815 	stw	zero,736(r4)
10006270:	05c00204 	movi	r23,8
10006274:	00800104 	movi	r2,4
10006278:	2025883a 	mov	r18,r4
1000627c:	b80d883a 	mov	r6,r23
10006280:	81001704 	addi	r4,r16,92
10006284:	000b883a 	mov	r5,zero
10006288:	80000015 	stw	zero,0(r16)
1000628c:	80000115 	stw	zero,4(r16)
10006290:	80000215 	stw	zero,8(r16)
10006294:	8080030d 	sth	r2,12(r16)
10006298:	80001915 	stw	zero,100(r16)
1000629c:	8000038d 	sth	zero,14(r16)
100062a0:	80000415 	stw	zero,16(r16)
100062a4:	80000515 	stw	zero,20(r16)
100062a8:	80000615 	stw	zero,24(r16)
100062ac:	0007d940 	call	10007d94 <memset>
100062b0:	05840074 	movhi	r22,4097
100062b4:	94400217 	ldw	r17,8(r18)
100062b8:	05440074 	movhi	r21,4097
100062bc:	05040074 	movhi	r20,4097
100062c0:	04c40074 	movhi	r19,4097
100062c4:	b5a55a04 	addi	r22,r22,-27288
100062c8:	ad657104 	addi	r21,r21,-27196
100062cc:	a5259004 	addi	r20,r20,-27072
100062d0:	9ce5a704 	addi	r19,r19,-26980
100062d4:	85800815 	stw	r22,32(r16)
100062d8:	85400915 	stw	r21,36(r16)
100062dc:	85000a15 	stw	r20,40(r16)
100062e0:	84c00b15 	stw	r19,44(r16)
100062e4:	84000715 	stw	r16,28(r16)
100062e8:	00800284 	movi	r2,10
100062ec:	89001704 	addi	r4,r17,92
100062f0:	b80d883a 	mov	r6,r23
100062f4:	000b883a 	mov	r5,zero
100062f8:	88000015 	stw	zero,0(r17)
100062fc:	88000115 	stw	zero,4(r17)
10006300:	88000215 	stw	zero,8(r17)
10006304:	8880030d 	sth	r2,12(r17)
10006308:	88001915 	stw	zero,100(r17)
1000630c:	8f00038d 	sth	fp,14(r17)
10006310:	88000415 	stw	zero,16(r17)
10006314:	88000515 	stw	zero,20(r17)
10006318:	88000615 	stw	zero,24(r17)
1000631c:	0007d940 	call	10007d94 <memset>
10006320:	94000317 	ldw	r16,12(r18)
10006324:	00800484 	movi	r2,18
10006328:	8c400715 	stw	r17,28(r17)
1000632c:	8d800815 	stw	r22,32(r17)
10006330:	8d400915 	stw	r21,36(r17)
10006334:	8d000a15 	stw	r20,40(r17)
10006338:	8cc00b15 	stw	r19,44(r17)
1000633c:	8080030d 	sth	r2,12(r16)
10006340:	00800084 	movi	r2,2
10006344:	80000015 	stw	zero,0(r16)
10006348:	80000115 	stw	zero,4(r16)
1000634c:	80000215 	stw	zero,8(r16)
10006350:	80001915 	stw	zero,100(r16)
10006354:	8080038d 	sth	r2,14(r16)
10006358:	80000415 	stw	zero,16(r16)
1000635c:	80000515 	stw	zero,20(r16)
10006360:	80000615 	stw	zero,24(r16)
10006364:	81001704 	addi	r4,r16,92
10006368:	000b883a 	mov	r5,zero
1000636c:	b80d883a 	mov	r6,r23
10006370:	0007d940 	call	10007d94 <memset>
10006374:	84000715 	stw	r16,28(r16)
10006378:	85800815 	stw	r22,32(r16)
1000637c:	85400915 	stw	r21,36(r16)
10006380:	85000a15 	stw	r20,40(r16)
10006384:	84c00b15 	stw	r19,44(r16)
10006388:	dfc00917 	ldw	ra,36(sp)
1000638c:	df000817 	ldw	fp,32(sp)
10006390:	ddc00717 	ldw	r23,28(sp)
10006394:	dd800617 	ldw	r22,24(sp)
10006398:	dd400517 	ldw	r21,20(sp)
1000639c:	dd000417 	ldw	r20,16(sp)
100063a0:	dcc00317 	ldw	r19,12(sp)
100063a4:	dc800217 	ldw	r18,8(sp)
100063a8:	dc400117 	ldw	r17,4(sp)
100063ac:	dc000017 	ldw	r16,0(sp)
100063b0:	dec00a04 	addi	sp,sp,40
100063b4:	f800283a 	ret

100063b8 <__sfmoreglue>:
100063b8:	defffc04 	addi	sp,sp,-16
100063bc:	dc800215 	stw	r18,8(sp)
100063c0:	2825883a 	mov	r18,r5
100063c4:	dc000015 	stw	r16,0(sp)
100063c8:	01401a04 	movi	r5,104
100063cc:	2021883a 	mov	r16,r4
100063d0:	9009883a 	mov	r4,r18
100063d4:	dfc00315 	stw	ra,12(sp)
100063d8:	dc400115 	stw	r17,4(sp)
100063dc:	000c3780 	call	1000c378 <__mulsi3>
100063e0:	8009883a 	mov	r4,r16
100063e4:	11400304 	addi	r5,r2,12
100063e8:	1023883a 	mov	r17,r2
100063ec:	00072700 	call	10007270 <_malloc_r>
100063f0:	1021883a 	mov	r16,r2
100063f4:	10000726 	beq	r2,zero,10006414 <__sfmoreglue+0x5c>
100063f8:	11000304 	addi	r4,r2,12
100063fc:	10000015 	stw	zero,0(r2)
10006400:	14800115 	stw	r18,4(r2)
10006404:	11000215 	stw	r4,8(r2)
10006408:	000b883a 	mov	r5,zero
1000640c:	880d883a 	mov	r6,r17
10006410:	0007d940 	call	10007d94 <memset>
10006414:	8005883a 	mov	r2,r16
10006418:	dfc00317 	ldw	ra,12(sp)
1000641c:	dc800217 	ldw	r18,8(sp)
10006420:	dc400117 	ldw	r17,4(sp)
10006424:	dc000017 	ldw	r16,0(sp)
10006428:	dec00404 	addi	sp,sp,16
1000642c:	f800283a 	ret

10006430 <__sfp>:
10006430:	00840074 	movhi	r2,4097
10006434:	defffb04 	addi	sp,sp,-20
10006438:	108e6804 	addi	r2,r2,14752
1000643c:	dc800215 	stw	r18,8(sp)
10006440:	14800017 	ldw	r18,0(r2)
10006444:	dcc00315 	stw	r19,12(sp)
10006448:	dfc00415 	stw	ra,16(sp)
1000644c:	90800e17 	ldw	r2,56(r18)
10006450:	dc400115 	stw	r17,4(sp)
10006454:	dc000015 	stw	r16,0(sp)
10006458:	2027883a 	mov	r19,r4
1000645c:	1000021e 	bne	r2,zero,10006468 <__sfp+0x38>
10006460:	9009883a 	mov	r4,r18
10006464:	00062180 	call	10006218 <__sinit.part.1>
10006468:	9480b804 	addi	r18,r18,736
1000646c:	047fffc4 	movi	r17,-1
10006470:	91400117 	ldw	r5,4(r18)
10006474:	94000217 	ldw	r16,8(r18)
10006478:	297fffc4 	addi	r5,r5,-1
1000647c:	28000a16 	blt	r5,zero,100064a8 <__sfp+0x78>
10006480:	8080030f 	ldh	r2,12(r16)
10006484:	10000c26 	beq	r2,zero,100064b8 <__sfp+0x88>
10006488:	80c01d04 	addi	r3,r16,116
1000648c:	00000206 	br	10006498 <__sfp+0x68>
10006490:	18bfe60f 	ldh	r2,-104(r3)
10006494:	10000826 	beq	r2,zero,100064b8 <__sfp+0x88>
10006498:	297fffc4 	addi	r5,r5,-1
1000649c:	1c3ffd04 	addi	r16,r3,-12
100064a0:	18c01a04 	addi	r3,r3,104
100064a4:	2c7ffa1e 	bne	r5,r17,10006490 <__alt_data_end+0xf8006490>
100064a8:	90800017 	ldw	r2,0(r18)
100064ac:	10001d26 	beq	r2,zero,10006524 <__sfp+0xf4>
100064b0:	1025883a 	mov	r18,r2
100064b4:	003fee06 	br	10006470 <__alt_data_end+0xf8006470>
100064b8:	00bfffc4 	movi	r2,-1
100064bc:	8080038d 	sth	r2,14(r16)
100064c0:	00800044 	movi	r2,1
100064c4:	8080030d 	sth	r2,12(r16)
100064c8:	80001915 	stw	zero,100(r16)
100064cc:	80000015 	stw	zero,0(r16)
100064d0:	80000215 	stw	zero,8(r16)
100064d4:	80000115 	stw	zero,4(r16)
100064d8:	80000415 	stw	zero,16(r16)
100064dc:	80000515 	stw	zero,20(r16)
100064e0:	80000615 	stw	zero,24(r16)
100064e4:	81001704 	addi	r4,r16,92
100064e8:	000b883a 	mov	r5,zero
100064ec:	01800204 	movi	r6,8
100064f0:	0007d940 	call	10007d94 <memset>
100064f4:	8005883a 	mov	r2,r16
100064f8:	80000c15 	stw	zero,48(r16)
100064fc:	80000d15 	stw	zero,52(r16)
10006500:	80001115 	stw	zero,68(r16)
10006504:	80001215 	stw	zero,72(r16)
10006508:	dfc00417 	ldw	ra,16(sp)
1000650c:	dcc00317 	ldw	r19,12(sp)
10006510:	dc800217 	ldw	r18,8(sp)
10006514:	dc400117 	ldw	r17,4(sp)
10006518:	dc000017 	ldw	r16,0(sp)
1000651c:	dec00504 	addi	sp,sp,20
10006520:	f800283a 	ret
10006524:	9809883a 	mov	r4,r19
10006528:	01400104 	movi	r5,4
1000652c:	00063b80 	call	100063b8 <__sfmoreglue>
10006530:	90800015 	stw	r2,0(r18)
10006534:	103fde1e 	bne	r2,zero,100064b0 <__alt_data_end+0xf80064b0>
10006538:	00800304 	movi	r2,12
1000653c:	98800015 	stw	r2,0(r19)
10006540:	0005883a 	mov	r2,zero
10006544:	003ff006 	br	10006508 <__alt_data_end+0xf8006508>

10006548 <_cleanup>:
10006548:	00840074 	movhi	r2,4097
1000654c:	108e6804 	addi	r2,r2,14752
10006550:	11000017 	ldw	r4,0(r2)
10006554:	01440074 	movhi	r5,4097
10006558:	296bcb04 	addi	r5,r5,-20692
1000655c:	0006e681 	jmpi	10006e68 <_fwalk>

10006560 <__sinit>:
10006560:	20800e17 	ldw	r2,56(r4)
10006564:	10000126 	beq	r2,zero,1000656c <__sinit+0xc>
10006568:	f800283a 	ret
1000656c:	00062181 	jmpi	10006218 <__sinit.part.1>

10006570 <__sfp_lock_acquire>:
10006570:	f800283a 	ret

10006574 <__sfp_lock_release>:
10006574:	f800283a 	ret

10006578 <__sinit_lock_acquire>:
10006578:	f800283a 	ret

1000657c <__sinit_lock_release>:
1000657c:	f800283a 	ret

10006580 <__fp_lock_all>:
10006580:	00840074 	movhi	r2,4097
10006584:	108e6904 	addi	r2,r2,14756
10006588:	11000017 	ldw	r4,0(r2)
1000658c:	01440034 	movhi	r5,4096
10006590:	29587f04 	addi	r5,r5,25084
10006594:	0006e681 	jmpi	10006e68 <_fwalk>

10006598 <__fp_unlock_all>:
10006598:	00840074 	movhi	r2,4097
1000659c:	108e6904 	addi	r2,r2,14756
100065a0:	11000017 	ldw	r4,0(r2)
100065a4:	01440034 	movhi	r5,4096
100065a8:	29588104 	addi	r5,r5,25092
100065ac:	0006e681 	jmpi	10006e68 <_fwalk>

100065b0 <_malloc_trim_r>:
100065b0:	defffb04 	addi	sp,sp,-20
100065b4:	dcc00315 	stw	r19,12(sp)
100065b8:	04c40074 	movhi	r19,4097
100065bc:	dc800215 	stw	r18,8(sp)
100065c0:	dc400115 	stw	r17,4(sp)
100065c4:	dc000015 	stw	r16,0(sp)
100065c8:	dfc00415 	stw	ra,16(sp)
100065cc:	2821883a 	mov	r16,r5
100065d0:	9cc8e404 	addi	r19,r19,9104
100065d4:	2025883a 	mov	r18,r4
100065d8:	000f17c0 	call	1000f17c <__malloc_lock>
100065dc:	98800217 	ldw	r2,8(r19)
100065e0:	14400117 	ldw	r17,4(r2)
100065e4:	00bfff04 	movi	r2,-4
100065e8:	88a2703a 	and	r17,r17,r2
100065ec:	8c21c83a 	sub	r16,r17,r16
100065f0:	8403fbc4 	addi	r16,r16,4079
100065f4:	8020d33a 	srli	r16,r16,12
100065f8:	0083ffc4 	movi	r2,4095
100065fc:	843fffc4 	addi	r16,r16,-1
10006600:	8020933a 	slli	r16,r16,12
10006604:	1400060e 	bge	r2,r16,10006620 <_malloc_trim_r+0x70>
10006608:	9009883a 	mov	r4,r18
1000660c:	000b883a 	mov	r5,zero
10006610:	00095140 	call	10009514 <_sbrk_r>
10006614:	98c00217 	ldw	r3,8(r19)
10006618:	1c47883a 	add	r3,r3,r17
1000661c:	10c00a26 	beq	r2,r3,10006648 <_malloc_trim_r+0x98>
10006620:	9009883a 	mov	r4,r18
10006624:	000f19c0 	call	1000f19c <__malloc_unlock>
10006628:	0005883a 	mov	r2,zero
1000662c:	dfc00417 	ldw	ra,16(sp)
10006630:	dcc00317 	ldw	r19,12(sp)
10006634:	dc800217 	ldw	r18,8(sp)
10006638:	dc400117 	ldw	r17,4(sp)
1000663c:	dc000017 	ldw	r16,0(sp)
10006640:	dec00504 	addi	sp,sp,20
10006644:	f800283a 	ret
10006648:	9009883a 	mov	r4,r18
1000664c:	040bc83a 	sub	r5,zero,r16
10006650:	00095140 	call	10009514 <_sbrk_r>
10006654:	00ffffc4 	movi	r3,-1
10006658:	10c00d26 	beq	r2,r3,10006690 <_malloc_trim_r+0xe0>
1000665c:	00c40074 	movhi	r3,4097
10006660:	18d54204 	addi	r3,r3,21768
10006664:	18800017 	ldw	r2,0(r3)
10006668:	99000217 	ldw	r4,8(r19)
1000666c:	8c23c83a 	sub	r17,r17,r16
10006670:	8c400054 	ori	r17,r17,1
10006674:	1421c83a 	sub	r16,r2,r16
10006678:	24400115 	stw	r17,4(r4)
1000667c:	9009883a 	mov	r4,r18
10006680:	1c000015 	stw	r16,0(r3)
10006684:	000f19c0 	call	1000f19c <__malloc_unlock>
10006688:	00800044 	movi	r2,1
1000668c:	003fe706 	br	1000662c <__alt_data_end+0xf800662c>
10006690:	9009883a 	mov	r4,r18
10006694:	000b883a 	mov	r5,zero
10006698:	00095140 	call	10009514 <_sbrk_r>
1000669c:	99000217 	ldw	r4,8(r19)
100066a0:	014003c4 	movi	r5,15
100066a4:	1107c83a 	sub	r3,r2,r4
100066a8:	28ffdd0e 	bge	r5,r3,10006620 <__alt_data_end+0xf8006620>
100066ac:	01440074 	movhi	r5,4097
100066b0:	294e6b04 	addi	r5,r5,14764
100066b4:	29400017 	ldw	r5,0(r5)
100066b8:	18c00054 	ori	r3,r3,1
100066bc:	20c00115 	stw	r3,4(r4)
100066c0:	00c40074 	movhi	r3,4097
100066c4:	1145c83a 	sub	r2,r2,r5
100066c8:	18d54204 	addi	r3,r3,21768
100066cc:	18800015 	stw	r2,0(r3)
100066d0:	003fd306 	br	10006620 <__alt_data_end+0xf8006620>

100066d4 <_free_r>:
100066d4:	28004c26 	beq	r5,zero,10006808 <_free_r+0x134>
100066d8:	defffd04 	addi	sp,sp,-12
100066dc:	dc400115 	stw	r17,4(sp)
100066e0:	dc000015 	stw	r16,0(sp)
100066e4:	2023883a 	mov	r17,r4
100066e8:	2821883a 	mov	r16,r5
100066ec:	dfc00215 	stw	ra,8(sp)
100066f0:	000f17c0 	call	1000f17c <__malloc_lock>
100066f4:	813fff17 	ldw	r4,-4(r16)
100066f8:	00bfff84 	movi	r2,-2
100066fc:	02440074 	movhi	r9,4097
10006700:	81bffe04 	addi	r6,r16,-8
10006704:	2084703a 	and	r2,r4,r2
10006708:	4a48e404 	addi	r9,r9,9104
1000670c:	308b883a 	add	r5,r6,r2
10006710:	2a000117 	ldw	r8,4(r5)
10006714:	49c00217 	ldw	r7,8(r9)
10006718:	00ffff04 	movi	r3,-4
1000671c:	40c6703a 	and	r3,r8,r3
10006720:	39405326 	beq	r7,r5,10006870 <_free_r+0x19c>
10006724:	28c00115 	stw	r3,4(r5)
10006728:	2100004c 	andi	r4,r4,1
1000672c:	2000091e 	bne	r4,zero,10006754 <_free_r+0x80>
10006730:	81fffe17 	ldw	r7,-8(r16)
10006734:	4a000204 	addi	r8,r9,8
10006738:	31cdc83a 	sub	r6,r6,r7
1000673c:	31000217 	ldw	r4,8(r6)
10006740:	11c5883a 	add	r2,r2,r7
10006744:	22006126 	beq	r4,r8,100068cc <_free_r+0x1f8>
10006748:	31c00317 	ldw	r7,12(r6)
1000674c:	21c00315 	stw	r7,12(r4)
10006750:	39000215 	stw	r4,8(r7)
10006754:	28c9883a 	add	r4,r5,r3
10006758:	21c00117 	ldw	r7,4(r4)
1000675c:	39c0004c 	andi	r7,r7,1
10006760:	38000d1e 	bne	r7,zero,10006798 <_free_r+0xc4>
10006764:	29000217 	ldw	r4,8(r5)
10006768:	10c5883a 	add	r2,r2,r3
1000676c:	00c40074 	movhi	r3,4097
10006770:	18c8e604 	addi	r3,r3,9112
10006774:	20c07526 	beq	r4,r3,1000694c <_free_r+0x278>
10006778:	29c00317 	ldw	r7,12(r5)
1000677c:	11400054 	ori	r5,r2,1
10006780:	3087883a 	add	r3,r6,r2
10006784:	21c00315 	stw	r7,12(r4)
10006788:	39000215 	stw	r4,8(r7)
1000678c:	31400115 	stw	r5,4(r6)
10006790:	18800015 	stw	r2,0(r3)
10006794:	00000406 	br	100067a8 <_free_r+0xd4>
10006798:	10c00054 	ori	r3,r2,1
1000679c:	30c00115 	stw	r3,4(r6)
100067a0:	3087883a 	add	r3,r6,r2
100067a4:	18800015 	stw	r2,0(r3)
100067a8:	00c07fc4 	movi	r3,511
100067ac:	18801736 	bltu	r3,r2,1000680c <_free_r+0x138>
100067b0:	1004d0fa 	srli	r2,r2,3
100067b4:	01400044 	movi	r5,1
100067b8:	49000117 	ldw	r4,4(r9)
100067bc:	1087883a 	add	r3,r2,r2
100067c0:	18c7883a 	add	r3,r3,r3
100067c4:	1005d0ba 	srai	r2,r2,2
100067c8:	18c7883a 	add	r3,r3,r3
100067cc:	1a47883a 	add	r3,r3,r9
100067d0:	19c00217 	ldw	r7,8(r3)
100067d4:	2884983a 	sll	r2,r5,r2
100067d8:	30c00315 	stw	r3,12(r6)
100067dc:	31c00215 	stw	r7,8(r6)
100067e0:	1104b03a 	or	r2,r2,r4
100067e4:	19800215 	stw	r6,8(r3)
100067e8:	48800115 	stw	r2,4(r9)
100067ec:	39800315 	stw	r6,12(r7)
100067f0:	8809883a 	mov	r4,r17
100067f4:	dfc00217 	ldw	ra,8(sp)
100067f8:	dc400117 	ldw	r17,4(sp)
100067fc:	dc000017 	ldw	r16,0(sp)
10006800:	dec00304 	addi	sp,sp,12
10006804:	000f19c1 	jmpi	1000f19c <__malloc_unlock>
10006808:	f800283a 	ret
1000680c:	1006d27a 	srli	r3,r2,9
10006810:	01000104 	movi	r4,4
10006814:	20c04036 	bltu	r4,r3,10006918 <_free_r+0x244>
10006818:	1006d1ba 	srli	r3,r2,6
1000681c:	19400e04 	addi	r5,r3,56
10006820:	2947883a 	add	r3,r5,r5
10006824:	18c7883a 	add	r3,r3,r3
10006828:	18c7883a 	add	r3,r3,r3
1000682c:	1a49883a 	add	r4,r3,r9
10006830:	20c00217 	ldw	r3,8(r4)
10006834:	01c40074 	movhi	r7,4097
10006838:	39c8e404 	addi	r7,r7,9104
1000683c:	19003b26 	beq	r3,r4,1000692c <_free_r+0x258>
10006840:	01ffff04 	movi	r7,-4
10006844:	19400117 	ldw	r5,4(r3)
10006848:	29ca703a 	and	r5,r5,r7
1000684c:	1140022e 	bgeu	r2,r5,10006858 <_free_r+0x184>
10006850:	18c00217 	ldw	r3,8(r3)
10006854:	20fffb1e 	bne	r4,r3,10006844 <__alt_data_end+0xf8006844>
10006858:	18800317 	ldw	r2,12(r3)
1000685c:	30800315 	stw	r2,12(r6)
10006860:	30c00215 	stw	r3,8(r6)
10006864:	11800215 	stw	r6,8(r2)
10006868:	19800315 	stw	r6,12(r3)
1000686c:	003fe006 	br	100067f0 <__alt_data_end+0xf80067f0>
10006870:	2100004c 	andi	r4,r4,1
10006874:	1885883a 	add	r2,r3,r2
10006878:	2000071e 	bne	r4,zero,10006898 <_free_r+0x1c4>
1000687c:	817ffe17 	ldw	r5,-8(r16)
10006880:	314dc83a 	sub	r6,r6,r5
10006884:	30c00317 	ldw	r3,12(r6)
10006888:	31000217 	ldw	r4,8(r6)
1000688c:	1145883a 	add	r2,r2,r5
10006890:	20c00315 	stw	r3,12(r4)
10006894:	19000215 	stw	r4,8(r3)
10006898:	10c00054 	ori	r3,r2,1
1000689c:	30c00115 	stw	r3,4(r6)
100068a0:	00c40074 	movhi	r3,4097
100068a4:	18ce6c04 	addi	r3,r3,14768
100068a8:	18c00017 	ldw	r3,0(r3)
100068ac:	49800215 	stw	r6,8(r9)
100068b0:	10ffcf36 	bltu	r2,r3,100067f0 <__alt_data_end+0xf80067f0>
100068b4:	00840074 	movhi	r2,4097
100068b8:	10953904 	addi	r2,r2,21732
100068bc:	11400017 	ldw	r5,0(r2)
100068c0:	8809883a 	mov	r4,r17
100068c4:	00065b00 	call	100065b0 <_malloc_trim_r>
100068c8:	003fc906 	br	100067f0 <__alt_data_end+0xf80067f0>
100068cc:	28c9883a 	add	r4,r5,r3
100068d0:	21000117 	ldw	r4,4(r4)
100068d4:	2100004c 	andi	r4,r4,1
100068d8:	20000a1e 	bne	r4,zero,10006904 <_free_r+0x230>
100068dc:	29000317 	ldw	r4,12(r5)
100068e0:	29400217 	ldw	r5,8(r5)
100068e4:	10c5883a 	add	r2,r2,r3
100068e8:	10c00054 	ori	r3,r2,1
100068ec:	29000315 	stw	r4,12(r5)
100068f0:	21400215 	stw	r5,8(r4)
100068f4:	30c00115 	stw	r3,4(r6)
100068f8:	308d883a 	add	r6,r6,r2
100068fc:	30800015 	stw	r2,0(r6)
10006900:	003fbb06 	br	100067f0 <__alt_data_end+0xf80067f0>
10006904:	10c00054 	ori	r3,r2,1
10006908:	30c00115 	stw	r3,4(r6)
1000690c:	308d883a 	add	r6,r6,r2
10006910:	30800015 	stw	r2,0(r6)
10006914:	003fb606 	br	100067f0 <__alt_data_end+0xf80067f0>
10006918:	01000504 	movi	r4,20
1000691c:	20c01436 	bltu	r4,r3,10006970 <_free_r+0x29c>
10006920:	194016c4 	addi	r5,r3,91
10006924:	2947883a 	add	r3,r5,r5
10006928:	003fbe06 	br	10006824 <__alt_data_end+0xf8006824>
1000692c:	280bd0ba 	srai	r5,r5,2
10006930:	00800044 	movi	r2,1
10006934:	39000117 	ldw	r4,4(r7)
10006938:	114a983a 	sll	r5,r2,r5
1000693c:	1805883a 	mov	r2,r3
10006940:	2908b03a 	or	r4,r5,r4
10006944:	39000115 	stw	r4,4(r7)
10006948:	003fc406 	br	1000685c <__alt_data_end+0xf800685c>
1000694c:	49800515 	stw	r6,20(r9)
10006950:	49800415 	stw	r6,16(r9)
10006954:	10c00054 	ori	r3,r2,1
10006958:	31000315 	stw	r4,12(r6)
1000695c:	31000215 	stw	r4,8(r6)
10006960:	30c00115 	stw	r3,4(r6)
10006964:	308d883a 	add	r6,r6,r2
10006968:	30800015 	stw	r2,0(r6)
1000696c:	003fa006 	br	100067f0 <__alt_data_end+0xf80067f0>
10006970:	01001504 	movi	r4,84
10006974:	20c00436 	bltu	r4,r3,10006988 <_free_r+0x2b4>
10006978:	1006d33a 	srli	r3,r2,12
1000697c:	19401b84 	addi	r5,r3,110
10006980:	2947883a 	add	r3,r5,r5
10006984:	003fa706 	br	10006824 <__alt_data_end+0xf8006824>
10006988:	01005504 	movi	r4,340
1000698c:	20c00436 	bltu	r4,r3,100069a0 <_free_r+0x2cc>
10006990:	1006d3fa 	srli	r3,r2,15
10006994:	19401dc4 	addi	r5,r3,119
10006998:	2947883a 	add	r3,r5,r5
1000699c:	003fa106 	br	10006824 <__alt_data_end+0xf8006824>
100069a0:	01015504 	movi	r4,1364
100069a4:	20c00436 	bltu	r4,r3,100069b8 <_free_r+0x2e4>
100069a8:	1006d4ba 	srli	r3,r2,18
100069ac:	19401f04 	addi	r5,r3,124
100069b0:	2947883a 	add	r3,r5,r5
100069b4:	003f9b06 	br	10006824 <__alt_data_end+0xf8006824>
100069b8:	00c03f04 	movi	r3,252
100069bc:	01401f84 	movi	r5,126
100069c0:	003f9806 	br	10006824 <__alt_data_end+0xf8006824>

100069c4 <__sfvwrite_r>:
100069c4:	30800217 	ldw	r2,8(r6)
100069c8:	10004526 	beq	r2,zero,10006ae0 <__sfvwrite_r+0x11c>
100069cc:	28c0030b 	ldhu	r3,12(r5)
100069d0:	defff404 	addi	sp,sp,-48
100069d4:	dd400715 	stw	r21,28(sp)
100069d8:	dcc00515 	stw	r19,20(sp)
100069dc:	dc000215 	stw	r16,8(sp)
100069e0:	dfc00b15 	stw	ra,44(sp)
100069e4:	df000a15 	stw	fp,40(sp)
100069e8:	ddc00915 	stw	r23,36(sp)
100069ec:	dd800815 	stw	r22,32(sp)
100069f0:	dd000615 	stw	r20,24(sp)
100069f4:	dc800415 	stw	r18,16(sp)
100069f8:	dc400315 	stw	r17,12(sp)
100069fc:	1880020c 	andi	r2,r3,8
10006a00:	2821883a 	mov	r16,r5
10006a04:	202b883a 	mov	r21,r4
10006a08:	3027883a 	mov	r19,r6
10006a0c:	10002526 	beq	r2,zero,10006aa4 <__sfvwrite_r+0xe0>
10006a10:	28800417 	ldw	r2,16(r5)
10006a14:	10002326 	beq	r2,zero,10006aa4 <__sfvwrite_r+0xe0>
10006a18:	1880008c 	andi	r2,r3,2
10006a1c:	9c400017 	ldw	r17,0(r19)
10006a20:	10003126 	beq	r2,zero,10006ae8 <__sfvwrite_r+0x124>
10006a24:	0029883a 	mov	r20,zero
10006a28:	0025883a 	mov	r18,zero
10006a2c:	05810004 	movi	r22,1024
10006a30:	a00d883a 	mov	r6,r20
10006a34:	a809883a 	mov	r4,r21
10006a38:	90002526 	beq	r18,zero,10006ad0 <__sfvwrite_r+0x10c>
10006a3c:	900f883a 	mov	r7,r18
10006a40:	81400717 	ldw	r5,28(r16)
10006a44:	b480012e 	bgeu	r22,r18,10006a4c <__sfvwrite_r+0x88>
10006a48:	01c10004 	movi	r7,1024
10006a4c:	80800917 	ldw	r2,36(r16)
10006a50:	103ee83a 	callr	r2
10006a54:	0080510e 	bge	zero,r2,10006b9c <__sfvwrite_r+0x1d8>
10006a58:	98c00217 	ldw	r3,8(r19)
10006a5c:	a0a9883a 	add	r20,r20,r2
10006a60:	90a5c83a 	sub	r18,r18,r2
10006a64:	1885c83a 	sub	r2,r3,r2
10006a68:	98800215 	stw	r2,8(r19)
10006a6c:	103ff01e 	bne	r2,zero,10006a30 <__alt_data_end+0xf8006a30>
10006a70:	0005883a 	mov	r2,zero
10006a74:	dfc00b17 	ldw	ra,44(sp)
10006a78:	df000a17 	ldw	fp,40(sp)
10006a7c:	ddc00917 	ldw	r23,36(sp)
10006a80:	dd800817 	ldw	r22,32(sp)
10006a84:	dd400717 	ldw	r21,28(sp)
10006a88:	dd000617 	ldw	r20,24(sp)
10006a8c:	dcc00517 	ldw	r19,20(sp)
10006a90:	dc800417 	ldw	r18,16(sp)
10006a94:	dc400317 	ldw	r17,12(sp)
10006a98:	dc000217 	ldw	r16,8(sp)
10006a9c:	dec00c04 	addi	sp,sp,48
10006aa0:	f800283a 	ret
10006aa4:	a809883a 	mov	r4,r21
10006aa8:	800b883a 	mov	r5,r16
10006aac:	00045240 	call	10004524 <__swsetup_r>
10006ab0:	80c0030b 	ldhu	r3,12(r16)
10006ab4:	103fd826 	beq	r2,zero,10006a18 <__alt_data_end+0xf8006a18>
10006ab8:	18c01014 	ori	r3,r3,64
10006abc:	80c0030d 	sth	r3,12(r16)
10006ac0:	00c00244 	movi	r3,9
10006ac4:	00bfffc4 	movi	r2,-1
10006ac8:	a8c00015 	stw	r3,0(r21)
10006acc:	003fe906 	br	10006a74 <__alt_data_end+0xf8006a74>
10006ad0:	8d000017 	ldw	r20,0(r17)
10006ad4:	8c800117 	ldw	r18,4(r17)
10006ad8:	8c400204 	addi	r17,r17,8
10006adc:	003fd406 	br	10006a30 <__alt_data_end+0xf8006a30>
10006ae0:	0005883a 	mov	r2,zero
10006ae4:	f800283a 	ret
10006ae8:	1880004c 	andi	r2,r3,1
10006aec:	1000301e 	bne	r2,zero,10006bb0 <__sfvwrite_r+0x1ec>
10006af0:	002f883a 	mov	r23,zero
10006af4:	0025883a 	mov	r18,zero
10006af8:	90001c26 	beq	r18,zero,10006b6c <__sfvwrite_r+0x1a8>
10006afc:	1880800c 	andi	r2,r3,512
10006b00:	85000217 	ldw	r20,8(r16)
10006b04:	10006c26 	beq	r2,zero,10006cb8 <__sfvwrite_r+0x2f4>
10006b08:	a02d883a 	mov	r22,r20
10006b0c:	95008536 	bltu	r18,r20,10006d24 <__sfvwrite_r+0x360>
10006b10:	1881200c 	andi	r2,r3,1152
10006b14:	10009d1e 	bne	r2,zero,10006d8c <__sfvwrite_r+0x3c8>
10006b18:	81000017 	ldw	r4,0(r16)
10006b1c:	a039883a 	mov	fp,r20
10006b20:	9029883a 	mov	r20,r18
10006b24:	b80b883a 	mov	r5,r23
10006b28:	b00d883a 	mov	r6,r22
10006b2c:	0007c380 	call	10007c38 <memmove>
10006b30:	80c00217 	ldw	r3,8(r16)
10006b34:	81000017 	ldw	r4,0(r16)
10006b38:	9005883a 	mov	r2,r18
10006b3c:	1f39c83a 	sub	fp,r3,fp
10006b40:	258f883a 	add	r7,r4,r22
10006b44:	87000215 	stw	fp,8(r16)
10006b48:	81c00015 	stw	r7,0(r16)
10006b4c:	98c00217 	ldw	r3,8(r19)
10006b50:	b8af883a 	add	r23,r23,r2
10006b54:	90a5c83a 	sub	r18,r18,r2
10006b58:	1d05c83a 	sub	r2,r3,r20
10006b5c:	98800215 	stw	r2,8(r19)
10006b60:	103fc326 	beq	r2,zero,10006a70 <__alt_data_end+0xf8006a70>
10006b64:	80c0030b 	ldhu	r3,12(r16)
10006b68:	903fe41e 	bne	r18,zero,10006afc <__alt_data_end+0xf8006afc>
10006b6c:	8dc00017 	ldw	r23,0(r17)
10006b70:	8c800117 	ldw	r18,4(r17)
10006b74:	8c400204 	addi	r17,r17,8
10006b78:	003fdf06 	br	10006af8 <__alt_data_end+0xf8006af8>
10006b7c:	0008f000 	call	10008f00 <_realloc_r>
10006b80:	102d883a 	mov	r22,r2
10006b84:	1000a01e 	bne	r2,zero,10006e08 <__sfvwrite_r+0x444>
10006b88:	81400417 	ldw	r5,16(r16)
10006b8c:	a809883a 	mov	r4,r21
10006b90:	00066d40 	call	100066d4 <_free_r>
10006b94:	00800304 	movi	r2,12
10006b98:	a8800015 	stw	r2,0(r21)
10006b9c:	80c0030b 	ldhu	r3,12(r16)
10006ba0:	00bfffc4 	movi	r2,-1
10006ba4:	18c01014 	ori	r3,r3,64
10006ba8:	80c0030d 	sth	r3,12(r16)
10006bac:	003fb106 	br	10006a74 <__alt_data_end+0xf8006a74>
10006bb0:	0029883a 	mov	r20,zero
10006bb4:	0011883a 	mov	r8,zero
10006bb8:	0039883a 	mov	fp,zero
10006bbc:	0025883a 	mov	r18,zero
10006bc0:	90001f26 	beq	r18,zero,10006c40 <__sfvwrite_r+0x27c>
10006bc4:	40006826 	beq	r8,zero,10006d68 <__sfvwrite_r+0x3a4>
10006bc8:	a02f883a 	mov	r23,r20
10006bcc:	9500012e 	bgeu	r18,r20,10006bd4 <__sfvwrite_r+0x210>
10006bd0:	902f883a 	mov	r23,r18
10006bd4:	81000017 	ldw	r4,0(r16)
10006bd8:	80800417 	ldw	r2,16(r16)
10006bdc:	b82d883a 	mov	r22,r23
10006be0:	81800217 	ldw	r6,8(r16)
10006be4:	81c00517 	ldw	r7,20(r16)
10006be8:	1100022e 	bgeu	r2,r4,10006bf4 <__sfvwrite_r+0x230>
10006bec:	31c7883a 	add	r3,r6,r7
10006bf0:	1dc01816 	blt	r3,r23,10006c54 <__sfvwrite_r+0x290>
10006bf4:	b9c03f16 	blt	r23,r7,10006cf4 <__sfvwrite_r+0x330>
10006bf8:	80800917 	ldw	r2,36(r16)
10006bfc:	81400717 	ldw	r5,28(r16)
10006c00:	a809883a 	mov	r4,r21
10006c04:	da000115 	stw	r8,4(sp)
10006c08:	e00d883a 	mov	r6,fp
10006c0c:	103ee83a 	callr	r2
10006c10:	102d883a 	mov	r22,r2
10006c14:	da000117 	ldw	r8,4(sp)
10006c18:	00bfe00e 	bge	zero,r2,10006b9c <__alt_data_end+0xf8006b9c>
10006c1c:	a5a9c83a 	sub	r20,r20,r22
10006c20:	a0001f26 	beq	r20,zero,10006ca0 <__sfvwrite_r+0x2dc>
10006c24:	98800217 	ldw	r2,8(r19)
10006c28:	e5b9883a 	add	fp,fp,r22
10006c2c:	95a5c83a 	sub	r18,r18,r22
10006c30:	15adc83a 	sub	r22,r2,r22
10006c34:	9d800215 	stw	r22,8(r19)
10006c38:	b03f8d26 	beq	r22,zero,10006a70 <__alt_data_end+0xf8006a70>
10006c3c:	903fe11e 	bne	r18,zero,10006bc4 <__alt_data_end+0xf8006bc4>
10006c40:	8f000017 	ldw	fp,0(r17)
10006c44:	8c800117 	ldw	r18,4(r17)
10006c48:	0011883a 	mov	r8,zero
10006c4c:	8c400204 	addi	r17,r17,8
10006c50:	003fdb06 	br	10006bc0 <__alt_data_end+0xf8006bc0>
10006c54:	180d883a 	mov	r6,r3
10006c58:	e00b883a 	mov	r5,fp
10006c5c:	da000115 	stw	r8,4(sp)
10006c60:	d8c00015 	stw	r3,0(sp)
10006c64:	0007c380 	call	10007c38 <memmove>
10006c68:	d8c00017 	ldw	r3,0(sp)
10006c6c:	80800017 	ldw	r2,0(r16)
10006c70:	a809883a 	mov	r4,r21
10006c74:	800b883a 	mov	r5,r16
10006c78:	10c5883a 	add	r2,r2,r3
10006c7c:	80800015 	stw	r2,0(r16)
10006c80:	d8c00015 	stw	r3,0(sp)
10006c84:	0005fa40 	call	10005fa4 <_fflush_r>
10006c88:	d8c00017 	ldw	r3,0(sp)
10006c8c:	da000117 	ldw	r8,4(sp)
10006c90:	103fc21e 	bne	r2,zero,10006b9c <__alt_data_end+0xf8006b9c>
10006c94:	182d883a 	mov	r22,r3
10006c98:	a5a9c83a 	sub	r20,r20,r22
10006c9c:	a03fe11e 	bne	r20,zero,10006c24 <__alt_data_end+0xf8006c24>
10006ca0:	a809883a 	mov	r4,r21
10006ca4:	800b883a 	mov	r5,r16
10006ca8:	0005fa40 	call	10005fa4 <_fflush_r>
10006cac:	103fbb1e 	bne	r2,zero,10006b9c <__alt_data_end+0xf8006b9c>
10006cb0:	0011883a 	mov	r8,zero
10006cb4:	003fdb06 	br	10006c24 <__alt_data_end+0xf8006c24>
10006cb8:	81000017 	ldw	r4,0(r16)
10006cbc:	80800417 	ldw	r2,16(r16)
10006cc0:	1100012e 	bgeu	r2,r4,10006cc8 <__sfvwrite_r+0x304>
10006cc4:	a4805a36 	bltu	r20,r18,10006e30 <__sfvwrite_r+0x46c>
10006cc8:	81c00517 	ldw	r7,20(r16)
10006ccc:	91c01a36 	bltu	r18,r7,10006d38 <__sfvwrite_r+0x374>
10006cd0:	80800917 	ldw	r2,36(r16)
10006cd4:	81400717 	ldw	r5,28(r16)
10006cd8:	a809883a 	mov	r4,r21
10006cdc:	b80d883a 	mov	r6,r23
10006ce0:	103ee83a 	callr	r2
10006ce4:	1029883a 	mov	r20,r2
10006ce8:	00bfac0e 	bge	zero,r2,10006b9c <__alt_data_end+0xf8006b9c>
10006cec:	a005883a 	mov	r2,r20
10006cf0:	003f9606 	br	10006b4c <__alt_data_end+0xf8006b4c>
10006cf4:	b80d883a 	mov	r6,r23
10006cf8:	e00b883a 	mov	r5,fp
10006cfc:	da000115 	stw	r8,4(sp)
10006d00:	0007c380 	call	10007c38 <memmove>
10006d04:	80800217 	ldw	r2,8(r16)
10006d08:	80c00017 	ldw	r3,0(r16)
10006d0c:	da000117 	ldw	r8,4(sp)
10006d10:	15c5c83a 	sub	r2,r2,r23
10006d14:	1def883a 	add	r23,r3,r23
10006d18:	80800215 	stw	r2,8(r16)
10006d1c:	85c00015 	stw	r23,0(r16)
10006d20:	003fbe06 	br	10006c1c <__alt_data_end+0xf8006c1c>
10006d24:	81000017 	ldw	r4,0(r16)
10006d28:	9039883a 	mov	fp,r18
10006d2c:	9029883a 	mov	r20,r18
10006d30:	902d883a 	mov	r22,r18
10006d34:	003f7b06 	br	10006b24 <__alt_data_end+0xf8006b24>
10006d38:	b80b883a 	mov	r5,r23
10006d3c:	900d883a 	mov	r6,r18
10006d40:	0007c380 	call	10007c38 <memmove>
10006d44:	80c00217 	ldw	r3,8(r16)
10006d48:	80800017 	ldw	r2,0(r16)
10006d4c:	9029883a 	mov	r20,r18
10006d50:	1c87c83a 	sub	r3,r3,r18
10006d54:	1485883a 	add	r2,r2,r18
10006d58:	80800015 	stw	r2,0(r16)
10006d5c:	80c00215 	stw	r3,8(r16)
10006d60:	9005883a 	mov	r2,r18
10006d64:	003f7906 	br	10006b4c <__alt_data_end+0xf8006b4c>
10006d68:	e009883a 	mov	r4,fp
10006d6c:	01400284 	movi	r5,10
10006d70:	900d883a 	mov	r6,r18
10006d74:	0007a180 	call	10007a18 <memchr>
10006d78:	10003826 	beq	r2,zero,10006e5c <__sfvwrite_r+0x498>
10006d7c:	10800044 	addi	r2,r2,1
10006d80:	1729c83a 	sub	r20,r2,fp
10006d84:	02000044 	movi	r8,1
10006d88:	003f8f06 	br	10006bc8 <__alt_data_end+0xf8006bc8>
10006d8c:	80800517 	ldw	r2,20(r16)
10006d90:	81400417 	ldw	r5,16(r16)
10006d94:	87000017 	ldw	fp,0(r16)
10006d98:	10a9883a 	add	r20,r2,r2
10006d9c:	a085883a 	add	r2,r20,r2
10006da0:	1028d7fa 	srli	r20,r2,31
10006da4:	e179c83a 	sub	fp,fp,r5
10006da8:	e1000044 	addi	r4,fp,1
10006dac:	a085883a 	add	r2,r20,r2
10006db0:	1029d07a 	srai	r20,r2,1
10006db4:	2485883a 	add	r2,r4,r18
10006db8:	a00d883a 	mov	r6,r20
10006dbc:	a080022e 	bgeu	r20,r2,10006dc8 <__sfvwrite_r+0x404>
10006dc0:	1029883a 	mov	r20,r2
10006dc4:	100d883a 	mov	r6,r2
10006dc8:	18c1000c 	andi	r3,r3,1024
10006dcc:	a809883a 	mov	r4,r21
10006dd0:	183f6a26 	beq	r3,zero,10006b7c <__alt_data_end+0xf8006b7c>
10006dd4:	300b883a 	mov	r5,r6
10006dd8:	00072700 	call	10007270 <_malloc_r>
10006ddc:	102d883a 	mov	r22,r2
10006de0:	103f6c26 	beq	r2,zero,10006b94 <__alt_data_end+0xf8006b94>
10006de4:	81400417 	ldw	r5,16(r16)
10006de8:	1009883a 	mov	r4,r2
10006dec:	e00d883a 	mov	r6,fp
10006df0:	0007b000 	call	10007b00 <memcpy>
10006df4:	8080030b 	ldhu	r2,12(r16)
10006df8:	00fedfc4 	movi	r3,-1153
10006dfc:	10c4703a 	and	r2,r2,r3
10006e00:	10802014 	ori	r2,r2,128
10006e04:	8080030d 	sth	r2,12(r16)
10006e08:	b709883a 	add	r4,r22,fp
10006e0c:	a707c83a 	sub	r3,r20,fp
10006e10:	85800415 	stw	r22,16(r16)
10006e14:	85000515 	stw	r20,20(r16)
10006e18:	81000015 	stw	r4,0(r16)
10006e1c:	9039883a 	mov	fp,r18
10006e20:	80c00215 	stw	r3,8(r16)
10006e24:	9029883a 	mov	r20,r18
10006e28:	902d883a 	mov	r22,r18
10006e2c:	003f3d06 	br	10006b24 <__alt_data_end+0xf8006b24>
10006e30:	b80b883a 	mov	r5,r23
10006e34:	a00d883a 	mov	r6,r20
10006e38:	0007c380 	call	10007c38 <memmove>
10006e3c:	80800017 	ldw	r2,0(r16)
10006e40:	a809883a 	mov	r4,r21
10006e44:	800b883a 	mov	r5,r16
10006e48:	1505883a 	add	r2,r2,r20
10006e4c:	80800015 	stw	r2,0(r16)
10006e50:	0005fa40 	call	10005fa4 <_fflush_r>
10006e54:	103fa526 	beq	r2,zero,10006cec <__alt_data_end+0xf8006cec>
10006e58:	003f5006 	br	10006b9c <__alt_data_end+0xf8006b9c>
10006e5c:	95000044 	addi	r20,r18,1
10006e60:	02000044 	movi	r8,1
10006e64:	003f5806 	br	10006bc8 <__alt_data_end+0xf8006bc8>

10006e68 <_fwalk>:
10006e68:	defff804 	addi	sp,sp,-32
10006e6c:	dd400515 	stw	r21,20(sp)
10006e70:	2540b804 	addi	r21,r4,736
10006e74:	dd800615 	stw	r22,24(sp)
10006e78:	dd000415 	stw	r20,16(sp)
10006e7c:	dfc00715 	stw	ra,28(sp)
10006e80:	dcc00315 	stw	r19,12(sp)
10006e84:	dc800215 	stw	r18,8(sp)
10006e88:	dc400115 	stw	r17,4(sp)
10006e8c:	dc000015 	stw	r16,0(sp)
10006e90:	2829883a 	mov	r20,r5
10006e94:	002d883a 	mov	r22,zero
10006e98:	00065700 	call	10006570 <__sfp_lock_acquire>
10006e9c:	a8001426 	beq	r21,zero,10006ef0 <_fwalk+0x88>
10006ea0:	04ffffc4 	movi	r19,-1
10006ea4:	ac400117 	ldw	r17,4(r21)
10006ea8:	ac800217 	ldw	r18,8(r21)
10006eac:	8c7fffc4 	addi	r17,r17,-1
10006eb0:	88000d16 	blt	r17,zero,10006ee8 <_fwalk+0x80>
10006eb4:	94000304 	addi	r16,r18,12
10006eb8:	94800384 	addi	r18,r18,14
10006ebc:	80c0000f 	ldh	r3,0(r16)
10006ec0:	8c7fffc4 	addi	r17,r17,-1
10006ec4:	813ffd04 	addi	r4,r16,-12
10006ec8:	18000426 	beq	r3,zero,10006edc <_fwalk+0x74>
10006ecc:	90c0000f 	ldh	r3,0(r18)
10006ed0:	1cc00226 	beq	r3,r19,10006edc <_fwalk+0x74>
10006ed4:	a03ee83a 	callr	r20
10006ed8:	b0acb03a 	or	r22,r22,r2
10006edc:	84001a04 	addi	r16,r16,104
10006ee0:	94801a04 	addi	r18,r18,104
10006ee4:	8cfff51e 	bne	r17,r19,10006ebc <__alt_data_end+0xf8006ebc>
10006ee8:	ad400017 	ldw	r21,0(r21)
10006eec:	a83fed1e 	bne	r21,zero,10006ea4 <__alt_data_end+0xf8006ea4>
10006ef0:	00065740 	call	10006574 <__sfp_lock_release>
10006ef4:	b005883a 	mov	r2,r22
10006ef8:	dfc00717 	ldw	ra,28(sp)
10006efc:	dd800617 	ldw	r22,24(sp)
10006f00:	dd400517 	ldw	r21,20(sp)
10006f04:	dd000417 	ldw	r20,16(sp)
10006f08:	dcc00317 	ldw	r19,12(sp)
10006f0c:	dc800217 	ldw	r18,8(sp)
10006f10:	dc400117 	ldw	r17,4(sp)
10006f14:	dc000017 	ldw	r16,0(sp)
10006f18:	dec00804 	addi	sp,sp,32
10006f1c:	f800283a 	ret

10006f20 <_fwalk_reent>:
10006f20:	defff804 	addi	sp,sp,-32
10006f24:	dd400515 	stw	r21,20(sp)
10006f28:	2540b804 	addi	r21,r4,736
10006f2c:	dd800615 	stw	r22,24(sp)
10006f30:	dd000415 	stw	r20,16(sp)
10006f34:	dcc00315 	stw	r19,12(sp)
10006f38:	dfc00715 	stw	ra,28(sp)
10006f3c:	dc800215 	stw	r18,8(sp)
10006f40:	dc400115 	stw	r17,4(sp)
10006f44:	dc000015 	stw	r16,0(sp)
10006f48:	2027883a 	mov	r19,r4
10006f4c:	2829883a 	mov	r20,r5
10006f50:	002d883a 	mov	r22,zero
10006f54:	00065700 	call	10006570 <__sfp_lock_acquire>
10006f58:	a8001326 	beq	r21,zero,10006fa8 <_fwalk_reent+0x88>
10006f5c:	04bfffc4 	movi	r18,-1
10006f60:	ac400117 	ldw	r17,4(r21)
10006f64:	ac000217 	ldw	r16,8(r21)
10006f68:	8c7fffc4 	addi	r17,r17,-1
10006f6c:	88000c16 	blt	r17,zero,10006fa0 <_fwalk_reent+0x80>
10006f70:	84000304 	addi	r16,r16,12
10006f74:	80c0000f 	ldh	r3,0(r16)
10006f78:	8c7fffc4 	addi	r17,r17,-1
10006f7c:	817ffd04 	addi	r5,r16,-12
10006f80:	18000526 	beq	r3,zero,10006f98 <_fwalk_reent+0x78>
10006f84:	80c0008f 	ldh	r3,2(r16)
10006f88:	9809883a 	mov	r4,r19
10006f8c:	1c800226 	beq	r3,r18,10006f98 <_fwalk_reent+0x78>
10006f90:	a03ee83a 	callr	r20
10006f94:	b0acb03a 	or	r22,r22,r2
10006f98:	84001a04 	addi	r16,r16,104
10006f9c:	8cbff51e 	bne	r17,r18,10006f74 <__alt_data_end+0xf8006f74>
10006fa0:	ad400017 	ldw	r21,0(r21)
10006fa4:	a83fee1e 	bne	r21,zero,10006f60 <__alt_data_end+0xf8006f60>
10006fa8:	00065740 	call	10006574 <__sfp_lock_release>
10006fac:	b005883a 	mov	r2,r22
10006fb0:	dfc00717 	ldw	ra,28(sp)
10006fb4:	dd800617 	ldw	r22,24(sp)
10006fb8:	dd400517 	ldw	r21,20(sp)
10006fbc:	dd000417 	ldw	r20,16(sp)
10006fc0:	dcc00317 	ldw	r19,12(sp)
10006fc4:	dc800217 	ldw	r18,8(sp)
10006fc8:	dc400117 	ldw	r17,4(sp)
10006fcc:	dc000017 	ldw	r16,0(sp)
10006fd0:	dec00804 	addi	sp,sp,32
10006fd4:	f800283a 	ret

10006fd8 <_setlocale_r>:
10006fd8:	30001b26 	beq	r6,zero,10007048 <_setlocale_r+0x70>
10006fdc:	01440074 	movhi	r5,4097
10006fe0:	defffe04 	addi	sp,sp,-8
10006fe4:	29471c04 	addi	r5,r5,7280
10006fe8:	3009883a 	mov	r4,r6
10006fec:	dc000015 	stw	r16,0(sp)
10006ff0:	dfc00115 	stw	ra,4(sp)
10006ff4:	3021883a 	mov	r16,r6
10006ff8:	00096a40 	call	100096a4 <strcmp>
10006ffc:	1000061e 	bne	r2,zero,10007018 <_setlocale_r+0x40>
10007000:	00840074 	movhi	r2,4097
10007004:	10871b04 	addi	r2,r2,7276
10007008:	dfc00117 	ldw	ra,4(sp)
1000700c:	dc000017 	ldw	r16,0(sp)
10007010:	dec00204 	addi	sp,sp,8
10007014:	f800283a 	ret
10007018:	01440074 	movhi	r5,4097
1000701c:	29471b04 	addi	r5,r5,7276
10007020:	8009883a 	mov	r4,r16
10007024:	00096a40 	call	100096a4 <strcmp>
10007028:	103ff526 	beq	r2,zero,10007000 <__alt_data_end+0xf8007000>
1000702c:	01440074 	movhi	r5,4097
10007030:	29470604 	addi	r5,r5,7192
10007034:	8009883a 	mov	r4,r16
10007038:	00096a40 	call	100096a4 <strcmp>
1000703c:	103ff026 	beq	r2,zero,10007000 <__alt_data_end+0xf8007000>
10007040:	0005883a 	mov	r2,zero
10007044:	003ff006 	br	10007008 <__alt_data_end+0xf8007008>
10007048:	00840074 	movhi	r2,4097
1000704c:	10871b04 	addi	r2,r2,7276
10007050:	f800283a 	ret

10007054 <__locale_charset>:
10007054:	00840074 	movhi	r2,4097
10007058:	1088ce04 	addi	r2,r2,9016
1000705c:	f800283a 	ret

10007060 <__locale_mb_cur_max>:
10007060:	00840074 	movhi	r2,4097
10007064:	108e6a04 	addi	r2,r2,14760
10007068:	10800017 	ldw	r2,0(r2)
1000706c:	f800283a 	ret

10007070 <__locale_msgcharset>:
10007070:	00840074 	movhi	r2,4097
10007074:	1088c604 	addi	r2,r2,8984
10007078:	f800283a 	ret

1000707c <__locale_cjk_lang>:
1000707c:	0005883a 	mov	r2,zero
10007080:	f800283a 	ret

10007084 <_localeconv_r>:
10007084:	00840074 	movhi	r2,4097
10007088:	1088d604 	addi	r2,r2,9048
1000708c:	f800283a 	ret

10007090 <setlocale>:
10007090:	00c40074 	movhi	r3,4097
10007094:	18ce6904 	addi	r3,r3,14756
10007098:	2005883a 	mov	r2,r4
1000709c:	19000017 	ldw	r4,0(r3)
100070a0:	280d883a 	mov	r6,r5
100070a4:	100b883a 	mov	r5,r2
100070a8:	0006fd81 	jmpi	10006fd8 <_setlocale_r>

100070ac <localeconv>:
100070ac:	00840074 	movhi	r2,4097
100070b0:	1088d604 	addi	r2,r2,9048
100070b4:	f800283a 	ret

100070b8 <__smakebuf_r>:
100070b8:	2880030b 	ldhu	r2,12(r5)
100070bc:	10c0008c 	andi	r3,r2,2
100070c0:	1800401e 	bne	r3,zero,100071c4 <__smakebuf_r+0x10c>
100070c4:	deffec04 	addi	sp,sp,-80
100070c8:	dc000f15 	stw	r16,60(sp)
100070cc:	2821883a 	mov	r16,r5
100070d0:	2940038f 	ldh	r5,14(r5)
100070d4:	dc401015 	stw	r17,64(sp)
100070d8:	dfc01315 	stw	ra,76(sp)
100070dc:	dcc01215 	stw	r19,72(sp)
100070e0:	dc801115 	stw	r18,68(sp)
100070e4:	2023883a 	mov	r17,r4
100070e8:	28001b16 	blt	r5,zero,10007158 <__smakebuf_r+0xa0>
100070ec:	d80d883a 	mov	r6,sp
100070f0:	000b11c0 	call	1000b11c <_fstat_r>
100070f4:	10001716 	blt	r2,zero,10007154 <__smakebuf_r+0x9c>
100070f8:	d8800117 	ldw	r2,4(sp)
100070fc:	00e00014 	movui	r3,32768
10007100:	10bc000c 	andi	r2,r2,61440
10007104:	10c03726 	beq	r2,r3,100071e4 <__smakebuf_r+0x12c>
10007108:	80c0030b 	ldhu	r3,12(r16)
1000710c:	18c20014 	ori	r3,r3,2048
10007110:	80c0030d 	sth	r3,12(r16)
10007114:	00c80004 	movi	r3,8192
10007118:	10c03c1e 	bne	r2,r3,1000720c <__smakebuf_r+0x154>
1000711c:	8140038f 	ldh	r5,14(r16)
10007120:	8809883a 	mov	r4,r17
10007124:	000b1740 	call	1000b174 <_isatty_r>
10007128:	10004e26 	beq	r2,zero,10007264 <__smakebuf_r+0x1ac>
1000712c:	8080030b 	ldhu	r2,12(r16)
10007130:	04c00044 	movi	r19,1
10007134:	80c010c4 	addi	r3,r16,67
10007138:	14c4b03a 	or	r2,r2,r19
1000713c:	8080030d 	sth	r2,12(r16)
10007140:	80c00015 	stw	r3,0(r16)
10007144:	80c00415 	stw	r3,16(r16)
10007148:	84c00515 	stw	r19,20(r16)
1000714c:	04810004 	movi	r18,1024
10007150:	00000706 	br	10007170 <__smakebuf_r+0xb8>
10007154:	8080030b 	ldhu	r2,12(r16)
10007158:	10c0200c 	andi	r3,r2,128
1000715c:	18001f1e 	bne	r3,zero,100071dc <__smakebuf_r+0x124>
10007160:	04810004 	movi	r18,1024
10007164:	10820014 	ori	r2,r2,2048
10007168:	8080030d 	sth	r2,12(r16)
1000716c:	0027883a 	mov	r19,zero
10007170:	8809883a 	mov	r4,r17
10007174:	900b883a 	mov	r5,r18
10007178:	00072700 	call	10007270 <_malloc_r>
1000717c:	10002e26 	beq	r2,zero,10007238 <__smakebuf_r+0x180>
10007180:	80c0030b 	ldhu	r3,12(r16)
10007184:	01040034 	movhi	r4,4096
10007188:	21188304 	addi	r4,r4,25100
1000718c:	89000f15 	stw	r4,60(r17)
10007190:	18c02014 	ori	r3,r3,128
10007194:	80c0030d 	sth	r3,12(r16)
10007198:	80800015 	stw	r2,0(r16)
1000719c:	80800415 	stw	r2,16(r16)
100071a0:	84800515 	stw	r18,20(r16)
100071a4:	98001c1e 	bne	r19,zero,10007218 <__smakebuf_r+0x160>
100071a8:	dfc01317 	ldw	ra,76(sp)
100071ac:	dcc01217 	ldw	r19,72(sp)
100071b0:	dc801117 	ldw	r18,68(sp)
100071b4:	dc401017 	ldw	r17,64(sp)
100071b8:	dc000f17 	ldw	r16,60(sp)
100071bc:	dec01404 	addi	sp,sp,80
100071c0:	f800283a 	ret
100071c4:	288010c4 	addi	r2,r5,67
100071c8:	28800015 	stw	r2,0(r5)
100071cc:	28800415 	stw	r2,16(r5)
100071d0:	00800044 	movi	r2,1
100071d4:	28800515 	stw	r2,20(r5)
100071d8:	f800283a 	ret
100071dc:	04801004 	movi	r18,64
100071e0:	003fe006 	br	10007164 <__alt_data_end+0xf8007164>
100071e4:	81000a17 	ldw	r4,40(r16)
100071e8:	00c40074 	movhi	r3,4097
100071ec:	18e59004 	addi	r3,r3,-27072
100071f0:	20ffc51e 	bne	r4,r3,10007108 <__alt_data_end+0xf8007108>
100071f4:	80c0030b 	ldhu	r3,12(r16)
100071f8:	01010004 	movi	r4,1024
100071fc:	81001315 	stw	r4,76(r16)
10007200:	1906b03a 	or	r3,r3,r4
10007204:	80c0030d 	sth	r3,12(r16)
10007208:	003fc206 	br	10007114 <__alt_data_end+0xf8007114>
1000720c:	0027883a 	mov	r19,zero
10007210:	04810004 	movi	r18,1024
10007214:	003fd606 	br	10007170 <__alt_data_end+0xf8007170>
10007218:	8140038f 	ldh	r5,14(r16)
1000721c:	8809883a 	mov	r4,r17
10007220:	000b1740 	call	1000b174 <_isatty_r>
10007224:	103fe026 	beq	r2,zero,100071a8 <__alt_data_end+0xf80071a8>
10007228:	8080030b 	ldhu	r2,12(r16)
1000722c:	10800054 	ori	r2,r2,1
10007230:	8080030d 	sth	r2,12(r16)
10007234:	003fdc06 	br	100071a8 <__alt_data_end+0xf80071a8>
10007238:	8080030b 	ldhu	r2,12(r16)
1000723c:	10c0800c 	andi	r3,r2,512
10007240:	183fd91e 	bne	r3,zero,100071a8 <__alt_data_end+0xf80071a8>
10007244:	10800094 	ori	r2,r2,2
10007248:	80c010c4 	addi	r3,r16,67
1000724c:	8080030d 	sth	r2,12(r16)
10007250:	00800044 	movi	r2,1
10007254:	80c00015 	stw	r3,0(r16)
10007258:	80c00415 	stw	r3,16(r16)
1000725c:	80800515 	stw	r2,20(r16)
10007260:	003fd106 	br	100071a8 <__alt_data_end+0xf80071a8>
10007264:	04c00044 	movi	r19,1
10007268:	04810004 	movi	r18,1024
1000726c:	003fc006 	br	10007170 <__alt_data_end+0xf8007170>

10007270 <_malloc_r>:
10007270:	defff504 	addi	sp,sp,-44
10007274:	dc800315 	stw	r18,12(sp)
10007278:	dfc00a15 	stw	ra,40(sp)
1000727c:	df000915 	stw	fp,36(sp)
10007280:	ddc00815 	stw	r23,32(sp)
10007284:	dd800715 	stw	r22,28(sp)
10007288:	dd400615 	stw	r21,24(sp)
1000728c:	dd000515 	stw	r20,20(sp)
10007290:	dcc00415 	stw	r19,16(sp)
10007294:	dc400215 	stw	r17,8(sp)
10007298:	dc000115 	stw	r16,4(sp)
1000729c:	288002c4 	addi	r2,r5,11
100072a0:	00c00584 	movi	r3,22
100072a4:	2025883a 	mov	r18,r4
100072a8:	18802a2e 	bgeu	r3,r2,10007354 <_malloc_r+0xe4>
100072ac:	047ffe04 	movi	r17,-8
100072b0:	1462703a 	and	r17,r2,r17
100072b4:	88009e16 	blt	r17,zero,10007530 <_malloc_r+0x2c0>
100072b8:	89409d36 	bltu	r17,r5,10007530 <_malloc_r+0x2c0>
100072bc:	000f17c0 	call	1000f17c <__malloc_lock>
100072c0:	00807dc4 	movi	r2,503
100072c4:	14402736 	bltu	r2,r17,10007364 <_malloc_r+0xf4>
100072c8:	8806d0fa 	srli	r3,r17,3
100072cc:	04c40074 	movhi	r19,4097
100072d0:	9cc8e404 	addi	r19,r19,9104
100072d4:	18c5883a 	add	r2,r3,r3
100072d8:	1085883a 	add	r2,r2,r2
100072dc:	1085883a 	add	r2,r2,r2
100072e0:	9885883a 	add	r2,r19,r2
100072e4:	14000317 	ldw	r16,12(r2)
100072e8:	80814a26 	beq	r16,r2,10007814 <_malloc_r+0x5a4>
100072ec:	80c00117 	ldw	r3,4(r16)
100072f0:	81000317 	ldw	r4,12(r16)
100072f4:	00bfff04 	movi	r2,-4
100072f8:	1884703a 	and	r2,r3,r2
100072fc:	81400217 	ldw	r5,8(r16)
10007300:	8085883a 	add	r2,r16,r2
10007304:	10c00117 	ldw	r3,4(r2)
10007308:	29000315 	stw	r4,12(r5)
1000730c:	21400215 	stw	r5,8(r4)
10007310:	18c00054 	ori	r3,r3,1
10007314:	10c00115 	stw	r3,4(r2)
10007318:	9009883a 	mov	r4,r18
1000731c:	000f19c0 	call	1000f19c <__malloc_unlock>
10007320:	80800204 	addi	r2,r16,8
10007324:	dfc00a17 	ldw	ra,40(sp)
10007328:	df000917 	ldw	fp,36(sp)
1000732c:	ddc00817 	ldw	r23,32(sp)
10007330:	dd800717 	ldw	r22,28(sp)
10007334:	dd400617 	ldw	r21,24(sp)
10007338:	dd000517 	ldw	r20,20(sp)
1000733c:	dcc00417 	ldw	r19,16(sp)
10007340:	dc800317 	ldw	r18,12(sp)
10007344:	dc400217 	ldw	r17,8(sp)
10007348:	dc000117 	ldw	r16,4(sp)
1000734c:	dec00b04 	addi	sp,sp,44
10007350:	f800283a 	ret
10007354:	04400404 	movi	r17,16
10007358:	89407536 	bltu	r17,r5,10007530 <_malloc_r+0x2c0>
1000735c:	000f17c0 	call	1000f17c <__malloc_lock>
10007360:	003fd906 	br	100072c8 <__alt_data_end+0xf80072c8>
10007364:	8806d27a 	srli	r3,r17,9
10007368:	18007526 	beq	r3,zero,10007540 <_malloc_r+0x2d0>
1000736c:	00800104 	movi	r2,4
10007370:	10c0ef36 	bltu	r2,r3,10007730 <_malloc_r+0x4c0>
10007374:	8806d1ba 	srli	r3,r17,6
10007378:	19c00e04 	addi	r7,r3,56
1000737c:	39cb883a 	add	r5,r7,r7
10007380:	04c40074 	movhi	r19,4097
10007384:	294b883a 	add	r5,r5,r5
10007388:	9cc8e404 	addi	r19,r19,9104
1000738c:	294b883a 	add	r5,r5,r5
10007390:	994b883a 	add	r5,r19,r5
10007394:	2c000317 	ldw	r16,12(r5)
10007398:	2c000e26 	beq	r5,r16,100073d4 <_malloc_r+0x164>
1000739c:	80800117 	ldw	r2,4(r16)
100073a0:	01bfff04 	movi	r6,-4
100073a4:	010003c4 	movi	r4,15
100073a8:	1184703a 	and	r2,r2,r6
100073ac:	1447c83a 	sub	r3,r2,r17
100073b0:	20c00716 	blt	r4,r3,100073d0 <_malloc_r+0x160>
100073b4:	1800650e 	bge	r3,zero,1000754c <_malloc_r+0x2dc>
100073b8:	84000317 	ldw	r16,12(r16)
100073bc:	2c000526 	beq	r5,r16,100073d4 <_malloc_r+0x164>
100073c0:	80800117 	ldw	r2,4(r16)
100073c4:	1184703a 	and	r2,r2,r6
100073c8:	1447c83a 	sub	r3,r2,r17
100073cc:	20fff90e 	bge	r4,r3,100073b4 <__alt_data_end+0xf80073b4>
100073d0:	39ffffc4 	addi	r7,r7,-1
100073d4:	38c00044 	addi	r3,r7,1
100073d8:	01840074 	movhi	r6,4097
100073dc:	9c000417 	ldw	r16,16(r19)
100073e0:	3188e404 	addi	r6,r6,9104
100073e4:	32400204 	addi	r9,r6,8
100073e8:	82410326 	beq	r16,r9,100077f8 <_malloc_r+0x588>
100073ec:	81000117 	ldw	r4,4(r16)
100073f0:	00bfff04 	movi	r2,-4
100073f4:	208e703a 	and	r7,r4,r2
100073f8:	3c45c83a 	sub	r2,r7,r17
100073fc:	010003c4 	movi	r4,15
10007400:	2080ee16 	blt	r4,r2,100077bc <_malloc_r+0x54c>
10007404:	32400515 	stw	r9,20(r6)
10007408:	32400415 	stw	r9,16(r6)
1000740c:	1000510e 	bge	r2,zero,10007554 <_malloc_r+0x2e4>
10007410:	00807fc4 	movi	r2,511
10007414:	11c0ce36 	bltu	r2,r7,10007750 <_malloc_r+0x4e0>
10007418:	3808d0fa 	srli	r4,r7,3
1000741c:	01c00044 	movi	r7,1
10007420:	30800117 	ldw	r2,4(r6)
10007424:	210b883a 	add	r5,r4,r4
10007428:	294b883a 	add	r5,r5,r5
1000742c:	2009d0ba 	srai	r4,r4,2
10007430:	294b883a 	add	r5,r5,r5
10007434:	298b883a 	add	r5,r5,r6
10007438:	2a000217 	ldw	r8,8(r5)
1000743c:	3908983a 	sll	r4,r7,r4
10007440:	81400315 	stw	r5,12(r16)
10007444:	82000215 	stw	r8,8(r16)
10007448:	2088b03a 	or	r4,r4,r2
1000744c:	2c000215 	stw	r16,8(r5)
10007450:	31000115 	stw	r4,4(r6)
10007454:	44000315 	stw	r16,12(r8)
10007458:	1805d0ba 	srai	r2,r3,2
1000745c:	01400044 	movi	r5,1
10007460:	288a983a 	sll	r5,r5,r2
10007464:	21404336 	bltu	r4,r5,10007574 <_malloc_r+0x304>
10007468:	2144703a 	and	r2,r4,r5
1000746c:	10000a1e 	bne	r2,zero,10007498 <_malloc_r+0x228>
10007470:	00bfff04 	movi	r2,-4
10007474:	294b883a 	add	r5,r5,r5
10007478:	1886703a 	and	r3,r3,r2
1000747c:	2144703a 	and	r2,r4,r5
10007480:	18c00104 	addi	r3,r3,4
10007484:	1000041e 	bne	r2,zero,10007498 <_malloc_r+0x228>
10007488:	294b883a 	add	r5,r5,r5
1000748c:	2144703a 	and	r2,r4,r5
10007490:	18c00104 	addi	r3,r3,4
10007494:	103ffc26 	beq	r2,zero,10007488 <__alt_data_end+0xf8007488>
10007498:	023fff04 	movi	r8,-4
1000749c:	01c003c4 	movi	r7,15
100074a0:	18c5883a 	add	r2,r3,r3
100074a4:	1085883a 	add	r2,r2,r2
100074a8:	1085883a 	add	r2,r2,r2
100074ac:	9895883a 	add	r10,r19,r2
100074b0:	52c00304 	addi	r11,r10,12
100074b4:	1819883a 	mov	r12,r3
100074b8:	5c000017 	ldw	r16,0(r11)
100074bc:	59bffd04 	addi	r6,r11,-12
100074c0:	8180041e 	bne	r16,r6,100074d4 <_malloc_r+0x264>
100074c4:	0000ce06 	br	10007800 <_malloc_r+0x590>
100074c8:	2000d70e 	bge	r4,zero,10007828 <_malloc_r+0x5b8>
100074cc:	84000317 	ldw	r16,12(r16)
100074d0:	8180cb26 	beq	r16,r6,10007800 <_malloc_r+0x590>
100074d4:	80800117 	ldw	r2,4(r16)
100074d8:	1204703a 	and	r2,r2,r8
100074dc:	1449c83a 	sub	r4,r2,r17
100074e0:	393ff90e 	bge	r7,r4,100074c8 <__alt_data_end+0xf80074c8>
100074e4:	80800317 	ldw	r2,12(r16)
100074e8:	80c00217 	ldw	r3,8(r16)
100074ec:	89400054 	ori	r5,r17,1
100074f0:	81400115 	stw	r5,4(r16)
100074f4:	18800315 	stw	r2,12(r3)
100074f8:	10c00215 	stw	r3,8(r2)
100074fc:	8463883a 	add	r17,r16,r17
10007500:	9c400515 	stw	r17,20(r19)
10007504:	9c400415 	stw	r17,16(r19)
10007508:	20800054 	ori	r2,r4,1
1000750c:	88800115 	stw	r2,4(r17)
10007510:	8a400315 	stw	r9,12(r17)
10007514:	8a400215 	stw	r9,8(r17)
10007518:	8923883a 	add	r17,r17,r4
1000751c:	89000015 	stw	r4,0(r17)
10007520:	9009883a 	mov	r4,r18
10007524:	000f19c0 	call	1000f19c <__malloc_unlock>
10007528:	80800204 	addi	r2,r16,8
1000752c:	003f7d06 	br	10007324 <__alt_data_end+0xf8007324>
10007530:	00800304 	movi	r2,12
10007534:	90800015 	stw	r2,0(r18)
10007538:	0005883a 	mov	r2,zero
1000753c:	003f7906 	br	10007324 <__alt_data_end+0xf8007324>
10007540:	01401f84 	movi	r5,126
10007544:	01c00fc4 	movi	r7,63
10007548:	003f8d06 	br	10007380 <__alt_data_end+0xf8007380>
1000754c:	81000317 	ldw	r4,12(r16)
10007550:	003f6a06 	br	100072fc <__alt_data_end+0xf80072fc>
10007554:	81c5883a 	add	r2,r16,r7
10007558:	10c00117 	ldw	r3,4(r2)
1000755c:	9009883a 	mov	r4,r18
10007560:	18c00054 	ori	r3,r3,1
10007564:	10c00115 	stw	r3,4(r2)
10007568:	000f19c0 	call	1000f19c <__malloc_unlock>
1000756c:	80800204 	addi	r2,r16,8
10007570:	003f6c06 	br	10007324 <__alt_data_end+0xf8007324>
10007574:	9c000217 	ldw	r16,8(r19)
10007578:	00bfff04 	movi	r2,-4
1000757c:	85800117 	ldw	r22,4(r16)
10007580:	b0ac703a 	and	r22,r22,r2
10007584:	b4400336 	bltu	r22,r17,10007594 <_malloc_r+0x324>
10007588:	b445c83a 	sub	r2,r22,r17
1000758c:	00c003c4 	movi	r3,15
10007590:	18805d16 	blt	r3,r2,10007708 <_malloc_r+0x498>
10007594:	05c40074 	movhi	r23,4097
10007598:	00840074 	movhi	r2,4097
1000759c:	bdce6b04 	addi	r23,r23,14764
100075a0:	10953904 	addi	r2,r2,21732
100075a4:	15400017 	ldw	r21,0(r2)
100075a8:	b9000017 	ldw	r4,0(r23)
100075ac:	00ffffc4 	movi	r3,-1
100075b0:	858d883a 	add	r6,r16,r22
100075b4:	8d6b883a 	add	r21,r17,r21
100075b8:	20c0e426 	beq	r4,r3,1000794c <_malloc_r+0x6dc>
100075bc:	ad4403c4 	addi	r21,r21,4111
100075c0:	00fc0004 	movi	r3,-4096
100075c4:	a8ea703a 	and	r21,r21,r3
100075c8:	9009883a 	mov	r4,r18
100075cc:	a80b883a 	mov	r5,r21
100075d0:	d9800015 	stw	r6,0(sp)
100075d4:	00095140 	call	10009514 <_sbrk_r>
100075d8:	00ffffc4 	movi	r3,-1
100075dc:	1029883a 	mov	r20,r2
100075e0:	d9800017 	ldw	r6,0(sp)
100075e4:	10c0a426 	beq	r2,r3,10007878 <_malloc_r+0x608>
100075e8:	1180a236 	bltu	r2,r6,10007874 <_malloc_r+0x604>
100075ec:	07040074 	movhi	fp,4097
100075f0:	e7154204 	addi	fp,fp,21768
100075f4:	e0c00017 	ldw	r3,0(fp)
100075f8:	a8c7883a 	add	r3,r21,r3
100075fc:	e0c00015 	stw	r3,0(fp)
10007600:	3500da26 	beq	r6,r20,1000796c <_malloc_r+0x6fc>
10007604:	b9000017 	ldw	r4,0(r23)
10007608:	00bfffc4 	movi	r2,-1
1000760c:	2080e426 	beq	r4,r2,100079a0 <_malloc_r+0x730>
10007610:	a185c83a 	sub	r2,r20,r6
10007614:	1885883a 	add	r2,r3,r2
10007618:	e0800015 	stw	r2,0(fp)
1000761c:	a0c001cc 	andi	r3,r20,7
10007620:	1800b526 	beq	r3,zero,100078f8 <_malloc_r+0x688>
10007624:	a0e9c83a 	sub	r20,r20,r3
10007628:	00840204 	movi	r2,4104
1000762c:	a5000204 	addi	r20,r20,8
10007630:	10c7c83a 	sub	r3,r2,r3
10007634:	a545883a 	add	r2,r20,r21
10007638:	1083ffcc 	andi	r2,r2,4095
1000763c:	18abc83a 	sub	r21,r3,r2
10007640:	9009883a 	mov	r4,r18
10007644:	a80b883a 	mov	r5,r21
10007648:	00095140 	call	10009514 <_sbrk_r>
1000764c:	00ffffc4 	movi	r3,-1
10007650:	10c0d026 	beq	r2,r3,10007994 <_malloc_r+0x724>
10007654:	1507c83a 	sub	r3,r2,r20
10007658:	a8c7883a 	add	r3,r21,r3
1000765c:	18c00054 	ori	r3,r3,1
10007660:	e0800017 	ldw	r2,0(fp)
10007664:	9d000215 	stw	r20,8(r19)
10007668:	a0c00115 	stw	r3,4(r20)
1000766c:	a887883a 	add	r3,r21,r2
10007670:	e0c00015 	stw	r3,0(fp)
10007674:	84c00e26 	beq	r16,r19,100076b0 <_malloc_r+0x440>
10007678:	018003c4 	movi	r6,15
1000767c:	3580a02e 	bgeu	r6,r22,10007900 <_malloc_r+0x690>
10007680:	81400117 	ldw	r5,4(r16)
10007684:	013ffe04 	movi	r4,-8
10007688:	b0bffd04 	addi	r2,r22,-12
1000768c:	1104703a 	and	r2,r2,r4
10007690:	2900004c 	andi	r4,r5,1
10007694:	1108b03a 	or	r4,r2,r4
10007698:	81000115 	stw	r4,4(r16)
1000769c:	01400144 	movi	r5,5
100076a0:	8089883a 	add	r4,r16,r2
100076a4:	21400115 	stw	r5,4(r4)
100076a8:	21400215 	stw	r5,8(r4)
100076ac:	3080c036 	bltu	r6,r2,100079b0 <_malloc_r+0x740>
100076b0:	00840074 	movhi	r2,4097
100076b4:	10953804 	addi	r2,r2,21728
100076b8:	11000017 	ldw	r4,0(r2)
100076bc:	20c0012e 	bgeu	r4,r3,100076c4 <_malloc_r+0x454>
100076c0:	10c00015 	stw	r3,0(r2)
100076c4:	00840074 	movhi	r2,4097
100076c8:	10953704 	addi	r2,r2,21724
100076cc:	11000017 	ldw	r4,0(r2)
100076d0:	9c000217 	ldw	r16,8(r19)
100076d4:	20c0012e 	bgeu	r4,r3,100076dc <_malloc_r+0x46c>
100076d8:	10c00015 	stw	r3,0(r2)
100076dc:	80c00117 	ldw	r3,4(r16)
100076e0:	00bfff04 	movi	r2,-4
100076e4:	1886703a 	and	r3,r3,r2
100076e8:	1c45c83a 	sub	r2,r3,r17
100076ec:	1c400236 	bltu	r3,r17,100076f8 <_malloc_r+0x488>
100076f0:	00c003c4 	movi	r3,15
100076f4:	18800416 	blt	r3,r2,10007708 <_malloc_r+0x498>
100076f8:	9009883a 	mov	r4,r18
100076fc:	000f19c0 	call	1000f19c <__malloc_unlock>
10007700:	0005883a 	mov	r2,zero
10007704:	003f0706 	br	10007324 <__alt_data_end+0xf8007324>
10007708:	88c00054 	ori	r3,r17,1
1000770c:	80c00115 	stw	r3,4(r16)
10007710:	8463883a 	add	r17,r16,r17
10007714:	10800054 	ori	r2,r2,1
10007718:	9c400215 	stw	r17,8(r19)
1000771c:	88800115 	stw	r2,4(r17)
10007720:	9009883a 	mov	r4,r18
10007724:	000f19c0 	call	1000f19c <__malloc_unlock>
10007728:	80800204 	addi	r2,r16,8
1000772c:	003efd06 	br	10007324 <__alt_data_end+0xf8007324>
10007730:	00800504 	movi	r2,20
10007734:	10c0482e 	bgeu	r2,r3,10007858 <_malloc_r+0x5e8>
10007738:	00801504 	movi	r2,84
1000773c:	10c06836 	bltu	r2,r3,100078e0 <_malloc_r+0x670>
10007740:	8806d33a 	srli	r3,r17,12
10007744:	19c01b84 	addi	r7,r3,110
10007748:	39cb883a 	add	r5,r7,r7
1000774c:	003f0c06 	br	10007380 <__alt_data_end+0xf8007380>
10007750:	3804d27a 	srli	r2,r7,9
10007754:	01000104 	movi	r4,4
10007758:	2080422e 	bgeu	r4,r2,10007864 <_malloc_r+0x5f4>
1000775c:	01000504 	movi	r4,20
10007760:	20807c36 	bltu	r4,r2,10007954 <_malloc_r+0x6e4>
10007764:	110016c4 	addi	r4,r2,91
10007768:	210b883a 	add	r5,r4,r4
1000776c:	294b883a 	add	r5,r5,r5
10007770:	294b883a 	add	r5,r5,r5
10007774:	994b883a 	add	r5,r19,r5
10007778:	28800217 	ldw	r2,8(r5)
1000777c:	02040074 	movhi	r8,4097
10007780:	4208e404 	addi	r8,r8,9104
10007784:	11406326 	beq	r2,r5,10007914 <_malloc_r+0x6a4>
10007788:	01bfff04 	movi	r6,-4
1000778c:	11000117 	ldw	r4,4(r2)
10007790:	2188703a 	and	r4,r4,r6
10007794:	3900022e 	bgeu	r7,r4,100077a0 <_malloc_r+0x530>
10007798:	10800217 	ldw	r2,8(r2)
1000779c:	28bffb1e 	bne	r5,r2,1000778c <__alt_data_end+0xf800778c>
100077a0:	11800317 	ldw	r6,12(r2)
100077a4:	99000117 	ldw	r4,4(r19)
100077a8:	81800315 	stw	r6,12(r16)
100077ac:	80800215 	stw	r2,8(r16)
100077b0:	34000215 	stw	r16,8(r6)
100077b4:	14000315 	stw	r16,12(r2)
100077b8:	003f2706 	br	10007458 <__alt_data_end+0xf8007458>
100077bc:	88c00054 	ori	r3,r17,1
100077c0:	80c00115 	stw	r3,4(r16)
100077c4:	8463883a 	add	r17,r16,r17
100077c8:	34400515 	stw	r17,20(r6)
100077cc:	34400415 	stw	r17,16(r6)
100077d0:	10c00054 	ori	r3,r2,1
100077d4:	8a400315 	stw	r9,12(r17)
100077d8:	8a400215 	stw	r9,8(r17)
100077dc:	88c00115 	stw	r3,4(r17)
100077e0:	88a3883a 	add	r17,r17,r2
100077e4:	88800015 	stw	r2,0(r17)
100077e8:	9009883a 	mov	r4,r18
100077ec:	000f19c0 	call	1000f19c <__malloc_unlock>
100077f0:	80800204 	addi	r2,r16,8
100077f4:	003ecb06 	br	10007324 <__alt_data_end+0xf8007324>
100077f8:	31000117 	ldw	r4,4(r6)
100077fc:	003f1606 	br	10007458 <__alt_data_end+0xf8007458>
10007800:	63000044 	addi	r12,r12,1
10007804:	608000cc 	andi	r2,r12,3
10007808:	5ac00204 	addi	r11,r11,8
1000780c:	103f2a1e 	bne	r2,zero,100074b8 <__alt_data_end+0xf80074b8>
10007810:	00002106 	br	10007898 <_malloc_r+0x628>
10007814:	80800204 	addi	r2,r16,8
10007818:	84000517 	ldw	r16,20(r16)
1000781c:	143eb31e 	bne	r2,r16,100072ec <__alt_data_end+0xf80072ec>
10007820:	18c00084 	addi	r3,r3,2
10007824:	003eec06 	br	100073d8 <__alt_data_end+0xf80073d8>
10007828:	8085883a 	add	r2,r16,r2
1000782c:	10c00117 	ldw	r3,4(r2)
10007830:	81000317 	ldw	r4,12(r16)
10007834:	81400217 	ldw	r5,8(r16)
10007838:	18c00054 	ori	r3,r3,1
1000783c:	10c00115 	stw	r3,4(r2)
10007840:	29000315 	stw	r4,12(r5)
10007844:	21400215 	stw	r5,8(r4)
10007848:	9009883a 	mov	r4,r18
1000784c:	000f19c0 	call	1000f19c <__malloc_unlock>
10007850:	80800204 	addi	r2,r16,8
10007854:	003eb306 	br	10007324 <__alt_data_end+0xf8007324>
10007858:	19c016c4 	addi	r7,r3,91
1000785c:	39cb883a 	add	r5,r7,r7
10007860:	003ec706 	br	10007380 <__alt_data_end+0xf8007380>
10007864:	3804d1ba 	srli	r2,r7,6
10007868:	11000e04 	addi	r4,r2,56
1000786c:	210b883a 	add	r5,r4,r4
10007870:	003fbe06 	br	1000776c <__alt_data_end+0xf800776c>
10007874:	84ff5d26 	beq	r16,r19,100075ec <__alt_data_end+0xf80075ec>
10007878:	9c000217 	ldw	r16,8(r19)
1000787c:	00bfff04 	movi	r2,-4
10007880:	80c00117 	ldw	r3,4(r16)
10007884:	1886703a 	and	r3,r3,r2
10007888:	003f9706 	br	100076e8 <__alt_data_end+0xf80076e8>
1000788c:	52800017 	ldw	r10,0(r10)
10007890:	18ffffc4 	addi	r3,r3,-1
10007894:	50805c1e 	bne	r10,r2,10007a08 <_malloc_r+0x798>
10007898:	190000cc 	andi	r4,r3,3
1000789c:	50bffe04 	addi	r2,r10,-8
100078a0:	203ffa1e 	bne	r4,zero,1000788c <__alt_data_end+0xf800788c>
100078a4:	98800117 	ldw	r2,4(r19)
100078a8:	0146303a 	nor	r3,zero,r5
100078ac:	1884703a 	and	r2,r3,r2
100078b0:	98800115 	stw	r2,4(r19)
100078b4:	294b883a 	add	r5,r5,r5
100078b8:	117f2e36 	bltu	r2,r5,10007574 <__alt_data_end+0xf8007574>
100078bc:	283f2d26 	beq	r5,zero,10007574 <__alt_data_end+0xf8007574>
100078c0:	1146703a 	and	r3,r2,r5
100078c4:	1800521e 	bne	r3,zero,10007a10 <_malloc_r+0x7a0>
100078c8:	6007883a 	mov	r3,r12
100078cc:	294b883a 	add	r5,r5,r5
100078d0:	1148703a 	and	r4,r2,r5
100078d4:	18c00104 	addi	r3,r3,4
100078d8:	203ffc26 	beq	r4,zero,100078cc <__alt_data_end+0xf80078cc>
100078dc:	003ef006 	br	100074a0 <__alt_data_end+0xf80074a0>
100078e0:	00805504 	movi	r2,340
100078e4:	10c01336 	bltu	r2,r3,10007934 <_malloc_r+0x6c4>
100078e8:	8806d3fa 	srli	r3,r17,15
100078ec:	19c01dc4 	addi	r7,r3,119
100078f0:	39cb883a 	add	r5,r7,r7
100078f4:	003ea206 	br	10007380 <__alt_data_end+0xf8007380>
100078f8:	00c40004 	movi	r3,4096
100078fc:	003f4d06 	br	10007634 <__alt_data_end+0xf8007634>
10007900:	00800044 	movi	r2,1
10007904:	a0800115 	stw	r2,4(r20)
10007908:	a021883a 	mov	r16,r20
1000790c:	0007883a 	mov	r3,zero
10007910:	003f7506 	br	100076e8 <__alt_data_end+0xf80076e8>
10007914:	200bd0ba 	srai	r5,r4,2
10007918:	01800044 	movi	r6,1
1000791c:	41000117 	ldw	r4,4(r8)
10007920:	314a983a 	sll	r5,r6,r5
10007924:	100d883a 	mov	r6,r2
10007928:	2908b03a 	or	r4,r5,r4
1000792c:	41000115 	stw	r4,4(r8)
10007930:	003f9d06 	br	100077a8 <__alt_data_end+0xf80077a8>
10007934:	00815504 	movi	r2,1364
10007938:	10c01336 	bltu	r2,r3,10007988 <_malloc_r+0x718>
1000793c:	8806d4ba 	srli	r3,r17,18
10007940:	19c01f04 	addi	r7,r3,124
10007944:	39cb883a 	add	r5,r7,r7
10007948:	003e8d06 	br	10007380 <__alt_data_end+0xf8007380>
1000794c:	ad400404 	addi	r21,r21,16
10007950:	003f1d06 	br	100075c8 <__alt_data_end+0xf80075c8>
10007954:	01001504 	movi	r4,84
10007958:	20801c36 	bltu	r4,r2,100079cc <_malloc_r+0x75c>
1000795c:	3804d33a 	srli	r2,r7,12
10007960:	11001b84 	addi	r4,r2,110
10007964:	210b883a 	add	r5,r4,r4
10007968:	003f8006 	br	1000776c <__alt_data_end+0xf800776c>
1000796c:	3083ffcc 	andi	r2,r6,4095
10007970:	103f241e 	bne	r2,zero,10007604 <__alt_data_end+0xf8007604>
10007974:	99000217 	ldw	r4,8(r19)
10007978:	ad85883a 	add	r2,r21,r22
1000797c:	10800054 	ori	r2,r2,1
10007980:	20800115 	stw	r2,4(r4)
10007984:	003f4a06 	br	100076b0 <__alt_data_end+0xf80076b0>
10007988:	01403f04 	movi	r5,252
1000798c:	01c01f84 	movi	r7,126
10007990:	003e7b06 	br	10007380 <__alt_data_end+0xf8007380>
10007994:	00c00044 	movi	r3,1
10007998:	002b883a 	mov	r21,zero
1000799c:	003f3006 	br	10007660 <__alt_data_end+0xf8007660>
100079a0:	00840074 	movhi	r2,4097
100079a4:	108e6b04 	addi	r2,r2,14764
100079a8:	15000015 	stw	r20,0(r2)
100079ac:	003f1b06 	br	1000761c <__alt_data_end+0xf800761c>
100079b0:	9009883a 	mov	r4,r18
100079b4:	81400204 	addi	r5,r16,8
100079b8:	00066d40 	call	100066d4 <_free_r>
100079bc:	00840074 	movhi	r2,4097
100079c0:	10954204 	addi	r2,r2,21768
100079c4:	10c00017 	ldw	r3,0(r2)
100079c8:	003f3906 	br	100076b0 <__alt_data_end+0xf80076b0>
100079cc:	01005504 	movi	r4,340
100079d0:	20800436 	bltu	r4,r2,100079e4 <_malloc_r+0x774>
100079d4:	3804d3fa 	srli	r2,r7,15
100079d8:	11001dc4 	addi	r4,r2,119
100079dc:	210b883a 	add	r5,r4,r4
100079e0:	003f6206 	br	1000776c <__alt_data_end+0xf800776c>
100079e4:	01015504 	movi	r4,1364
100079e8:	20800436 	bltu	r4,r2,100079fc <_malloc_r+0x78c>
100079ec:	3804d4ba 	srli	r2,r7,18
100079f0:	11001f04 	addi	r4,r2,124
100079f4:	210b883a 	add	r5,r4,r4
100079f8:	003f5c06 	br	1000776c <__alt_data_end+0xf800776c>
100079fc:	01403f04 	movi	r5,252
10007a00:	01001f84 	movi	r4,126
10007a04:	003f5906 	br	1000776c <__alt_data_end+0xf800776c>
10007a08:	98800117 	ldw	r2,4(r19)
10007a0c:	003fa906 	br	100078b4 <__alt_data_end+0xf80078b4>
10007a10:	6007883a 	mov	r3,r12
10007a14:	003ea206 	br	100074a0 <__alt_data_end+0xf80074a0>

10007a18 <memchr>:
10007a18:	208000cc 	andi	r2,r4,3
10007a1c:	280f883a 	mov	r7,r5
10007a20:	10003526 	beq	r2,zero,10007af8 <memchr+0xe0>
10007a24:	30bfffc4 	addi	r2,r6,-1
10007a28:	30001b26 	beq	r6,zero,10007a98 <memchr+0x80>
10007a2c:	21800003 	ldbu	r6,0(r4)
10007a30:	28c03fcc 	andi	r3,r5,255
10007a34:	30c01a26 	beq	r6,r3,10007aa0 <memchr+0x88>
10007a38:	180d883a 	mov	r6,r3
10007a3c:	00000406 	br	10007a50 <memchr+0x38>
10007a40:	10001526 	beq	r2,zero,10007a98 <memchr+0x80>
10007a44:	20c00003 	ldbu	r3,0(r4)
10007a48:	10bfffc4 	addi	r2,r2,-1
10007a4c:	19801426 	beq	r3,r6,10007aa0 <memchr+0x88>
10007a50:	21000044 	addi	r4,r4,1
10007a54:	20c000cc 	andi	r3,r4,3
10007a58:	183ff91e 	bne	r3,zero,10007a40 <__alt_data_end+0xf8007a40>
10007a5c:	024000c4 	movi	r9,3
10007a60:	48801136 	bltu	r9,r2,10007aa8 <memchr+0x90>
10007a64:	10000c26 	beq	r2,zero,10007a98 <memchr+0x80>
10007a68:	20c00003 	ldbu	r3,0(r4)
10007a6c:	29403fcc 	andi	r5,r5,255
10007a70:	19400b26 	beq	r3,r5,10007aa0 <memchr+0x88>
10007a74:	20c00044 	addi	r3,r4,1
10007a78:	2085883a 	add	r2,r4,r2
10007a7c:	39803fcc 	andi	r6,r7,255
10007a80:	00000306 	br	10007a90 <memchr+0x78>
10007a84:	18c00044 	addi	r3,r3,1
10007a88:	197fffc3 	ldbu	r5,-1(r3)
10007a8c:	29800426 	beq	r5,r6,10007aa0 <memchr+0x88>
10007a90:	1809883a 	mov	r4,r3
10007a94:	18bffb1e 	bne	r3,r2,10007a84 <__alt_data_end+0xf8007a84>
10007a98:	0005883a 	mov	r2,zero
10007a9c:	f800283a 	ret
10007aa0:	2005883a 	mov	r2,r4
10007aa4:	f800283a 	ret
10007aa8:	28c03fcc 	andi	r3,r5,255
10007aac:	1810923a 	slli	r8,r3,8
10007ab0:	02ffbff4 	movhi	r11,65279
10007ab4:	02a02074 	movhi	r10,32897
10007ab8:	40c6b03a 	or	r3,r8,r3
10007abc:	1810943a 	slli	r8,r3,16
10007ac0:	5affbfc4 	addi	r11,r11,-257
10007ac4:	52a02004 	addi	r10,r10,-32640
10007ac8:	40d0b03a 	or	r8,r8,r3
10007acc:	20c00017 	ldw	r3,0(r4)
10007ad0:	40c6f03a 	xor	r3,r8,r3
10007ad4:	1acd883a 	add	r6,r3,r11
10007ad8:	00c6303a 	nor	r3,zero,r3
10007adc:	30c6703a 	and	r3,r6,r3
10007ae0:	1a86703a 	and	r3,r3,r10
10007ae4:	183fdf1e 	bne	r3,zero,10007a64 <__alt_data_end+0xf8007a64>
10007ae8:	10bfff04 	addi	r2,r2,-4
10007aec:	21000104 	addi	r4,r4,4
10007af0:	48bff636 	bltu	r9,r2,10007acc <__alt_data_end+0xf8007acc>
10007af4:	003fdb06 	br	10007a64 <__alt_data_end+0xf8007a64>
10007af8:	3005883a 	mov	r2,r6
10007afc:	003fd706 	br	10007a5c <__alt_data_end+0xf8007a5c>

10007b00 <memcpy>:
10007b00:	deffff04 	addi	sp,sp,-4
10007b04:	dc000015 	stw	r16,0(sp)
10007b08:	00c003c4 	movi	r3,15
10007b0c:	2005883a 	mov	r2,r4
10007b10:	1980432e 	bgeu	r3,r6,10007c20 <memcpy+0x120>
10007b14:	2146b03a 	or	r3,r4,r5
10007b18:	18c000cc 	andi	r3,r3,3
10007b1c:	1800421e 	bne	r3,zero,10007c28 <memcpy+0x128>
10007b20:	343ffc04 	addi	r16,r6,-16
10007b24:	8020d13a 	srli	r16,r16,4
10007b28:	28c00104 	addi	r3,r5,4
10007b2c:	23400104 	addi	r13,r4,4
10007b30:	801e913a 	slli	r15,r16,4
10007b34:	2b000204 	addi	r12,r5,8
10007b38:	22c00204 	addi	r11,r4,8
10007b3c:	7bc00504 	addi	r15,r15,20
10007b40:	2a800304 	addi	r10,r5,12
10007b44:	22400304 	addi	r9,r4,12
10007b48:	2bdf883a 	add	r15,r5,r15
10007b4c:	2811883a 	mov	r8,r5
10007b50:	200f883a 	mov	r7,r4
10007b54:	41000017 	ldw	r4,0(r8)
10007b58:	39c00404 	addi	r7,r7,16
10007b5c:	18c00404 	addi	r3,r3,16
10007b60:	393ffc15 	stw	r4,-16(r7)
10007b64:	1bbffc17 	ldw	r14,-16(r3)
10007b68:	6b400404 	addi	r13,r13,16
10007b6c:	5ac00404 	addi	r11,r11,16
10007b70:	6bbffc15 	stw	r14,-16(r13)
10007b74:	63800017 	ldw	r14,0(r12)
10007b78:	4a400404 	addi	r9,r9,16
10007b7c:	42000404 	addi	r8,r8,16
10007b80:	5bbffc15 	stw	r14,-16(r11)
10007b84:	53800017 	ldw	r14,0(r10)
10007b88:	63000404 	addi	r12,r12,16
10007b8c:	52800404 	addi	r10,r10,16
10007b90:	4bbffc15 	stw	r14,-16(r9)
10007b94:	1bffef1e 	bne	r3,r15,10007b54 <__alt_data_end+0xf8007b54>
10007b98:	81c00044 	addi	r7,r16,1
10007b9c:	380e913a 	slli	r7,r7,4
10007ba0:	310003cc 	andi	r4,r6,15
10007ba4:	02c000c4 	movi	r11,3
10007ba8:	11c7883a 	add	r3,r2,r7
10007bac:	29cb883a 	add	r5,r5,r7
10007bb0:	59001f2e 	bgeu	r11,r4,10007c30 <memcpy+0x130>
10007bb4:	1813883a 	mov	r9,r3
10007bb8:	2811883a 	mov	r8,r5
10007bbc:	200f883a 	mov	r7,r4
10007bc0:	42800017 	ldw	r10,0(r8)
10007bc4:	4a400104 	addi	r9,r9,4
10007bc8:	39ffff04 	addi	r7,r7,-4
10007bcc:	4abfff15 	stw	r10,-4(r9)
10007bd0:	42000104 	addi	r8,r8,4
10007bd4:	59fffa36 	bltu	r11,r7,10007bc0 <__alt_data_end+0xf8007bc0>
10007bd8:	213fff04 	addi	r4,r4,-4
10007bdc:	2008d0ba 	srli	r4,r4,2
10007be0:	318000cc 	andi	r6,r6,3
10007be4:	21000044 	addi	r4,r4,1
10007be8:	2109883a 	add	r4,r4,r4
10007bec:	2109883a 	add	r4,r4,r4
10007bf0:	1907883a 	add	r3,r3,r4
10007bf4:	290b883a 	add	r5,r5,r4
10007bf8:	30000626 	beq	r6,zero,10007c14 <memcpy+0x114>
10007bfc:	198d883a 	add	r6,r3,r6
10007c00:	29c00003 	ldbu	r7,0(r5)
10007c04:	18c00044 	addi	r3,r3,1
10007c08:	29400044 	addi	r5,r5,1
10007c0c:	19ffffc5 	stb	r7,-1(r3)
10007c10:	19bffb1e 	bne	r3,r6,10007c00 <__alt_data_end+0xf8007c00>
10007c14:	dc000017 	ldw	r16,0(sp)
10007c18:	dec00104 	addi	sp,sp,4
10007c1c:	f800283a 	ret
10007c20:	2007883a 	mov	r3,r4
10007c24:	003ff406 	br	10007bf8 <__alt_data_end+0xf8007bf8>
10007c28:	2007883a 	mov	r3,r4
10007c2c:	003ff306 	br	10007bfc <__alt_data_end+0xf8007bfc>
10007c30:	200d883a 	mov	r6,r4
10007c34:	003ff006 	br	10007bf8 <__alt_data_end+0xf8007bf8>

10007c38 <memmove>:
10007c38:	2005883a 	mov	r2,r4
10007c3c:	29000b2e 	bgeu	r5,r4,10007c6c <memmove+0x34>
10007c40:	298f883a 	add	r7,r5,r6
10007c44:	21c0092e 	bgeu	r4,r7,10007c6c <memmove+0x34>
10007c48:	2187883a 	add	r3,r4,r6
10007c4c:	198bc83a 	sub	r5,r3,r6
10007c50:	30004b26 	beq	r6,zero,10007d80 <memmove+0x148>
10007c54:	39ffffc4 	addi	r7,r7,-1
10007c58:	39000003 	ldbu	r4,0(r7)
10007c5c:	18ffffc4 	addi	r3,r3,-1
10007c60:	19000005 	stb	r4,0(r3)
10007c64:	197ffb1e 	bne	r3,r5,10007c54 <__alt_data_end+0xf8007c54>
10007c68:	f800283a 	ret
10007c6c:	00c003c4 	movi	r3,15
10007c70:	1980412e 	bgeu	r3,r6,10007d78 <memmove+0x140>
10007c74:	1146b03a 	or	r3,r2,r5
10007c78:	18c000cc 	andi	r3,r3,3
10007c7c:	1800411e 	bne	r3,zero,10007d84 <memmove+0x14c>
10007c80:	33fffc04 	addi	r15,r6,-16
10007c84:	781ed13a 	srli	r15,r15,4
10007c88:	28c00104 	addi	r3,r5,4
10007c8c:	13400104 	addi	r13,r2,4
10007c90:	781c913a 	slli	r14,r15,4
10007c94:	2b000204 	addi	r12,r5,8
10007c98:	12c00204 	addi	r11,r2,8
10007c9c:	73800504 	addi	r14,r14,20
10007ca0:	2a800304 	addi	r10,r5,12
10007ca4:	12400304 	addi	r9,r2,12
10007ca8:	2b9d883a 	add	r14,r5,r14
10007cac:	2811883a 	mov	r8,r5
10007cb0:	100f883a 	mov	r7,r2
10007cb4:	41000017 	ldw	r4,0(r8)
10007cb8:	39c00404 	addi	r7,r7,16
10007cbc:	18c00404 	addi	r3,r3,16
10007cc0:	393ffc15 	stw	r4,-16(r7)
10007cc4:	193ffc17 	ldw	r4,-16(r3)
10007cc8:	6b400404 	addi	r13,r13,16
10007ccc:	5ac00404 	addi	r11,r11,16
10007cd0:	693ffc15 	stw	r4,-16(r13)
10007cd4:	61000017 	ldw	r4,0(r12)
10007cd8:	4a400404 	addi	r9,r9,16
10007cdc:	42000404 	addi	r8,r8,16
10007ce0:	593ffc15 	stw	r4,-16(r11)
10007ce4:	51000017 	ldw	r4,0(r10)
10007ce8:	63000404 	addi	r12,r12,16
10007cec:	52800404 	addi	r10,r10,16
10007cf0:	493ffc15 	stw	r4,-16(r9)
10007cf4:	1bbfef1e 	bne	r3,r14,10007cb4 <__alt_data_end+0xf8007cb4>
10007cf8:	79000044 	addi	r4,r15,1
10007cfc:	2008913a 	slli	r4,r4,4
10007d00:	328003cc 	andi	r10,r6,15
10007d04:	02c000c4 	movi	r11,3
10007d08:	1107883a 	add	r3,r2,r4
10007d0c:	290b883a 	add	r5,r5,r4
10007d10:	5a801e2e 	bgeu	r11,r10,10007d8c <memmove+0x154>
10007d14:	1813883a 	mov	r9,r3
10007d18:	2811883a 	mov	r8,r5
10007d1c:	500f883a 	mov	r7,r10
10007d20:	41000017 	ldw	r4,0(r8)
10007d24:	4a400104 	addi	r9,r9,4
10007d28:	39ffff04 	addi	r7,r7,-4
10007d2c:	493fff15 	stw	r4,-4(r9)
10007d30:	42000104 	addi	r8,r8,4
10007d34:	59fffa36 	bltu	r11,r7,10007d20 <__alt_data_end+0xf8007d20>
10007d38:	513fff04 	addi	r4,r10,-4
10007d3c:	2008d0ba 	srli	r4,r4,2
10007d40:	318000cc 	andi	r6,r6,3
10007d44:	21000044 	addi	r4,r4,1
10007d48:	2109883a 	add	r4,r4,r4
10007d4c:	2109883a 	add	r4,r4,r4
10007d50:	1907883a 	add	r3,r3,r4
10007d54:	290b883a 	add	r5,r5,r4
10007d58:	30000926 	beq	r6,zero,10007d80 <memmove+0x148>
10007d5c:	198d883a 	add	r6,r3,r6
10007d60:	29c00003 	ldbu	r7,0(r5)
10007d64:	18c00044 	addi	r3,r3,1
10007d68:	29400044 	addi	r5,r5,1
10007d6c:	19ffffc5 	stb	r7,-1(r3)
10007d70:	19bffb1e 	bne	r3,r6,10007d60 <__alt_data_end+0xf8007d60>
10007d74:	f800283a 	ret
10007d78:	1007883a 	mov	r3,r2
10007d7c:	003ff606 	br	10007d58 <__alt_data_end+0xf8007d58>
10007d80:	f800283a 	ret
10007d84:	1007883a 	mov	r3,r2
10007d88:	003ff406 	br	10007d5c <__alt_data_end+0xf8007d5c>
10007d8c:	500d883a 	mov	r6,r10
10007d90:	003ff106 	br	10007d58 <__alt_data_end+0xf8007d58>

10007d94 <memset>:
10007d94:	20c000cc 	andi	r3,r4,3
10007d98:	2005883a 	mov	r2,r4
10007d9c:	18004326 	beq	r3,zero,10007eac <memset+0x118>
10007da0:	31ffffc4 	addi	r7,r6,-1
10007da4:	30004026 	beq	r6,zero,10007ea8 <memset+0x114>
10007da8:	2813883a 	mov	r9,r5
10007dac:	200d883a 	mov	r6,r4
10007db0:	2007883a 	mov	r3,r4
10007db4:	00000406 	br	10007dc8 <memset+0x34>
10007db8:	3a3fffc4 	addi	r8,r7,-1
10007dbc:	31800044 	addi	r6,r6,1
10007dc0:	38003926 	beq	r7,zero,10007ea8 <memset+0x114>
10007dc4:	400f883a 	mov	r7,r8
10007dc8:	18c00044 	addi	r3,r3,1
10007dcc:	32400005 	stb	r9,0(r6)
10007dd0:	1a0000cc 	andi	r8,r3,3
10007dd4:	403ff81e 	bne	r8,zero,10007db8 <__alt_data_end+0xf8007db8>
10007dd8:	010000c4 	movi	r4,3
10007ddc:	21c02d2e 	bgeu	r4,r7,10007e94 <memset+0x100>
10007de0:	29803fcc 	andi	r6,r5,255
10007de4:	3008923a 	slli	r4,r6,8
10007de8:	218cb03a 	or	r6,r4,r6
10007dec:	3008943a 	slli	r4,r6,16
10007df0:	218cb03a 	or	r6,r4,r6
10007df4:	010003c4 	movi	r4,15
10007df8:	21c0182e 	bgeu	r4,r7,10007e5c <memset+0xc8>
10007dfc:	3b3ffc04 	addi	r12,r7,-16
10007e00:	6018d13a 	srli	r12,r12,4
10007e04:	1a000104 	addi	r8,r3,4
10007e08:	1ac00204 	addi	r11,r3,8
10007e0c:	6008913a 	slli	r4,r12,4
10007e10:	1a800304 	addi	r10,r3,12
10007e14:	1813883a 	mov	r9,r3
10007e18:	21000504 	addi	r4,r4,20
10007e1c:	1909883a 	add	r4,r3,r4
10007e20:	49800015 	stw	r6,0(r9)
10007e24:	41800015 	stw	r6,0(r8)
10007e28:	59800015 	stw	r6,0(r11)
10007e2c:	51800015 	stw	r6,0(r10)
10007e30:	42000404 	addi	r8,r8,16
10007e34:	4a400404 	addi	r9,r9,16
10007e38:	5ac00404 	addi	r11,r11,16
10007e3c:	52800404 	addi	r10,r10,16
10007e40:	413ff71e 	bne	r8,r4,10007e20 <__alt_data_end+0xf8007e20>
10007e44:	63000044 	addi	r12,r12,1
10007e48:	6018913a 	slli	r12,r12,4
10007e4c:	39c003cc 	andi	r7,r7,15
10007e50:	010000c4 	movi	r4,3
10007e54:	1b07883a 	add	r3,r3,r12
10007e58:	21c00e2e 	bgeu	r4,r7,10007e94 <memset+0x100>
10007e5c:	1813883a 	mov	r9,r3
10007e60:	3811883a 	mov	r8,r7
10007e64:	010000c4 	movi	r4,3
10007e68:	49800015 	stw	r6,0(r9)
10007e6c:	423fff04 	addi	r8,r8,-4
10007e70:	4a400104 	addi	r9,r9,4
10007e74:	223ffc36 	bltu	r4,r8,10007e68 <__alt_data_end+0xf8007e68>
10007e78:	393fff04 	addi	r4,r7,-4
10007e7c:	2008d0ba 	srli	r4,r4,2
10007e80:	39c000cc 	andi	r7,r7,3
10007e84:	21000044 	addi	r4,r4,1
10007e88:	2109883a 	add	r4,r4,r4
10007e8c:	2109883a 	add	r4,r4,r4
10007e90:	1907883a 	add	r3,r3,r4
10007e94:	38000426 	beq	r7,zero,10007ea8 <memset+0x114>
10007e98:	19cf883a 	add	r7,r3,r7
10007e9c:	19400005 	stb	r5,0(r3)
10007ea0:	18c00044 	addi	r3,r3,1
10007ea4:	19fffd1e 	bne	r3,r7,10007e9c <__alt_data_end+0xf8007e9c>
10007ea8:	f800283a 	ret
10007eac:	2007883a 	mov	r3,r4
10007eb0:	300f883a 	mov	r7,r6
10007eb4:	003fc806 	br	10007dd8 <__alt_data_end+0xf8007dd8>

10007eb8 <_Balloc>:
10007eb8:	20801317 	ldw	r2,76(r4)
10007ebc:	defffc04 	addi	sp,sp,-16
10007ec0:	dc400115 	stw	r17,4(sp)
10007ec4:	dc000015 	stw	r16,0(sp)
10007ec8:	dfc00315 	stw	ra,12(sp)
10007ecc:	dc800215 	stw	r18,8(sp)
10007ed0:	2023883a 	mov	r17,r4
10007ed4:	2821883a 	mov	r16,r5
10007ed8:	10000f26 	beq	r2,zero,10007f18 <_Balloc+0x60>
10007edc:	8407883a 	add	r3,r16,r16
10007ee0:	18c7883a 	add	r3,r3,r3
10007ee4:	10c7883a 	add	r3,r2,r3
10007ee8:	18800017 	ldw	r2,0(r3)
10007eec:	10001126 	beq	r2,zero,10007f34 <_Balloc+0x7c>
10007ef0:	11000017 	ldw	r4,0(r2)
10007ef4:	19000015 	stw	r4,0(r3)
10007ef8:	10000415 	stw	zero,16(r2)
10007efc:	10000315 	stw	zero,12(r2)
10007f00:	dfc00317 	ldw	ra,12(sp)
10007f04:	dc800217 	ldw	r18,8(sp)
10007f08:	dc400117 	ldw	r17,4(sp)
10007f0c:	dc000017 	ldw	r16,0(sp)
10007f10:	dec00404 	addi	sp,sp,16
10007f14:	f800283a 	ret
10007f18:	01400104 	movi	r5,4
10007f1c:	01800844 	movi	r6,33
10007f20:	000ad540 	call	1000ad54 <_calloc_r>
10007f24:	88801315 	stw	r2,76(r17)
10007f28:	103fec1e 	bne	r2,zero,10007edc <__alt_data_end+0xf8007edc>
10007f2c:	0005883a 	mov	r2,zero
10007f30:	003ff306 	br	10007f00 <__alt_data_end+0xf8007f00>
10007f34:	01400044 	movi	r5,1
10007f38:	2c24983a 	sll	r18,r5,r16
10007f3c:	8809883a 	mov	r4,r17
10007f40:	91800144 	addi	r6,r18,5
10007f44:	318d883a 	add	r6,r6,r6
10007f48:	318d883a 	add	r6,r6,r6
10007f4c:	000ad540 	call	1000ad54 <_calloc_r>
10007f50:	103ff626 	beq	r2,zero,10007f2c <__alt_data_end+0xf8007f2c>
10007f54:	14000115 	stw	r16,4(r2)
10007f58:	14800215 	stw	r18,8(r2)
10007f5c:	003fe606 	br	10007ef8 <__alt_data_end+0xf8007ef8>

10007f60 <_Bfree>:
10007f60:	28000826 	beq	r5,zero,10007f84 <_Bfree+0x24>
10007f64:	28c00117 	ldw	r3,4(r5)
10007f68:	20801317 	ldw	r2,76(r4)
10007f6c:	18c7883a 	add	r3,r3,r3
10007f70:	18c7883a 	add	r3,r3,r3
10007f74:	10c5883a 	add	r2,r2,r3
10007f78:	10c00017 	ldw	r3,0(r2)
10007f7c:	28c00015 	stw	r3,0(r5)
10007f80:	11400015 	stw	r5,0(r2)
10007f84:	f800283a 	ret

10007f88 <__multadd>:
10007f88:	defff704 	addi	sp,sp,-36
10007f8c:	dc800215 	stw	r18,8(sp)
10007f90:	2c800417 	ldw	r18,16(r5)
10007f94:	ddc00715 	stw	r23,28(sp)
10007f98:	dd800615 	stw	r22,24(sp)
10007f9c:	dd000415 	stw	r20,16(sp)
10007fa0:	dcc00315 	stw	r19,12(sp)
10007fa4:	dc400115 	stw	r17,4(sp)
10007fa8:	dc000015 	stw	r16,0(sp)
10007fac:	dfc00815 	stw	ra,32(sp)
10007fb0:	dd400515 	stw	r21,20(sp)
10007fb4:	2827883a 	mov	r19,r5
10007fb8:	2029883a 	mov	r20,r4
10007fbc:	3023883a 	mov	r17,r6
10007fc0:	3821883a 	mov	r16,r7
10007fc4:	2d800504 	addi	r22,r5,20
10007fc8:	002f883a 	mov	r23,zero
10007fcc:	b5400017 	ldw	r21,0(r22)
10007fd0:	880b883a 	mov	r5,r17
10007fd4:	bdc00044 	addi	r23,r23,1
10007fd8:	a93fffcc 	andi	r4,r21,65535
10007fdc:	000c3780 	call	1000c378 <__mulsi3>
10007fe0:	1421883a 	add	r16,r2,r16
10007fe4:	a808d43a 	srli	r4,r21,16
10007fe8:	802ad43a 	srli	r21,r16,16
10007fec:	880b883a 	mov	r5,r17
10007ff0:	000c3780 	call	1000c378 <__mulsi3>
10007ff4:	a88f883a 	add	r7,r21,r2
10007ff8:	3804943a 	slli	r2,r7,16
10007ffc:	80ffffcc 	andi	r3,r16,65535
10008000:	b5800104 	addi	r22,r22,4
10008004:	10c7883a 	add	r3,r2,r3
10008008:	b0ffff15 	stw	r3,-4(r22)
1000800c:	3820d43a 	srli	r16,r7,16
10008010:	bcbfee16 	blt	r23,r18,10007fcc <__alt_data_end+0xf8007fcc>
10008014:	80000926 	beq	r16,zero,1000803c <__multadd+0xb4>
10008018:	98800217 	ldw	r2,8(r19)
1000801c:	9080130e 	bge	r18,r2,1000806c <__multadd+0xe4>
10008020:	90800144 	addi	r2,r18,5
10008024:	1085883a 	add	r2,r2,r2
10008028:	1085883a 	add	r2,r2,r2
1000802c:	9885883a 	add	r2,r19,r2
10008030:	14000015 	stw	r16,0(r2)
10008034:	94800044 	addi	r18,r18,1
10008038:	9c800415 	stw	r18,16(r19)
1000803c:	9805883a 	mov	r2,r19
10008040:	dfc00817 	ldw	ra,32(sp)
10008044:	ddc00717 	ldw	r23,28(sp)
10008048:	dd800617 	ldw	r22,24(sp)
1000804c:	dd400517 	ldw	r21,20(sp)
10008050:	dd000417 	ldw	r20,16(sp)
10008054:	dcc00317 	ldw	r19,12(sp)
10008058:	dc800217 	ldw	r18,8(sp)
1000805c:	dc400117 	ldw	r17,4(sp)
10008060:	dc000017 	ldw	r16,0(sp)
10008064:	dec00904 	addi	sp,sp,36
10008068:	f800283a 	ret
1000806c:	99400117 	ldw	r5,4(r19)
10008070:	a009883a 	mov	r4,r20
10008074:	29400044 	addi	r5,r5,1
10008078:	0007eb80 	call	10007eb8 <_Balloc>
1000807c:	99800417 	ldw	r6,16(r19)
10008080:	99400304 	addi	r5,r19,12
10008084:	11000304 	addi	r4,r2,12
10008088:	31800084 	addi	r6,r6,2
1000808c:	318d883a 	add	r6,r6,r6
10008090:	318d883a 	add	r6,r6,r6
10008094:	1023883a 	mov	r17,r2
10008098:	0007b000 	call	10007b00 <memcpy>
1000809c:	99000117 	ldw	r4,4(r19)
100080a0:	a0c01317 	ldw	r3,76(r20)
100080a4:	2109883a 	add	r4,r4,r4
100080a8:	2109883a 	add	r4,r4,r4
100080ac:	1907883a 	add	r3,r3,r4
100080b0:	18800017 	ldw	r2,0(r3)
100080b4:	98800015 	stw	r2,0(r19)
100080b8:	1cc00015 	stw	r19,0(r3)
100080bc:	8827883a 	mov	r19,r17
100080c0:	003fd706 	br	10008020 <__alt_data_end+0xf8008020>

100080c4 <__s2b>:
100080c4:	defff904 	addi	sp,sp,-28
100080c8:	dc400115 	stw	r17,4(sp)
100080cc:	dc000015 	stw	r16,0(sp)
100080d0:	2023883a 	mov	r17,r4
100080d4:	2821883a 	mov	r16,r5
100080d8:	39000204 	addi	r4,r7,8
100080dc:	01400244 	movi	r5,9
100080e0:	dcc00315 	stw	r19,12(sp)
100080e4:	dc800215 	stw	r18,8(sp)
100080e8:	dfc00615 	stw	ra,24(sp)
100080ec:	dd400515 	stw	r21,20(sp)
100080f0:	dd000415 	stw	r20,16(sp)
100080f4:	3825883a 	mov	r18,r7
100080f8:	3027883a 	mov	r19,r6
100080fc:	000c2b80 	call	1000c2b8 <__divsi3>
10008100:	00c00044 	movi	r3,1
10008104:	000b883a 	mov	r5,zero
10008108:	1880030e 	bge	r3,r2,10008118 <__s2b+0x54>
1000810c:	18c7883a 	add	r3,r3,r3
10008110:	29400044 	addi	r5,r5,1
10008114:	18bffd16 	blt	r3,r2,1000810c <__alt_data_end+0xf800810c>
10008118:	8809883a 	mov	r4,r17
1000811c:	0007eb80 	call	10007eb8 <_Balloc>
10008120:	d8c00717 	ldw	r3,28(sp)
10008124:	10c00515 	stw	r3,20(r2)
10008128:	00c00044 	movi	r3,1
1000812c:	10c00415 	stw	r3,16(r2)
10008130:	00c00244 	movi	r3,9
10008134:	1cc0210e 	bge	r3,r19,100081bc <__s2b+0xf8>
10008138:	80eb883a 	add	r21,r16,r3
1000813c:	a829883a 	mov	r20,r21
10008140:	84e1883a 	add	r16,r16,r19
10008144:	a1c00007 	ldb	r7,0(r20)
10008148:	8809883a 	mov	r4,r17
1000814c:	a5000044 	addi	r20,r20,1
10008150:	100b883a 	mov	r5,r2
10008154:	01800284 	movi	r6,10
10008158:	39fff404 	addi	r7,r7,-48
1000815c:	0007f880 	call	10007f88 <__multadd>
10008160:	a43ff81e 	bne	r20,r16,10008144 <__alt_data_end+0xf8008144>
10008164:	ace1883a 	add	r16,r21,r19
10008168:	843ffe04 	addi	r16,r16,-8
1000816c:	9c800a0e 	bge	r19,r18,10008198 <__s2b+0xd4>
10008170:	94e5c83a 	sub	r18,r18,r19
10008174:	84a5883a 	add	r18,r16,r18
10008178:	81c00007 	ldb	r7,0(r16)
1000817c:	8809883a 	mov	r4,r17
10008180:	84000044 	addi	r16,r16,1
10008184:	100b883a 	mov	r5,r2
10008188:	01800284 	movi	r6,10
1000818c:	39fff404 	addi	r7,r7,-48
10008190:	0007f880 	call	10007f88 <__multadd>
10008194:	84bff81e 	bne	r16,r18,10008178 <__alt_data_end+0xf8008178>
10008198:	dfc00617 	ldw	ra,24(sp)
1000819c:	dd400517 	ldw	r21,20(sp)
100081a0:	dd000417 	ldw	r20,16(sp)
100081a4:	dcc00317 	ldw	r19,12(sp)
100081a8:	dc800217 	ldw	r18,8(sp)
100081ac:	dc400117 	ldw	r17,4(sp)
100081b0:	dc000017 	ldw	r16,0(sp)
100081b4:	dec00704 	addi	sp,sp,28
100081b8:	f800283a 	ret
100081bc:	84000284 	addi	r16,r16,10
100081c0:	1827883a 	mov	r19,r3
100081c4:	003fe906 	br	1000816c <__alt_data_end+0xf800816c>

100081c8 <__hi0bits>:
100081c8:	20bfffec 	andhi	r2,r4,65535
100081cc:	1000141e 	bne	r2,zero,10008220 <__hi0bits+0x58>
100081d0:	2008943a 	slli	r4,r4,16
100081d4:	00800404 	movi	r2,16
100081d8:	20ffc02c 	andhi	r3,r4,65280
100081dc:	1800021e 	bne	r3,zero,100081e8 <__hi0bits+0x20>
100081e0:	2008923a 	slli	r4,r4,8
100081e4:	10800204 	addi	r2,r2,8
100081e8:	20fc002c 	andhi	r3,r4,61440
100081ec:	1800021e 	bne	r3,zero,100081f8 <__hi0bits+0x30>
100081f0:	2008913a 	slli	r4,r4,4
100081f4:	10800104 	addi	r2,r2,4
100081f8:	20f0002c 	andhi	r3,r4,49152
100081fc:	1800031e 	bne	r3,zero,1000820c <__hi0bits+0x44>
10008200:	2109883a 	add	r4,r4,r4
10008204:	10800084 	addi	r2,r2,2
10008208:	2109883a 	add	r4,r4,r4
1000820c:	20000316 	blt	r4,zero,1000821c <__hi0bits+0x54>
10008210:	2110002c 	andhi	r4,r4,16384
10008214:	2000041e 	bne	r4,zero,10008228 <__hi0bits+0x60>
10008218:	00800804 	movi	r2,32
1000821c:	f800283a 	ret
10008220:	0005883a 	mov	r2,zero
10008224:	003fec06 	br	100081d8 <__alt_data_end+0xf80081d8>
10008228:	10800044 	addi	r2,r2,1
1000822c:	f800283a 	ret

10008230 <__lo0bits>:
10008230:	20c00017 	ldw	r3,0(r4)
10008234:	188001cc 	andi	r2,r3,7
10008238:	10000826 	beq	r2,zero,1000825c <__lo0bits+0x2c>
1000823c:	1880004c 	andi	r2,r3,1
10008240:	1000211e 	bne	r2,zero,100082c8 <__lo0bits+0x98>
10008244:	1880008c 	andi	r2,r3,2
10008248:	1000211e 	bne	r2,zero,100082d0 <__lo0bits+0xa0>
1000824c:	1806d0ba 	srli	r3,r3,2
10008250:	00800084 	movi	r2,2
10008254:	20c00015 	stw	r3,0(r4)
10008258:	f800283a 	ret
1000825c:	18bfffcc 	andi	r2,r3,65535
10008260:	10001326 	beq	r2,zero,100082b0 <__lo0bits+0x80>
10008264:	0005883a 	mov	r2,zero
10008268:	19403fcc 	andi	r5,r3,255
1000826c:	2800021e 	bne	r5,zero,10008278 <__lo0bits+0x48>
10008270:	1806d23a 	srli	r3,r3,8
10008274:	10800204 	addi	r2,r2,8
10008278:	194003cc 	andi	r5,r3,15
1000827c:	2800021e 	bne	r5,zero,10008288 <__lo0bits+0x58>
10008280:	1806d13a 	srli	r3,r3,4
10008284:	10800104 	addi	r2,r2,4
10008288:	194000cc 	andi	r5,r3,3
1000828c:	2800021e 	bne	r5,zero,10008298 <__lo0bits+0x68>
10008290:	1806d0ba 	srli	r3,r3,2
10008294:	10800084 	addi	r2,r2,2
10008298:	1940004c 	andi	r5,r3,1
1000829c:	2800081e 	bne	r5,zero,100082c0 <__lo0bits+0x90>
100082a0:	1806d07a 	srli	r3,r3,1
100082a4:	1800051e 	bne	r3,zero,100082bc <__lo0bits+0x8c>
100082a8:	00800804 	movi	r2,32
100082ac:	f800283a 	ret
100082b0:	1806d43a 	srli	r3,r3,16
100082b4:	00800404 	movi	r2,16
100082b8:	003feb06 	br	10008268 <__alt_data_end+0xf8008268>
100082bc:	10800044 	addi	r2,r2,1
100082c0:	20c00015 	stw	r3,0(r4)
100082c4:	f800283a 	ret
100082c8:	0005883a 	mov	r2,zero
100082cc:	f800283a 	ret
100082d0:	1806d07a 	srli	r3,r3,1
100082d4:	00800044 	movi	r2,1
100082d8:	20c00015 	stw	r3,0(r4)
100082dc:	f800283a 	ret

100082e0 <__i2b>:
100082e0:	defffd04 	addi	sp,sp,-12
100082e4:	dc000015 	stw	r16,0(sp)
100082e8:	04000044 	movi	r16,1
100082ec:	dc400115 	stw	r17,4(sp)
100082f0:	2823883a 	mov	r17,r5
100082f4:	800b883a 	mov	r5,r16
100082f8:	dfc00215 	stw	ra,8(sp)
100082fc:	0007eb80 	call	10007eb8 <_Balloc>
10008300:	14400515 	stw	r17,20(r2)
10008304:	14000415 	stw	r16,16(r2)
10008308:	dfc00217 	ldw	ra,8(sp)
1000830c:	dc400117 	ldw	r17,4(sp)
10008310:	dc000017 	ldw	r16,0(sp)
10008314:	dec00304 	addi	sp,sp,12
10008318:	f800283a 	ret

1000831c <__multiply>:
1000831c:	deffef04 	addi	sp,sp,-68
10008320:	dc400815 	stw	r17,32(sp)
10008324:	dc000715 	stw	r16,28(sp)
10008328:	2c400417 	ldw	r17,16(r5)
1000832c:	34000417 	ldw	r16,16(r6)
10008330:	dd800d15 	stw	r22,52(sp)
10008334:	dc800915 	stw	r18,36(sp)
10008338:	dfc01015 	stw	ra,64(sp)
1000833c:	df000f15 	stw	fp,60(sp)
10008340:	ddc00e15 	stw	r23,56(sp)
10008344:	dd400c15 	stw	r21,48(sp)
10008348:	dd000b15 	stw	r20,44(sp)
1000834c:	dcc00a15 	stw	r19,40(sp)
10008350:	2825883a 	mov	r18,r5
10008354:	302d883a 	mov	r22,r6
10008358:	8c009116 	blt	r17,r16,100085a0 <__multiply+0x284>
1000835c:	8005883a 	mov	r2,r16
10008360:	8821883a 	mov	r16,r17
10008364:	1023883a 	mov	r17,r2
10008368:	90800217 	ldw	r2,8(r18)
1000836c:	8447883a 	add	r3,r16,r17
10008370:	d8c00215 	stw	r3,8(sp)
10008374:	91400117 	ldw	r5,4(r18)
10008378:	10c0010e 	bge	r2,r3,10008380 <__multiply+0x64>
1000837c:	29400044 	addi	r5,r5,1
10008380:	0007eb80 	call	10007eb8 <_Balloc>
10008384:	d8c00217 	ldw	r3,8(sp)
10008388:	d8800615 	stw	r2,24(sp)
1000838c:	18eb883a 	add	r21,r3,r3
10008390:	ad6b883a 	add	r21,r21,r21
10008394:	10c00504 	addi	r3,r2,20
10008398:	1d6b883a 	add	r21,r3,r21
1000839c:	d8c00115 	stw	r3,4(sp)
100083a0:	dd400315 	stw	r21,12(sp)
100083a4:	1805883a 	mov	r2,r3
100083a8:	1d40042e 	bgeu	r3,r21,100083bc <__multiply+0xa0>
100083ac:	d8c00317 	ldw	r3,12(sp)
100083b0:	10000015 	stw	zero,0(r2)
100083b4:	10800104 	addi	r2,r2,4
100083b8:	10fffc36 	bltu	r2,r3,100083ac <__alt_data_end+0xf80083ac>
100083bc:	8c63883a 	add	r17,r17,r17
100083c0:	b5800504 	addi	r22,r22,20
100083c4:	8c63883a 	add	r17,r17,r17
100083c8:	94800504 	addi	r18,r18,20
100083cc:	8421883a 	add	r16,r16,r16
100083d0:	b463883a 	add	r17,r22,r17
100083d4:	8421883a 	add	r16,r16,r16
100083d8:	dd800015 	stw	r22,0(sp)
100083dc:	dc800415 	stw	r18,16(sp)
100083e0:	dc400515 	stw	r17,20(sp)
100083e4:	9429883a 	add	r20,r18,r16
100083e8:	b4404f2e 	bgeu	r22,r17,10008528 <__multiply+0x20c>
100083ec:	d8c00017 	ldw	r3,0(sp)
100083f0:	1c800017 	ldw	r18,0(r3)
100083f4:	943fffcc 	andi	r16,r18,65535
100083f8:	80001e26 	beq	r16,zero,10008474 <__multiply+0x158>
100083fc:	dd800117 	ldw	r22,4(sp)
10008400:	dd400417 	ldw	r21,16(sp)
10008404:	0025883a 	mov	r18,zero
10008408:	adc00017 	ldw	r23,0(r21)
1000840c:	b4c00017 	ldw	r19,0(r22)
10008410:	800b883a 	mov	r5,r16
10008414:	b93fffcc 	andi	r4,r23,65535
10008418:	000c3780 	call	1000c378 <__mulsi3>
1000841c:	9c7fffcc 	andi	r17,r19,65535
10008420:	8885883a 	add	r2,r17,r2
10008424:	b808d43a 	srli	r4,r23,16
10008428:	14a3883a 	add	r17,r2,r18
1000842c:	9826d43a 	srli	r19,r19,16
10008430:	8824d43a 	srli	r18,r17,16
10008434:	800b883a 	mov	r5,r16
10008438:	000c3780 	call	1000c378 <__mulsi3>
1000843c:	9885883a 	add	r2,r19,r2
10008440:	14a7883a 	add	r19,r2,r18
10008444:	88ffffcc 	andi	r3,r17,65535
10008448:	9822943a 	slli	r17,r19,16
1000844c:	ad400104 	addi	r21,r21,4
10008450:	b005883a 	mov	r2,r22
10008454:	88c6b03a 	or	r3,r17,r3
10008458:	b0c00015 	stw	r3,0(r22)
1000845c:	9824d43a 	srli	r18,r19,16
10008460:	b5800104 	addi	r22,r22,4
10008464:	ad3fe836 	bltu	r21,r20,10008408 <__alt_data_end+0xf8008408>
10008468:	d8c00017 	ldw	r3,0(sp)
1000846c:	14800115 	stw	r18,4(r2)
10008470:	1c800017 	ldw	r18,0(r3)
10008474:	9024d43a 	srli	r18,r18,16
10008478:	90002226 	beq	r18,zero,10008504 <__multiply+0x1e8>
1000847c:	d8c00117 	ldw	r3,4(sp)
10008480:	dd800417 	ldw	r22,16(sp)
10008484:	002f883a 	mov	r23,zero
10008488:	1f000017 	ldw	fp,0(r3)
1000848c:	1823883a 	mov	r17,r3
10008490:	182b883a 	mov	r21,r3
10008494:	e021883a 	mov	r16,fp
10008498:	00000106 	br	100084a0 <__multiply+0x184>
1000849c:	982b883a 	mov	r21,r19
100084a0:	b100000b 	ldhu	r4,0(r22)
100084a4:	8020d43a 	srli	r16,r16,16
100084a8:	900b883a 	mov	r5,r18
100084ac:	000c3780 	call	1000c378 <__mulsi3>
100084b0:	1405883a 	add	r2,r2,r16
100084b4:	15ef883a 	add	r23,r2,r23
100084b8:	b804943a 	slli	r2,r23,16
100084bc:	e0ffffcc 	andi	r3,fp,65535
100084c0:	8c400104 	addi	r17,r17,4
100084c4:	10c6b03a 	or	r3,r2,r3
100084c8:	88ffff15 	stw	r3,-4(r17)
100084cc:	b5800104 	addi	r22,r22,4
100084d0:	b13fff17 	ldw	r4,-4(r22)
100084d4:	acc00104 	addi	r19,r21,4
100084d8:	900b883a 	mov	r5,r18
100084dc:	2008d43a 	srli	r4,r4,16
100084e0:	9c000017 	ldw	r16,0(r19)
100084e4:	000c3780 	call	1000c378 <__mulsi3>
100084e8:	b806d43a 	srli	r3,r23,16
100084ec:	813fffcc 	andi	r4,r16,65535
100084f0:	1105883a 	add	r2,r2,r4
100084f4:	10f9883a 	add	fp,r2,r3
100084f8:	e02ed43a 	srli	r23,fp,16
100084fc:	b53fe736 	bltu	r22,r20,1000849c <__alt_data_end+0xf800849c>
10008500:	af000115 	stw	fp,4(r21)
10008504:	d8c00017 	ldw	r3,0(sp)
10008508:	d9000517 	ldw	r4,20(sp)
1000850c:	18c00104 	addi	r3,r3,4
10008510:	d8c00015 	stw	r3,0(sp)
10008514:	d8c00117 	ldw	r3,4(sp)
10008518:	18c00104 	addi	r3,r3,4
1000851c:	d8c00115 	stw	r3,4(sp)
10008520:	d8c00017 	ldw	r3,0(sp)
10008524:	193fb136 	bltu	r3,r4,100083ec <__alt_data_end+0xf80083ec>
10008528:	d8c00217 	ldw	r3,8(sp)
1000852c:	00c00c0e 	bge	zero,r3,10008560 <__multiply+0x244>
10008530:	d8c00317 	ldw	r3,12(sp)
10008534:	18bfff17 	ldw	r2,-4(r3)
10008538:	1d7fff04 	addi	r21,r3,-4
1000853c:	10000326 	beq	r2,zero,1000854c <__multiply+0x230>
10008540:	00000706 	br	10008560 <__multiply+0x244>
10008544:	a8800017 	ldw	r2,0(r21)
10008548:	1000051e 	bne	r2,zero,10008560 <__multiply+0x244>
1000854c:	d8c00217 	ldw	r3,8(sp)
10008550:	ad7fff04 	addi	r21,r21,-4
10008554:	18ffffc4 	addi	r3,r3,-1
10008558:	d8c00215 	stw	r3,8(sp)
1000855c:	183ff91e 	bne	r3,zero,10008544 <__alt_data_end+0xf8008544>
10008560:	d8c00617 	ldw	r3,24(sp)
10008564:	d9000217 	ldw	r4,8(sp)
10008568:	1805883a 	mov	r2,r3
1000856c:	19000415 	stw	r4,16(r3)
10008570:	dfc01017 	ldw	ra,64(sp)
10008574:	df000f17 	ldw	fp,60(sp)
10008578:	ddc00e17 	ldw	r23,56(sp)
1000857c:	dd800d17 	ldw	r22,52(sp)
10008580:	dd400c17 	ldw	r21,48(sp)
10008584:	dd000b17 	ldw	r20,44(sp)
10008588:	dcc00a17 	ldw	r19,40(sp)
1000858c:	dc800917 	ldw	r18,36(sp)
10008590:	dc400817 	ldw	r17,32(sp)
10008594:	dc000717 	ldw	r16,28(sp)
10008598:	dec01104 	addi	sp,sp,68
1000859c:	f800283a 	ret
100085a0:	3025883a 	mov	r18,r6
100085a4:	282d883a 	mov	r22,r5
100085a8:	003f6f06 	br	10008368 <__alt_data_end+0xf8008368>

100085ac <__pow5mult>:
100085ac:	defffa04 	addi	sp,sp,-24
100085b0:	dcc00315 	stw	r19,12(sp)
100085b4:	dc800215 	stw	r18,8(sp)
100085b8:	dc000015 	stw	r16,0(sp)
100085bc:	dfc00515 	stw	ra,20(sp)
100085c0:	dd000415 	stw	r20,16(sp)
100085c4:	dc400115 	stw	r17,4(sp)
100085c8:	308000cc 	andi	r2,r6,3
100085cc:	3021883a 	mov	r16,r6
100085d0:	2027883a 	mov	r19,r4
100085d4:	2825883a 	mov	r18,r5
100085d8:	10002e1e 	bne	r2,zero,10008694 <__pow5mult+0xe8>
100085dc:	8021d0ba 	srai	r16,r16,2
100085e0:	80001a26 	beq	r16,zero,1000864c <__pow5mult+0xa0>
100085e4:	9c401217 	ldw	r17,72(r19)
100085e8:	8800061e 	bne	r17,zero,10008604 <__pow5mult+0x58>
100085ec:	00003406 	br	100086c0 <__pow5mult+0x114>
100085f0:	8021d07a 	srai	r16,r16,1
100085f4:	80001526 	beq	r16,zero,1000864c <__pow5mult+0xa0>
100085f8:	88800017 	ldw	r2,0(r17)
100085fc:	10001c26 	beq	r2,zero,10008670 <__pow5mult+0xc4>
10008600:	1023883a 	mov	r17,r2
10008604:	80c0004c 	andi	r3,r16,1
10008608:	183ff926 	beq	r3,zero,100085f0 <__alt_data_end+0xf80085f0>
1000860c:	900b883a 	mov	r5,r18
10008610:	880d883a 	mov	r6,r17
10008614:	9809883a 	mov	r4,r19
10008618:	000831c0 	call	1000831c <__multiply>
1000861c:	90001b26 	beq	r18,zero,1000868c <__pow5mult+0xe0>
10008620:	91c00117 	ldw	r7,4(r18)
10008624:	98c01317 	ldw	r3,76(r19)
10008628:	8021d07a 	srai	r16,r16,1
1000862c:	39cf883a 	add	r7,r7,r7
10008630:	39cf883a 	add	r7,r7,r7
10008634:	19c7883a 	add	r3,r3,r7
10008638:	19000017 	ldw	r4,0(r3)
1000863c:	91000015 	stw	r4,0(r18)
10008640:	1c800015 	stw	r18,0(r3)
10008644:	1025883a 	mov	r18,r2
10008648:	803feb1e 	bne	r16,zero,100085f8 <__alt_data_end+0xf80085f8>
1000864c:	9005883a 	mov	r2,r18
10008650:	dfc00517 	ldw	ra,20(sp)
10008654:	dd000417 	ldw	r20,16(sp)
10008658:	dcc00317 	ldw	r19,12(sp)
1000865c:	dc800217 	ldw	r18,8(sp)
10008660:	dc400117 	ldw	r17,4(sp)
10008664:	dc000017 	ldw	r16,0(sp)
10008668:	dec00604 	addi	sp,sp,24
1000866c:	f800283a 	ret
10008670:	9809883a 	mov	r4,r19
10008674:	880b883a 	mov	r5,r17
10008678:	880d883a 	mov	r6,r17
1000867c:	000831c0 	call	1000831c <__multiply>
10008680:	88800015 	stw	r2,0(r17)
10008684:	10000015 	stw	zero,0(r2)
10008688:	003fdd06 	br	10008600 <__alt_data_end+0xf8008600>
1000868c:	1025883a 	mov	r18,r2
10008690:	003fd706 	br	100085f0 <__alt_data_end+0xf80085f0>
10008694:	10bfffc4 	addi	r2,r2,-1
10008698:	1085883a 	add	r2,r2,r2
1000869c:	00c40074 	movhi	r3,4097
100086a0:	18c71f04 	addi	r3,r3,7292
100086a4:	1085883a 	add	r2,r2,r2
100086a8:	1885883a 	add	r2,r3,r2
100086ac:	11800017 	ldw	r6,0(r2)
100086b0:	000f883a 	mov	r7,zero
100086b4:	0007f880 	call	10007f88 <__multadd>
100086b8:	1025883a 	mov	r18,r2
100086bc:	003fc706 	br	100085dc <__alt_data_end+0xf80085dc>
100086c0:	05000044 	movi	r20,1
100086c4:	9809883a 	mov	r4,r19
100086c8:	a00b883a 	mov	r5,r20
100086cc:	0007eb80 	call	10007eb8 <_Balloc>
100086d0:	1023883a 	mov	r17,r2
100086d4:	00809c44 	movi	r2,625
100086d8:	88800515 	stw	r2,20(r17)
100086dc:	8d000415 	stw	r20,16(r17)
100086e0:	9c401215 	stw	r17,72(r19)
100086e4:	88000015 	stw	zero,0(r17)
100086e8:	003fc606 	br	10008604 <__alt_data_end+0xf8008604>

100086ec <__lshift>:
100086ec:	defff904 	addi	sp,sp,-28
100086f0:	dd000415 	stw	r20,16(sp)
100086f4:	dcc00315 	stw	r19,12(sp)
100086f8:	3029d17a 	srai	r20,r6,5
100086fc:	2cc00417 	ldw	r19,16(r5)
10008700:	28800217 	ldw	r2,8(r5)
10008704:	dd400515 	stw	r21,20(sp)
10008708:	a4e7883a 	add	r19,r20,r19
1000870c:	dc800215 	stw	r18,8(sp)
10008710:	dc400115 	stw	r17,4(sp)
10008714:	dc000015 	stw	r16,0(sp)
10008718:	dfc00615 	stw	ra,24(sp)
1000871c:	9c000044 	addi	r16,r19,1
10008720:	2823883a 	mov	r17,r5
10008724:	302b883a 	mov	r21,r6
10008728:	2025883a 	mov	r18,r4
1000872c:	29400117 	ldw	r5,4(r5)
10008730:	1400030e 	bge	r2,r16,10008740 <__lshift+0x54>
10008734:	1085883a 	add	r2,r2,r2
10008738:	29400044 	addi	r5,r5,1
1000873c:	143ffd16 	blt	r2,r16,10008734 <__alt_data_end+0xf8008734>
10008740:	9009883a 	mov	r4,r18
10008744:	0007eb80 	call	10007eb8 <_Balloc>
10008748:	11c00504 	addi	r7,r2,20
1000874c:	0500090e 	bge	zero,r20,10008774 <__lshift+0x88>
10008750:	3811883a 	mov	r8,r7
10008754:	0007883a 	mov	r3,zero
10008758:	40000015 	stw	zero,0(r8)
1000875c:	18c00044 	addi	r3,r3,1
10008760:	42000104 	addi	r8,r8,4
10008764:	1d3ffc1e 	bne	r3,r20,10008758 <__alt_data_end+0xf8008758>
10008768:	18c7883a 	add	r3,r3,r3
1000876c:	18c7883a 	add	r3,r3,r3
10008770:	38cf883a 	add	r7,r7,r3
10008774:	89000417 	ldw	r4,16(r17)
10008778:	88c00504 	addi	r3,r17,20
1000877c:	a98007cc 	andi	r6,r21,31
10008780:	2109883a 	add	r4,r4,r4
10008784:	2109883a 	add	r4,r4,r4
10008788:	1909883a 	add	r4,r3,r4
1000878c:	30002326 	beq	r6,zero,1000881c <__lshift+0x130>
10008790:	01400804 	movi	r5,32
10008794:	298bc83a 	sub	r5,r5,r6
10008798:	0013883a 	mov	r9,zero
1000879c:	1a000017 	ldw	r8,0(r3)
100087a0:	3815883a 	mov	r10,r7
100087a4:	39c00104 	addi	r7,r7,4
100087a8:	4190983a 	sll	r8,r8,r6
100087ac:	18c00104 	addi	r3,r3,4
100087b0:	4a10b03a 	or	r8,r9,r8
100087b4:	3a3fff15 	stw	r8,-4(r7)
100087b8:	1a3fff17 	ldw	r8,-4(r3)
100087bc:	4152d83a 	srl	r9,r8,r5
100087c0:	193ff636 	bltu	r3,r4,1000879c <__alt_data_end+0xf800879c>
100087c4:	52400115 	stw	r9,4(r10)
100087c8:	48000126 	beq	r9,zero,100087d0 <__lshift+0xe4>
100087cc:	9c000084 	addi	r16,r19,2
100087d0:	89000117 	ldw	r4,4(r17)
100087d4:	90c01317 	ldw	r3,76(r18)
100087d8:	843fffc4 	addi	r16,r16,-1
100087dc:	2109883a 	add	r4,r4,r4
100087e0:	2109883a 	add	r4,r4,r4
100087e4:	1907883a 	add	r3,r3,r4
100087e8:	19000017 	ldw	r4,0(r3)
100087ec:	14000415 	stw	r16,16(r2)
100087f0:	89000015 	stw	r4,0(r17)
100087f4:	1c400015 	stw	r17,0(r3)
100087f8:	dfc00617 	ldw	ra,24(sp)
100087fc:	dd400517 	ldw	r21,20(sp)
10008800:	dd000417 	ldw	r20,16(sp)
10008804:	dcc00317 	ldw	r19,12(sp)
10008808:	dc800217 	ldw	r18,8(sp)
1000880c:	dc400117 	ldw	r17,4(sp)
10008810:	dc000017 	ldw	r16,0(sp)
10008814:	dec00704 	addi	sp,sp,28
10008818:	f800283a 	ret
1000881c:	19400017 	ldw	r5,0(r3)
10008820:	39c00104 	addi	r7,r7,4
10008824:	18c00104 	addi	r3,r3,4
10008828:	397fff15 	stw	r5,-4(r7)
1000882c:	193ffb36 	bltu	r3,r4,1000881c <__alt_data_end+0xf800881c>
10008830:	003fe706 	br	100087d0 <__alt_data_end+0xf80087d0>

10008834 <__mcmp>:
10008834:	20800417 	ldw	r2,16(r4)
10008838:	28c00417 	ldw	r3,16(r5)
1000883c:	10c5c83a 	sub	r2,r2,r3
10008840:	1000111e 	bne	r2,zero,10008888 <__mcmp+0x54>
10008844:	18c7883a 	add	r3,r3,r3
10008848:	18c7883a 	add	r3,r3,r3
1000884c:	21000504 	addi	r4,r4,20
10008850:	29400504 	addi	r5,r5,20
10008854:	20c5883a 	add	r2,r4,r3
10008858:	28cb883a 	add	r5,r5,r3
1000885c:	00000106 	br	10008864 <__mcmp+0x30>
10008860:	20800a2e 	bgeu	r4,r2,1000888c <__mcmp+0x58>
10008864:	10bfff04 	addi	r2,r2,-4
10008868:	297fff04 	addi	r5,r5,-4
1000886c:	11800017 	ldw	r6,0(r2)
10008870:	28c00017 	ldw	r3,0(r5)
10008874:	30fffa26 	beq	r6,r3,10008860 <__alt_data_end+0xf8008860>
10008878:	30c00236 	bltu	r6,r3,10008884 <__mcmp+0x50>
1000887c:	00800044 	movi	r2,1
10008880:	f800283a 	ret
10008884:	00bfffc4 	movi	r2,-1
10008888:	f800283a 	ret
1000888c:	0005883a 	mov	r2,zero
10008890:	f800283a 	ret

10008894 <__mdiff>:
10008894:	defffb04 	addi	sp,sp,-20
10008898:	dc000015 	stw	r16,0(sp)
1000889c:	2821883a 	mov	r16,r5
100088a0:	dcc00315 	stw	r19,12(sp)
100088a4:	300b883a 	mov	r5,r6
100088a8:	2027883a 	mov	r19,r4
100088ac:	8009883a 	mov	r4,r16
100088b0:	dc800215 	stw	r18,8(sp)
100088b4:	dfc00415 	stw	ra,16(sp)
100088b8:	dc400115 	stw	r17,4(sp)
100088bc:	3025883a 	mov	r18,r6
100088c0:	00088340 	call	10008834 <__mcmp>
100088c4:	10005226 	beq	r2,zero,10008a10 <__mdiff+0x17c>
100088c8:	10004c16 	blt	r2,zero,100089fc <__mdiff+0x168>
100088cc:	0023883a 	mov	r17,zero
100088d0:	81400117 	ldw	r5,4(r16)
100088d4:	9809883a 	mov	r4,r19
100088d8:	0007eb80 	call	10007eb8 <_Balloc>
100088dc:	83400417 	ldw	r13,16(r16)
100088e0:	93800417 	ldw	r14,16(r18)
100088e4:	81000504 	addi	r4,r16,20
100088e8:	6b59883a 	add	r12,r13,r13
100088ec:	739d883a 	add	r14,r14,r14
100088f0:	6319883a 	add	r12,r12,r12
100088f4:	91800504 	addi	r6,r18,20
100088f8:	739d883a 	add	r14,r14,r14
100088fc:	14400315 	stw	r17,12(r2)
10008900:	2319883a 	add	r12,r4,r12
10008904:	339d883a 	add	r14,r6,r14
10008908:	12400504 	addi	r9,r2,20
1000890c:	0007883a 	mov	r3,zero
10008910:	22000017 	ldw	r8,0(r4)
10008914:	32800017 	ldw	r10,0(r6)
10008918:	4ac00104 	addi	r11,r9,4
1000891c:	41ffffcc 	andi	r7,r8,65535
10008920:	38c7883a 	add	r3,r7,r3
10008924:	51ffffcc 	andi	r7,r10,65535
10008928:	19cfc83a 	sub	r7,r3,r7
1000892c:	4010d43a 	srli	r8,r8,16
10008930:	5014d43a 	srli	r10,r10,16
10008934:	3807d43a 	srai	r3,r7,16
10008938:	39ffffcc 	andi	r7,r7,65535
1000893c:	4291c83a 	sub	r8,r8,r10
10008940:	40c7883a 	add	r3,r8,r3
10008944:	1810943a 	slli	r8,r3,16
10008948:	31800104 	addi	r6,r6,4
1000894c:	21000104 	addi	r4,r4,4
10008950:	41ceb03a 	or	r7,r8,r7
10008954:	49c00015 	stw	r7,0(r9)
10008958:	1807d43a 	srai	r3,r3,16
1000895c:	580b883a 	mov	r5,r11
10008960:	5813883a 	mov	r9,r11
10008964:	33bfea36 	bltu	r6,r14,10008910 <__alt_data_end+0xf8008910>
10008968:	2011883a 	mov	r8,r4
1000896c:	2300152e 	bgeu	r4,r12,100089c4 <__mdiff+0x130>
10008970:	21400017 	ldw	r5,0(r4)
10008974:	4a400104 	addi	r9,r9,4
10008978:	21000104 	addi	r4,r4,4
1000897c:	29ffffcc 	andi	r7,r5,65535
10008980:	38c7883a 	add	r3,r7,r3
10008984:	280ad43a 	srli	r5,r5,16
10008988:	180dd43a 	srai	r6,r3,16
1000898c:	19ffffcc 	andi	r7,r3,65535
10008990:	3147883a 	add	r3,r6,r5
10008994:	180a943a 	slli	r5,r3,16
10008998:	1807d43a 	srai	r3,r3,16
1000899c:	29ceb03a 	or	r7,r5,r7
100089a0:	49ffff15 	stw	r7,-4(r9)
100089a4:	233ff236 	bltu	r4,r12,10008970 <__alt_data_end+0xf8008970>
100089a8:	0206303a 	nor	r3,zero,r8
100089ac:	1b07883a 	add	r3,r3,r12
100089b0:	1806d0ba 	srli	r3,r3,2
100089b4:	18c00044 	addi	r3,r3,1
100089b8:	18c7883a 	add	r3,r3,r3
100089bc:	18c7883a 	add	r3,r3,r3
100089c0:	58cb883a 	add	r5,r11,r3
100089c4:	28ffff04 	addi	r3,r5,-4
100089c8:	3800041e 	bne	r7,zero,100089dc <__mdiff+0x148>
100089cc:	18ffff04 	addi	r3,r3,-4
100089d0:	19000017 	ldw	r4,0(r3)
100089d4:	6b7fffc4 	addi	r13,r13,-1
100089d8:	203ffc26 	beq	r4,zero,100089cc <__alt_data_end+0xf80089cc>
100089dc:	13400415 	stw	r13,16(r2)
100089e0:	dfc00417 	ldw	ra,16(sp)
100089e4:	dcc00317 	ldw	r19,12(sp)
100089e8:	dc800217 	ldw	r18,8(sp)
100089ec:	dc400117 	ldw	r17,4(sp)
100089f0:	dc000017 	ldw	r16,0(sp)
100089f4:	dec00504 	addi	sp,sp,20
100089f8:	f800283a 	ret
100089fc:	8005883a 	mov	r2,r16
10008a00:	04400044 	movi	r17,1
10008a04:	9021883a 	mov	r16,r18
10008a08:	1025883a 	mov	r18,r2
10008a0c:	003fb006 	br	100088d0 <__alt_data_end+0xf80088d0>
10008a10:	9809883a 	mov	r4,r19
10008a14:	000b883a 	mov	r5,zero
10008a18:	0007eb80 	call	10007eb8 <_Balloc>
10008a1c:	00c00044 	movi	r3,1
10008a20:	10c00415 	stw	r3,16(r2)
10008a24:	10000515 	stw	zero,20(r2)
10008a28:	003fed06 	br	100089e0 <__alt_data_end+0xf80089e0>

10008a2c <__ulp>:
10008a2c:	295ffc2c 	andhi	r5,r5,32752
10008a30:	00bf3034 	movhi	r2,64704
10008a34:	2887883a 	add	r3,r5,r2
10008a38:	00c0020e 	bge	zero,r3,10008a44 <__ulp+0x18>
10008a3c:	0005883a 	mov	r2,zero
10008a40:	f800283a 	ret
10008a44:	00c7c83a 	sub	r3,zero,r3
10008a48:	180bd53a 	srai	r5,r3,20
10008a4c:	008004c4 	movi	r2,19
10008a50:	11400a0e 	bge	r2,r5,10008a7c <__ulp+0x50>
10008a54:	00800c84 	movi	r2,50
10008a58:	0007883a 	mov	r3,zero
10008a5c:	11400516 	blt	r2,r5,10008a74 <__ulp+0x48>
10008a60:	00800cc4 	movi	r2,51
10008a64:	114bc83a 	sub	r5,r2,r5
10008a68:	00800044 	movi	r2,1
10008a6c:	1144983a 	sll	r2,r2,r5
10008a70:	f800283a 	ret
10008a74:	00800044 	movi	r2,1
10008a78:	f800283a 	ret
10008a7c:	00800234 	movhi	r2,8
10008a80:	1147d83a 	sra	r3,r2,r5
10008a84:	0005883a 	mov	r2,zero
10008a88:	f800283a 	ret

10008a8c <__b2d>:
10008a8c:	defffa04 	addi	sp,sp,-24
10008a90:	dc000015 	stw	r16,0(sp)
10008a94:	24000417 	ldw	r16,16(r4)
10008a98:	dc400115 	stw	r17,4(sp)
10008a9c:	24400504 	addi	r17,r4,20
10008aa0:	8421883a 	add	r16,r16,r16
10008aa4:	8421883a 	add	r16,r16,r16
10008aa8:	8c21883a 	add	r16,r17,r16
10008aac:	dc800215 	stw	r18,8(sp)
10008ab0:	84bfff17 	ldw	r18,-4(r16)
10008ab4:	dd000415 	stw	r20,16(sp)
10008ab8:	dcc00315 	stw	r19,12(sp)
10008abc:	9009883a 	mov	r4,r18
10008ac0:	2829883a 	mov	r20,r5
10008ac4:	dfc00515 	stw	ra,20(sp)
10008ac8:	00081c80 	call	100081c8 <__hi0bits>
10008acc:	00c00804 	movi	r3,32
10008ad0:	1887c83a 	sub	r3,r3,r2
10008ad4:	a0c00015 	stw	r3,0(r20)
10008ad8:	00c00284 	movi	r3,10
10008adc:	84ffff04 	addi	r19,r16,-4
10008ae0:	18801216 	blt	r3,r2,10008b2c <__b2d+0xa0>
10008ae4:	014002c4 	movi	r5,11
10008ae8:	2889c83a 	sub	r4,r5,r2
10008aec:	9106d83a 	srl	r3,r18,r4
10008af0:	18cffc34 	orhi	r3,r3,16368
10008af4:	8cc0282e 	bgeu	r17,r19,10008b98 <__b2d+0x10c>
10008af8:	817ffe17 	ldw	r5,-8(r16)
10008afc:	290ad83a 	srl	r5,r5,r4
10008b00:	10800544 	addi	r2,r2,21
10008b04:	9084983a 	sll	r2,r18,r2
10008b08:	2884b03a 	or	r2,r5,r2
10008b0c:	dfc00517 	ldw	ra,20(sp)
10008b10:	dd000417 	ldw	r20,16(sp)
10008b14:	dcc00317 	ldw	r19,12(sp)
10008b18:	dc800217 	ldw	r18,8(sp)
10008b1c:	dc400117 	ldw	r17,4(sp)
10008b20:	dc000017 	ldw	r16,0(sp)
10008b24:	dec00604 	addi	sp,sp,24
10008b28:	f800283a 	ret
10008b2c:	113ffd44 	addi	r4,r2,-11
10008b30:	8cc00f2e 	bgeu	r17,r19,10008b70 <__b2d+0xe4>
10008b34:	81bffe04 	addi	r6,r16,-8
10008b38:	817ffe17 	ldw	r5,-8(r16)
10008b3c:	20001326 	beq	r4,zero,10008b8c <__b2d+0x100>
10008b40:	00c00ac4 	movi	r3,43
10008b44:	1885c83a 	sub	r2,r3,r2
10008b48:	2886d83a 	srl	r3,r5,r2
10008b4c:	9124983a 	sll	r18,r18,r4
10008b50:	90e4b03a 	or	r18,r18,r3
10008b54:	90cffc34 	orhi	r3,r18,16368
10008b58:	8980112e 	bgeu	r17,r6,10008ba0 <__b2d+0x114>
10008b5c:	81bffd17 	ldw	r6,-12(r16)
10008b60:	308cd83a 	srl	r6,r6,r2
10008b64:	2904983a 	sll	r2,r5,r4
10008b68:	1184b03a 	or	r2,r2,r6
10008b6c:	003fe706 	br	10008b0c <__alt_data_end+0xf8008b0c>
10008b70:	20000526 	beq	r4,zero,10008b88 <__b2d+0xfc>
10008b74:	9124983a 	sll	r18,r18,r4
10008b78:	000d883a 	mov	r6,zero
10008b7c:	000b883a 	mov	r5,zero
10008b80:	90cffc34 	orhi	r3,r18,16368
10008b84:	003ff706 	br	10008b64 <__alt_data_end+0xf8008b64>
10008b88:	000b883a 	mov	r5,zero
10008b8c:	90cffc34 	orhi	r3,r18,16368
10008b90:	2805883a 	mov	r2,r5
10008b94:	003fdd06 	br	10008b0c <__alt_data_end+0xf8008b0c>
10008b98:	000b883a 	mov	r5,zero
10008b9c:	003fd806 	br	10008b00 <__alt_data_end+0xf8008b00>
10008ba0:	000d883a 	mov	r6,zero
10008ba4:	003fef06 	br	10008b64 <__alt_data_end+0xf8008b64>

10008ba8 <__d2b>:
10008ba8:	defff704 	addi	sp,sp,-36
10008bac:	dc000215 	stw	r16,8(sp)
10008bb0:	3021883a 	mov	r16,r6
10008bb4:	dc400315 	stw	r17,12(sp)
10008bb8:	8022907a 	slli	r17,r16,1
10008bbc:	dd400715 	stw	r21,28(sp)
10008bc0:	282b883a 	mov	r21,r5
10008bc4:	01400044 	movi	r5,1
10008bc8:	dd000615 	stw	r20,24(sp)
10008bcc:	dcc00515 	stw	r19,20(sp)
10008bd0:	dc800415 	stw	r18,16(sp)
10008bd4:	dfc00815 	stw	ra,32(sp)
10008bd8:	3829883a 	mov	r20,r7
10008bdc:	dc800917 	ldw	r18,36(sp)
10008be0:	8822d57a 	srli	r17,r17,21
10008be4:	0007eb80 	call	10007eb8 <_Balloc>
10008be8:	1027883a 	mov	r19,r2
10008bec:	00800434 	movhi	r2,16
10008bf0:	10bfffc4 	addi	r2,r2,-1
10008bf4:	808c703a 	and	r6,r16,r2
10008bf8:	88000126 	beq	r17,zero,10008c00 <__d2b+0x58>
10008bfc:	31800434 	orhi	r6,r6,16
10008c00:	d9800015 	stw	r6,0(sp)
10008c04:	a8001f26 	beq	r21,zero,10008c84 <__d2b+0xdc>
10008c08:	d9000104 	addi	r4,sp,4
10008c0c:	dd400115 	stw	r21,4(sp)
10008c10:	00082300 	call	10008230 <__lo0bits>
10008c14:	d8c00017 	ldw	r3,0(sp)
10008c18:	1000291e 	bne	r2,zero,10008cc0 <__d2b+0x118>
10008c1c:	d9000117 	ldw	r4,4(sp)
10008c20:	99000515 	stw	r4,20(r19)
10008c24:	1820c03a 	cmpne	r16,r3,zero
10008c28:	84000044 	addi	r16,r16,1
10008c2c:	98c00615 	stw	r3,24(r19)
10008c30:	9c000415 	stw	r16,16(r19)
10008c34:	88001b1e 	bne	r17,zero,10008ca4 <__d2b+0xfc>
10008c38:	800690ba 	slli	r3,r16,2
10008c3c:	10bef384 	addi	r2,r2,-1074
10008c40:	a0800015 	stw	r2,0(r20)
10008c44:	98c5883a 	add	r2,r19,r3
10008c48:	11000417 	ldw	r4,16(r2)
10008c4c:	8020917a 	slli	r16,r16,5
10008c50:	00081c80 	call	100081c8 <__hi0bits>
10008c54:	8085c83a 	sub	r2,r16,r2
10008c58:	90800015 	stw	r2,0(r18)
10008c5c:	9805883a 	mov	r2,r19
10008c60:	dfc00817 	ldw	ra,32(sp)
10008c64:	dd400717 	ldw	r21,28(sp)
10008c68:	dd000617 	ldw	r20,24(sp)
10008c6c:	dcc00517 	ldw	r19,20(sp)
10008c70:	dc800417 	ldw	r18,16(sp)
10008c74:	dc400317 	ldw	r17,12(sp)
10008c78:	dc000217 	ldw	r16,8(sp)
10008c7c:	dec00904 	addi	sp,sp,36
10008c80:	f800283a 	ret
10008c84:	d809883a 	mov	r4,sp
10008c88:	00082300 	call	10008230 <__lo0bits>
10008c8c:	d8c00017 	ldw	r3,0(sp)
10008c90:	04000044 	movi	r16,1
10008c94:	9c000415 	stw	r16,16(r19)
10008c98:	98c00515 	stw	r3,20(r19)
10008c9c:	10800804 	addi	r2,r2,32
10008ca0:	883fe526 	beq	r17,zero,10008c38 <__alt_data_end+0xf8008c38>
10008ca4:	8c7ef344 	addi	r17,r17,-1075
10008ca8:	88a3883a 	add	r17,r17,r2
10008cac:	00c00d44 	movi	r3,53
10008cb0:	a4400015 	stw	r17,0(r20)
10008cb4:	1885c83a 	sub	r2,r3,r2
10008cb8:	90800015 	stw	r2,0(r18)
10008cbc:	003fe706 	br	10008c5c <__alt_data_end+0xf8008c5c>
10008cc0:	01000804 	movi	r4,32
10008cc4:	2089c83a 	sub	r4,r4,r2
10008cc8:	1908983a 	sll	r4,r3,r4
10008ccc:	d9400117 	ldw	r5,4(sp)
10008cd0:	1886d83a 	srl	r3,r3,r2
10008cd4:	2148b03a 	or	r4,r4,r5
10008cd8:	99000515 	stw	r4,20(r19)
10008cdc:	d8c00015 	stw	r3,0(sp)
10008ce0:	003fd006 	br	10008c24 <__alt_data_end+0xf8008c24>

10008ce4 <__ratio>:
10008ce4:	defff904 	addi	sp,sp,-28
10008ce8:	dc400315 	stw	r17,12(sp)
10008cec:	2823883a 	mov	r17,r5
10008cf0:	d9400104 	addi	r5,sp,4
10008cf4:	dfc00615 	stw	ra,24(sp)
10008cf8:	dcc00515 	stw	r19,20(sp)
10008cfc:	dc800415 	stw	r18,16(sp)
10008d00:	2027883a 	mov	r19,r4
10008d04:	dc000215 	stw	r16,8(sp)
10008d08:	0008a8c0 	call	10008a8c <__b2d>
10008d0c:	8809883a 	mov	r4,r17
10008d10:	d80b883a 	mov	r5,sp
10008d14:	1025883a 	mov	r18,r2
10008d18:	1821883a 	mov	r16,r3
10008d1c:	0008a8c0 	call	10008a8c <__b2d>
10008d20:	8a400417 	ldw	r9,16(r17)
10008d24:	9a000417 	ldw	r8,16(r19)
10008d28:	100d883a 	mov	r6,r2
10008d2c:	d8800017 	ldw	r2,0(sp)
10008d30:	4251c83a 	sub	r8,r8,r9
10008d34:	4012917a 	slli	r9,r8,5
10008d38:	da000117 	ldw	r8,4(sp)
10008d3c:	4091c83a 	sub	r8,r8,r2
10008d40:	4251883a 	add	r8,r8,r9
10008d44:	02000d0e 	bge	zero,r8,10008d7c <__ratio+0x98>
10008d48:	4010953a 	slli	r8,r8,20
10008d4c:	4421883a 	add	r16,r8,r16
10008d50:	9009883a 	mov	r4,r18
10008d54:	800b883a 	mov	r5,r16
10008d58:	180f883a 	mov	r7,r3
10008d5c:	000cc3c0 	call	1000cc3c <__divdf3>
10008d60:	dfc00617 	ldw	ra,24(sp)
10008d64:	dcc00517 	ldw	r19,20(sp)
10008d68:	dc800417 	ldw	r18,16(sp)
10008d6c:	dc400317 	ldw	r17,12(sp)
10008d70:	dc000217 	ldw	r16,8(sp)
10008d74:	dec00704 	addi	sp,sp,28
10008d78:	f800283a 	ret
10008d7c:	4010953a 	slli	r8,r8,20
10008d80:	1a07c83a 	sub	r3,r3,r8
10008d84:	003ff206 	br	10008d50 <__alt_data_end+0xf8008d50>

10008d88 <_mprec_log10>:
10008d88:	defffe04 	addi	sp,sp,-8
10008d8c:	dc000015 	stw	r16,0(sp)
10008d90:	dfc00115 	stw	ra,4(sp)
10008d94:	008005c4 	movi	r2,23
10008d98:	2021883a 	mov	r16,r4
10008d9c:	11000d0e 	bge	r2,r4,10008dd4 <_mprec_log10+0x4c>
10008da0:	0005883a 	mov	r2,zero
10008da4:	00cffc34 	movhi	r3,16368
10008da8:	843fffc4 	addi	r16,r16,-1
10008dac:	1009883a 	mov	r4,r2
10008db0:	180b883a 	mov	r5,r3
10008db4:	000d883a 	mov	r6,zero
10008db8:	01d00934 	movhi	r7,16420
10008dbc:	000d8000 	call	1000d800 <__muldf3>
10008dc0:	803ff91e 	bne	r16,zero,10008da8 <__alt_data_end+0xf8008da8>
10008dc4:	dfc00117 	ldw	ra,4(sp)
10008dc8:	dc000017 	ldw	r16,0(sp)
10008dcc:	dec00204 	addi	sp,sp,8
10008dd0:	f800283a 	ret
10008dd4:	202090fa 	slli	r16,r4,3
10008dd8:	00840074 	movhi	r2,4097
10008ddc:	10873604 	addi	r2,r2,7384
10008de0:	1421883a 	add	r16,r2,r16
10008de4:	80800017 	ldw	r2,0(r16)
10008de8:	80c00117 	ldw	r3,4(r16)
10008dec:	dfc00117 	ldw	ra,4(sp)
10008df0:	dc000017 	ldw	r16,0(sp)
10008df4:	dec00204 	addi	sp,sp,8
10008df8:	f800283a 	ret

10008dfc <__copybits>:
10008dfc:	297fffc4 	addi	r5,r5,-1
10008e00:	280fd17a 	srai	r7,r5,5
10008e04:	30c00417 	ldw	r3,16(r6)
10008e08:	30800504 	addi	r2,r6,20
10008e0c:	39c00044 	addi	r7,r7,1
10008e10:	18c7883a 	add	r3,r3,r3
10008e14:	39cf883a 	add	r7,r7,r7
10008e18:	18c7883a 	add	r3,r3,r3
10008e1c:	39cf883a 	add	r7,r7,r7
10008e20:	10c7883a 	add	r3,r2,r3
10008e24:	21cf883a 	add	r7,r4,r7
10008e28:	10c00d2e 	bgeu	r2,r3,10008e60 <__copybits+0x64>
10008e2c:	200b883a 	mov	r5,r4
10008e30:	12000017 	ldw	r8,0(r2)
10008e34:	29400104 	addi	r5,r5,4
10008e38:	10800104 	addi	r2,r2,4
10008e3c:	2a3fff15 	stw	r8,-4(r5)
10008e40:	10fffb36 	bltu	r2,r3,10008e30 <__alt_data_end+0xf8008e30>
10008e44:	1985c83a 	sub	r2,r3,r6
10008e48:	10bffac4 	addi	r2,r2,-21
10008e4c:	1004d0ba 	srli	r2,r2,2
10008e50:	10800044 	addi	r2,r2,1
10008e54:	1085883a 	add	r2,r2,r2
10008e58:	1085883a 	add	r2,r2,r2
10008e5c:	2089883a 	add	r4,r4,r2
10008e60:	21c0032e 	bgeu	r4,r7,10008e70 <__copybits+0x74>
10008e64:	20000015 	stw	zero,0(r4)
10008e68:	21000104 	addi	r4,r4,4
10008e6c:	21fffd36 	bltu	r4,r7,10008e64 <__alt_data_end+0xf8008e64>
10008e70:	f800283a 	ret

10008e74 <__any_on>:
10008e74:	20c00417 	ldw	r3,16(r4)
10008e78:	2805d17a 	srai	r2,r5,5
10008e7c:	21000504 	addi	r4,r4,20
10008e80:	18800d0e 	bge	r3,r2,10008eb8 <__any_on+0x44>
10008e84:	18c7883a 	add	r3,r3,r3
10008e88:	18c7883a 	add	r3,r3,r3
10008e8c:	20c7883a 	add	r3,r4,r3
10008e90:	20c0192e 	bgeu	r4,r3,10008ef8 <__any_on+0x84>
10008e94:	18bfff17 	ldw	r2,-4(r3)
10008e98:	18ffff04 	addi	r3,r3,-4
10008e9c:	1000041e 	bne	r2,zero,10008eb0 <__any_on+0x3c>
10008ea0:	20c0142e 	bgeu	r4,r3,10008ef4 <__any_on+0x80>
10008ea4:	18ffff04 	addi	r3,r3,-4
10008ea8:	19400017 	ldw	r5,0(r3)
10008eac:	283ffc26 	beq	r5,zero,10008ea0 <__alt_data_end+0xf8008ea0>
10008eb0:	00800044 	movi	r2,1
10008eb4:	f800283a 	ret
10008eb8:	10c00a0e 	bge	r2,r3,10008ee4 <__any_on+0x70>
10008ebc:	1085883a 	add	r2,r2,r2
10008ec0:	1085883a 	add	r2,r2,r2
10008ec4:	294007cc 	andi	r5,r5,31
10008ec8:	2087883a 	add	r3,r4,r2
10008ecc:	283ff026 	beq	r5,zero,10008e90 <__alt_data_end+0xf8008e90>
10008ed0:	19800017 	ldw	r6,0(r3)
10008ed4:	3144d83a 	srl	r2,r6,r5
10008ed8:	114a983a 	sll	r5,r2,r5
10008edc:	29bff41e 	bne	r5,r6,10008eb0 <__alt_data_end+0xf8008eb0>
10008ee0:	003feb06 	br	10008e90 <__alt_data_end+0xf8008e90>
10008ee4:	1085883a 	add	r2,r2,r2
10008ee8:	1085883a 	add	r2,r2,r2
10008eec:	2087883a 	add	r3,r4,r2
10008ef0:	003fe706 	br	10008e90 <__alt_data_end+0xf8008e90>
10008ef4:	f800283a 	ret
10008ef8:	0005883a 	mov	r2,zero
10008efc:	f800283a 	ret

10008f00 <_realloc_r>:
10008f00:	defff604 	addi	sp,sp,-40
10008f04:	dcc00315 	stw	r19,12(sp)
10008f08:	dc400115 	stw	r17,4(sp)
10008f0c:	dfc00915 	stw	ra,36(sp)
10008f10:	df000815 	stw	fp,32(sp)
10008f14:	ddc00715 	stw	r23,28(sp)
10008f18:	dd800615 	stw	r22,24(sp)
10008f1c:	dd400515 	stw	r21,20(sp)
10008f20:	dd000415 	stw	r20,16(sp)
10008f24:	dc800215 	stw	r18,8(sp)
10008f28:	dc000015 	stw	r16,0(sp)
10008f2c:	2827883a 	mov	r19,r5
10008f30:	3023883a 	mov	r17,r6
10008f34:	2800bf26 	beq	r5,zero,10009234 <_realloc_r+0x334>
10008f38:	2025883a 	mov	r18,r4
10008f3c:	000f17c0 	call	1000f17c <__malloc_lock>
10008f40:	98ffff17 	ldw	r3,-4(r19)
10008f44:	01bfff04 	movi	r6,-4
10008f48:	890002c4 	addi	r4,r17,11
10008f4c:	01c00584 	movi	r7,22
10008f50:	9d7ffe04 	addi	r21,r19,-8
10008f54:	19a0703a 	and	r16,r3,r6
10008f58:	39003f2e 	bgeu	r7,r4,10009058 <_realloc_r+0x158>
10008f5c:	053ffe04 	movi	r20,-8
10008f60:	2528703a 	and	r20,r4,r20
10008f64:	a00f883a 	mov	r7,r20
10008f68:	a0008216 	blt	r20,zero,10009174 <_realloc_r+0x274>
10008f6c:	a4408136 	bltu	r20,r17,10009174 <_realloc_r+0x274>
10008f70:	81c03c0e 	bge	r16,r7,10009064 <_realloc_r+0x164>
10008f74:	07040074 	movhi	fp,4097
10008f78:	e708e404 	addi	fp,fp,9104
10008f7c:	e1000217 	ldw	r4,8(fp)
10008f80:	ac05883a 	add	r2,r21,r16
10008f84:	2080bf26 	beq	r4,r2,10009284 <_realloc_r+0x384>
10008f88:	11000117 	ldw	r4,4(r2)
10008f8c:	023fff84 	movi	r8,-2
10008f90:	2210703a 	and	r8,r4,r8
10008f94:	1211883a 	add	r8,r2,r8
10008f98:	41400117 	ldw	r5,4(r8)
10008f9c:	2940004c 	andi	r5,r5,1
10008fa0:	28004a1e 	bne	r5,zero,100090cc <_realloc_r+0x1cc>
10008fa4:	017fff04 	movi	r5,-4
10008fa8:	2148703a 	and	r4,r4,r5
10008fac:	2409883a 	add	r4,r4,r16
10008fb0:	21c0ad0e 	bge	r4,r7,10009268 <_realloc_r+0x368>
10008fb4:	18c0004c 	andi	r3,r3,1
10008fb8:	18007f1e 	bne	r3,zero,100091b8 <_realloc_r+0x2b8>
10008fbc:	9dfffe17 	ldw	r23,-8(r19)
10008fc0:	adefc83a 	sub	r23,r21,r23
10008fc4:	bd800117 	ldw	r22,4(r23)
10008fc8:	b14a703a 	and	r5,r22,r5
10008fcc:	216d883a 	add	r22,r4,r5
10008fd0:	b1c04516 	blt	r22,r7,100090e8 <_realloc_r+0x1e8>
10008fd4:	10c00317 	ldw	r3,12(r2)
10008fd8:	10800217 	ldw	r2,8(r2)
10008fdc:	81bfff04 	addi	r6,r16,-4
10008fe0:	bc400204 	addi	r17,r23,8
10008fe4:	10c00315 	stw	r3,12(r2)
10008fe8:	18800215 	stw	r2,8(r3)
10008fec:	b9400217 	ldw	r5,8(r23)
10008ff0:	b8c00317 	ldw	r3,12(r23)
10008ff4:	00800904 	movi	r2,36
10008ff8:	28c00315 	stw	r3,12(r5)
10008ffc:	19400215 	stw	r5,8(r3)
10009000:	1180ef36 	bltu	r2,r6,100093c0 <_realloc_r+0x4c0>
10009004:	008004c4 	movi	r2,19
10009008:	1180da2e 	bgeu	r2,r6,10009374 <_realloc_r+0x474>
1000900c:	98800017 	ldw	r2,0(r19)
10009010:	b8800215 	stw	r2,8(r23)
10009014:	98800117 	ldw	r2,4(r19)
10009018:	b8800315 	stw	r2,12(r23)
1000901c:	008006c4 	movi	r2,27
10009020:	1180fc2e 	bgeu	r2,r6,10009414 <_realloc_r+0x514>
10009024:	98800217 	ldw	r2,8(r19)
10009028:	b8800415 	stw	r2,16(r23)
1000902c:	98800317 	ldw	r2,12(r19)
10009030:	b8800515 	stw	r2,20(r23)
10009034:	00800904 	movi	r2,36
10009038:	3080421e 	bne	r6,r2,10009144 <_realloc_r+0x244>
1000903c:	98800417 	ldw	r2,16(r19)
10009040:	9cc00604 	addi	r19,r19,24
10009044:	b8c00804 	addi	r3,r23,32
10009048:	b8800615 	stw	r2,24(r23)
1000904c:	98bfff17 	ldw	r2,-4(r19)
10009050:	b8800715 	stw	r2,28(r23)
10009054:	00003d06 	br	1000914c <_realloc_r+0x24c>
10009058:	01c00404 	movi	r7,16
1000905c:	3829883a 	mov	r20,r7
10009060:	003fc206 	br	10008f6c <__alt_data_end+0xf8008f6c>
10009064:	9823883a 	mov	r17,r19
10009068:	850fc83a 	sub	r7,r16,r20
1000906c:	008003c4 	movi	r2,15
10009070:	18c0004c 	andi	r3,r3,1
10009074:	11c04336 	bltu	r2,r7,10009184 <_realloc_r+0x284>
10009078:	1c06b03a 	or	r3,r3,r16
1000907c:	a8c00115 	stw	r3,4(r21)
10009080:	ac21883a 	add	r16,r21,r16
10009084:	80c00117 	ldw	r3,4(r16)
10009088:	18c00054 	ori	r3,r3,1
1000908c:	80c00115 	stw	r3,4(r16)
10009090:	9009883a 	mov	r4,r18
10009094:	000f19c0 	call	1000f19c <__malloc_unlock>
10009098:	8805883a 	mov	r2,r17
1000909c:	dfc00917 	ldw	ra,36(sp)
100090a0:	df000817 	ldw	fp,32(sp)
100090a4:	ddc00717 	ldw	r23,28(sp)
100090a8:	dd800617 	ldw	r22,24(sp)
100090ac:	dd400517 	ldw	r21,20(sp)
100090b0:	dd000417 	ldw	r20,16(sp)
100090b4:	dcc00317 	ldw	r19,12(sp)
100090b8:	dc800217 	ldw	r18,8(sp)
100090bc:	dc400117 	ldw	r17,4(sp)
100090c0:	dc000017 	ldw	r16,0(sp)
100090c4:	dec00a04 	addi	sp,sp,40
100090c8:	f800283a 	ret
100090cc:	18c0004c 	andi	r3,r3,1
100090d0:	1800391e 	bne	r3,zero,100091b8 <_realloc_r+0x2b8>
100090d4:	9dfffe17 	ldw	r23,-8(r19)
100090d8:	00bfff04 	movi	r2,-4
100090dc:	adefc83a 	sub	r23,r21,r23
100090e0:	b9400117 	ldw	r5,4(r23)
100090e4:	288a703a 	and	r5,r5,r2
100090e8:	2c2d883a 	add	r22,r5,r16
100090ec:	b1c03216 	blt	r22,r7,100091b8 <_realloc_r+0x2b8>
100090f0:	b8800317 	ldw	r2,12(r23)
100090f4:	b8c00217 	ldw	r3,8(r23)
100090f8:	81bfff04 	addi	r6,r16,-4
100090fc:	01000904 	movi	r4,36
10009100:	18800315 	stw	r2,12(r3)
10009104:	10c00215 	stw	r3,8(r2)
10009108:	bc400204 	addi	r17,r23,8
1000910c:	2180ac36 	bltu	r4,r6,100093c0 <_realloc_r+0x4c0>
10009110:	008004c4 	movi	r2,19
10009114:	1180972e 	bgeu	r2,r6,10009374 <_realloc_r+0x474>
10009118:	98800017 	ldw	r2,0(r19)
1000911c:	b8800215 	stw	r2,8(r23)
10009120:	98800117 	ldw	r2,4(r19)
10009124:	b8800315 	stw	r2,12(r23)
10009128:	008006c4 	movi	r2,27
1000912c:	1180b92e 	bgeu	r2,r6,10009414 <_realloc_r+0x514>
10009130:	98800217 	ldw	r2,8(r19)
10009134:	b8800415 	stw	r2,16(r23)
10009138:	98800317 	ldw	r2,12(r19)
1000913c:	b8800515 	stw	r2,20(r23)
10009140:	313fbe26 	beq	r6,r4,1000903c <__alt_data_end+0xf800903c>
10009144:	b8c00604 	addi	r3,r23,24
10009148:	9cc00404 	addi	r19,r19,16
1000914c:	98800017 	ldw	r2,0(r19)
10009150:	b021883a 	mov	r16,r22
10009154:	b82b883a 	mov	r21,r23
10009158:	18800015 	stw	r2,0(r3)
1000915c:	98800117 	ldw	r2,4(r19)
10009160:	18800115 	stw	r2,4(r3)
10009164:	98800217 	ldw	r2,8(r19)
10009168:	18800215 	stw	r2,8(r3)
1000916c:	b8c00117 	ldw	r3,4(r23)
10009170:	003fbd06 	br	10009068 <__alt_data_end+0xf8009068>
10009174:	00800304 	movi	r2,12
10009178:	90800015 	stw	r2,0(r18)
1000917c:	0005883a 	mov	r2,zero
10009180:	003fc606 	br	1000909c <__alt_data_end+0xf800909c>
10009184:	1d06b03a 	or	r3,r3,r20
10009188:	ad0b883a 	add	r5,r21,r20
1000918c:	a8c00115 	stw	r3,4(r21)
10009190:	38800054 	ori	r2,r7,1
10009194:	28800115 	stw	r2,4(r5)
10009198:	29cf883a 	add	r7,r5,r7
1000919c:	38800117 	ldw	r2,4(r7)
100091a0:	9009883a 	mov	r4,r18
100091a4:	29400204 	addi	r5,r5,8
100091a8:	10800054 	ori	r2,r2,1
100091ac:	38800115 	stw	r2,4(r7)
100091b0:	00066d40 	call	100066d4 <_free_r>
100091b4:	003fb606 	br	10009090 <__alt_data_end+0xf8009090>
100091b8:	880b883a 	mov	r5,r17
100091bc:	9009883a 	mov	r4,r18
100091c0:	00072700 	call	10007270 <_malloc_r>
100091c4:	1023883a 	mov	r17,r2
100091c8:	1000aa26 	beq	r2,zero,10009474 <_realloc_r+0x574>
100091cc:	98ffff17 	ldw	r3,-4(r19)
100091d0:	113ffe04 	addi	r4,r2,-8
100091d4:	00bfff84 	movi	r2,-2
100091d8:	1884703a 	and	r2,r3,r2
100091dc:	a885883a 	add	r2,r21,r2
100091e0:	20808626 	beq	r4,r2,100093fc <_realloc_r+0x4fc>
100091e4:	81bfff04 	addi	r6,r16,-4
100091e8:	00800904 	movi	r2,36
100091ec:	11807036 	bltu	r2,r6,100093b0 <_realloc_r+0x4b0>
100091f0:	00c004c4 	movi	r3,19
100091f4:	19805636 	bltu	r3,r6,10009350 <_realloc_r+0x450>
100091f8:	8805883a 	mov	r2,r17
100091fc:	9807883a 	mov	r3,r19
10009200:	19000017 	ldw	r4,0(r3)
10009204:	11000015 	stw	r4,0(r2)
10009208:	19000117 	ldw	r4,4(r3)
1000920c:	11000115 	stw	r4,4(r2)
10009210:	18c00217 	ldw	r3,8(r3)
10009214:	10c00215 	stw	r3,8(r2)
10009218:	980b883a 	mov	r5,r19
1000921c:	9009883a 	mov	r4,r18
10009220:	00066d40 	call	100066d4 <_free_r>
10009224:	9009883a 	mov	r4,r18
10009228:	000f19c0 	call	1000f19c <__malloc_unlock>
1000922c:	8805883a 	mov	r2,r17
10009230:	003f9a06 	br	1000909c <__alt_data_end+0xf800909c>
10009234:	300b883a 	mov	r5,r6
10009238:	dfc00917 	ldw	ra,36(sp)
1000923c:	df000817 	ldw	fp,32(sp)
10009240:	ddc00717 	ldw	r23,28(sp)
10009244:	dd800617 	ldw	r22,24(sp)
10009248:	dd400517 	ldw	r21,20(sp)
1000924c:	dd000417 	ldw	r20,16(sp)
10009250:	dcc00317 	ldw	r19,12(sp)
10009254:	dc800217 	ldw	r18,8(sp)
10009258:	dc400117 	ldw	r17,4(sp)
1000925c:	dc000017 	ldw	r16,0(sp)
10009260:	dec00a04 	addi	sp,sp,40
10009264:	00072701 	jmpi	10007270 <_malloc_r>
10009268:	11400317 	ldw	r5,12(r2)
1000926c:	10800217 	ldw	r2,8(r2)
10009270:	9823883a 	mov	r17,r19
10009274:	2021883a 	mov	r16,r4
10009278:	11400315 	stw	r5,12(r2)
1000927c:	28800215 	stw	r2,8(r5)
10009280:	003f7906 	br	10009068 <__alt_data_end+0xf8009068>
10009284:	21000117 	ldw	r4,4(r4)
10009288:	00bfff04 	movi	r2,-4
1000928c:	a1800404 	addi	r6,r20,16
10009290:	2088703a 	and	r4,r4,r2
10009294:	2409883a 	add	r4,r4,r16
10009298:	2180380e 	bge	r4,r6,1000937c <_realloc_r+0x47c>
1000929c:	18c0004c 	andi	r3,r3,1
100092a0:	183fc51e 	bne	r3,zero,100091b8 <__alt_data_end+0xf80091b8>
100092a4:	9dfffe17 	ldw	r23,-8(r19)
100092a8:	adefc83a 	sub	r23,r21,r23
100092ac:	b9400117 	ldw	r5,4(r23)
100092b0:	288a703a 	and	r5,r5,r2
100092b4:	216d883a 	add	r22,r4,r5
100092b8:	b1bf8b16 	blt	r22,r6,100090e8 <__alt_data_end+0xf80090e8>
100092bc:	b8800317 	ldw	r2,12(r23)
100092c0:	b8c00217 	ldw	r3,8(r23)
100092c4:	81bfff04 	addi	r6,r16,-4
100092c8:	01000904 	movi	r4,36
100092cc:	18800315 	stw	r2,12(r3)
100092d0:	10c00215 	stw	r3,8(r2)
100092d4:	bc400204 	addi	r17,r23,8
100092d8:	21805a36 	bltu	r4,r6,10009444 <_realloc_r+0x544>
100092dc:	008004c4 	movi	r2,19
100092e0:	1180562e 	bgeu	r2,r6,1000943c <_realloc_r+0x53c>
100092e4:	98800017 	ldw	r2,0(r19)
100092e8:	b8800215 	stw	r2,8(r23)
100092ec:	98800117 	ldw	r2,4(r19)
100092f0:	b8800315 	stw	r2,12(r23)
100092f4:	008006c4 	movi	r2,27
100092f8:	11805636 	bltu	r2,r6,10009454 <_realloc_r+0x554>
100092fc:	b8800404 	addi	r2,r23,16
10009300:	9cc00204 	addi	r19,r19,8
10009304:	98c00017 	ldw	r3,0(r19)
10009308:	10c00015 	stw	r3,0(r2)
1000930c:	98c00117 	ldw	r3,4(r19)
10009310:	10c00115 	stw	r3,4(r2)
10009314:	98c00217 	ldw	r3,8(r19)
10009318:	10c00215 	stw	r3,8(r2)
1000931c:	bd07883a 	add	r3,r23,r20
10009320:	b505c83a 	sub	r2,r22,r20
10009324:	e0c00215 	stw	r3,8(fp)
10009328:	10800054 	ori	r2,r2,1
1000932c:	18800115 	stw	r2,4(r3)
10009330:	b8800117 	ldw	r2,4(r23)
10009334:	9009883a 	mov	r4,r18
10009338:	1080004c 	andi	r2,r2,1
1000933c:	a0a8b03a 	or	r20,r20,r2
10009340:	bd000115 	stw	r20,4(r23)
10009344:	000f19c0 	call	1000f19c <__malloc_unlock>
10009348:	8805883a 	mov	r2,r17
1000934c:	003f5306 	br	1000909c <__alt_data_end+0xf800909c>
10009350:	98c00017 	ldw	r3,0(r19)
10009354:	88c00015 	stw	r3,0(r17)
10009358:	98c00117 	ldw	r3,4(r19)
1000935c:	88c00115 	stw	r3,4(r17)
10009360:	00c006c4 	movi	r3,27
10009364:	19801d36 	bltu	r3,r6,100093dc <_realloc_r+0x4dc>
10009368:	88800204 	addi	r2,r17,8
1000936c:	98c00204 	addi	r3,r19,8
10009370:	003fa306 	br	10009200 <__alt_data_end+0xf8009200>
10009374:	8807883a 	mov	r3,r17
10009378:	003f7406 	br	1000914c <__alt_data_end+0xf800914c>
1000937c:	ad2b883a 	add	r21,r21,r20
10009380:	2505c83a 	sub	r2,r4,r20
10009384:	e5400215 	stw	r21,8(fp)
10009388:	10800054 	ori	r2,r2,1
1000938c:	a8800115 	stw	r2,4(r21)
10009390:	98bfff17 	ldw	r2,-4(r19)
10009394:	9009883a 	mov	r4,r18
10009398:	1080004c 	andi	r2,r2,1
1000939c:	a0a8b03a 	or	r20,r20,r2
100093a0:	9d3fff15 	stw	r20,-4(r19)
100093a4:	000f19c0 	call	1000f19c <__malloc_unlock>
100093a8:	9805883a 	mov	r2,r19
100093ac:	003f3b06 	br	1000909c <__alt_data_end+0xf800909c>
100093b0:	8809883a 	mov	r4,r17
100093b4:	980b883a 	mov	r5,r19
100093b8:	0007c380 	call	10007c38 <memmove>
100093bc:	003f9606 	br	10009218 <__alt_data_end+0xf8009218>
100093c0:	8809883a 	mov	r4,r17
100093c4:	980b883a 	mov	r5,r19
100093c8:	0007c380 	call	10007c38 <memmove>
100093cc:	b8c00117 	ldw	r3,4(r23)
100093d0:	b021883a 	mov	r16,r22
100093d4:	b82b883a 	mov	r21,r23
100093d8:	003f2306 	br	10009068 <__alt_data_end+0xf8009068>
100093dc:	98c00217 	ldw	r3,8(r19)
100093e0:	88c00215 	stw	r3,8(r17)
100093e4:	98c00317 	ldw	r3,12(r19)
100093e8:	88c00315 	stw	r3,12(r17)
100093ec:	30800c26 	beq	r6,r2,10009420 <_realloc_r+0x520>
100093f0:	88800404 	addi	r2,r17,16
100093f4:	98c00404 	addi	r3,r19,16
100093f8:	003f8106 	br	10009200 <__alt_data_end+0xf8009200>
100093fc:	893fff17 	ldw	r4,-4(r17)
10009400:	00bfff04 	movi	r2,-4
10009404:	9823883a 	mov	r17,r19
10009408:	2084703a 	and	r2,r4,r2
1000940c:	80a1883a 	add	r16,r16,r2
10009410:	003f1506 	br	10009068 <__alt_data_end+0xf8009068>
10009414:	b8c00404 	addi	r3,r23,16
10009418:	9cc00204 	addi	r19,r19,8
1000941c:	003f4b06 	br	1000914c <__alt_data_end+0xf800914c>
10009420:	99000417 	ldw	r4,16(r19)
10009424:	88800604 	addi	r2,r17,24
10009428:	98c00604 	addi	r3,r19,24
1000942c:	89000415 	stw	r4,16(r17)
10009430:	99000517 	ldw	r4,20(r19)
10009434:	89000515 	stw	r4,20(r17)
10009438:	003f7106 	br	10009200 <__alt_data_end+0xf8009200>
1000943c:	8805883a 	mov	r2,r17
10009440:	003fb006 	br	10009304 <__alt_data_end+0xf8009304>
10009444:	8809883a 	mov	r4,r17
10009448:	980b883a 	mov	r5,r19
1000944c:	0007c380 	call	10007c38 <memmove>
10009450:	003fb206 	br	1000931c <__alt_data_end+0xf800931c>
10009454:	98800217 	ldw	r2,8(r19)
10009458:	b8800415 	stw	r2,16(r23)
1000945c:	98800317 	ldw	r2,12(r19)
10009460:	b8800515 	stw	r2,20(r23)
10009464:	31000726 	beq	r6,r4,10009484 <_realloc_r+0x584>
10009468:	b8800604 	addi	r2,r23,24
1000946c:	9cc00404 	addi	r19,r19,16
10009470:	003fa406 	br	10009304 <__alt_data_end+0xf8009304>
10009474:	9009883a 	mov	r4,r18
10009478:	000f19c0 	call	1000f19c <__malloc_unlock>
1000947c:	0005883a 	mov	r2,zero
10009480:	003f0606 	br	1000909c <__alt_data_end+0xf800909c>
10009484:	98c00417 	ldw	r3,16(r19)
10009488:	9cc00604 	addi	r19,r19,24
1000948c:	b8800804 	addi	r2,r23,32
10009490:	b8c00615 	stw	r3,24(r23)
10009494:	98ffff17 	ldw	r3,-4(r19)
10009498:	b8c00715 	stw	r3,28(r23)
1000949c:	003f9906 	br	10009304 <__alt_data_end+0xf8009304>

100094a0 <__fpclassifyd>:
100094a0:	00a00034 	movhi	r2,32768
100094a4:	10bfffc4 	addi	r2,r2,-1
100094a8:	2884703a 	and	r2,r5,r2
100094ac:	10000726 	beq	r2,zero,100094cc <__fpclassifyd+0x2c>
100094b0:	00fffc34 	movhi	r3,65520
100094b4:	019ff834 	movhi	r6,32736
100094b8:	28c7883a 	add	r3,r5,r3
100094bc:	31bfffc4 	addi	r6,r6,-1
100094c0:	30c00536 	bltu	r6,r3,100094d8 <__fpclassifyd+0x38>
100094c4:	00800104 	movi	r2,4
100094c8:	f800283a 	ret
100094cc:	2000021e 	bne	r4,zero,100094d8 <__fpclassifyd+0x38>
100094d0:	00800084 	movi	r2,2
100094d4:	f800283a 	ret
100094d8:	00dffc34 	movhi	r3,32752
100094dc:	019ff834 	movhi	r6,32736
100094e0:	28cb883a 	add	r5,r5,r3
100094e4:	31bfffc4 	addi	r6,r6,-1
100094e8:	317ff62e 	bgeu	r6,r5,100094c4 <__alt_data_end+0xf80094c4>
100094ec:	01400434 	movhi	r5,16
100094f0:	297fffc4 	addi	r5,r5,-1
100094f4:	28800236 	bltu	r5,r2,10009500 <__fpclassifyd+0x60>
100094f8:	008000c4 	movi	r2,3
100094fc:	f800283a 	ret
10009500:	10c00226 	beq	r2,r3,1000950c <__fpclassifyd+0x6c>
10009504:	0005883a 	mov	r2,zero
10009508:	f800283a 	ret
1000950c:	2005003a 	cmpeq	r2,r4,zero
10009510:	f800283a 	ret

10009514 <_sbrk_r>:
10009514:	defffd04 	addi	sp,sp,-12
10009518:	dc000015 	stw	r16,0(sp)
1000951c:	04040074 	movhi	r16,4097
10009520:	dc400115 	stw	r17,4(sp)
10009524:	84153a04 	addi	r16,r16,21736
10009528:	2023883a 	mov	r17,r4
1000952c:	2809883a 	mov	r4,r5
10009530:	dfc00215 	stw	ra,8(sp)
10009534:	80000015 	stw	zero,0(r16)
10009538:	000f3900 	call	1000f390 <sbrk>
1000953c:	00ffffc4 	movi	r3,-1
10009540:	10c00526 	beq	r2,r3,10009558 <_sbrk_r+0x44>
10009544:	dfc00217 	ldw	ra,8(sp)
10009548:	dc400117 	ldw	r17,4(sp)
1000954c:	dc000017 	ldw	r16,0(sp)
10009550:	dec00304 	addi	sp,sp,12
10009554:	f800283a 	ret
10009558:	80c00017 	ldw	r3,0(r16)
1000955c:	183ff926 	beq	r3,zero,10009544 <__alt_data_end+0xf8009544>
10009560:	88c00015 	stw	r3,0(r17)
10009564:	003ff706 	br	10009544 <__alt_data_end+0xf8009544>

10009568 <__sread>:
10009568:	defffe04 	addi	sp,sp,-8
1000956c:	dc000015 	stw	r16,0(sp)
10009570:	2821883a 	mov	r16,r5
10009574:	2940038f 	ldh	r5,14(r5)
10009578:	dfc00115 	stw	ra,4(sp)
1000957c:	000b2240 	call	1000b224 <_read_r>
10009580:	10000716 	blt	r2,zero,100095a0 <__sread+0x38>
10009584:	80c01417 	ldw	r3,80(r16)
10009588:	1887883a 	add	r3,r3,r2
1000958c:	80c01415 	stw	r3,80(r16)
10009590:	dfc00117 	ldw	ra,4(sp)
10009594:	dc000017 	ldw	r16,0(sp)
10009598:	dec00204 	addi	sp,sp,8
1000959c:	f800283a 	ret
100095a0:	80c0030b 	ldhu	r3,12(r16)
100095a4:	18fbffcc 	andi	r3,r3,61439
100095a8:	80c0030d 	sth	r3,12(r16)
100095ac:	dfc00117 	ldw	ra,4(sp)
100095b0:	dc000017 	ldw	r16,0(sp)
100095b4:	dec00204 	addi	sp,sp,8
100095b8:	f800283a 	ret

100095bc <__seofread>:
100095bc:	0005883a 	mov	r2,zero
100095c0:	f800283a 	ret

100095c4 <__swrite>:
100095c4:	2880030b 	ldhu	r2,12(r5)
100095c8:	defffb04 	addi	sp,sp,-20
100095cc:	dcc00315 	stw	r19,12(sp)
100095d0:	dc800215 	stw	r18,8(sp)
100095d4:	dc400115 	stw	r17,4(sp)
100095d8:	dc000015 	stw	r16,0(sp)
100095dc:	dfc00415 	stw	ra,16(sp)
100095e0:	10c0400c 	andi	r3,r2,256
100095e4:	2821883a 	mov	r16,r5
100095e8:	2027883a 	mov	r19,r4
100095ec:	3025883a 	mov	r18,r6
100095f0:	3823883a 	mov	r17,r7
100095f4:	18000526 	beq	r3,zero,1000960c <__swrite+0x48>
100095f8:	2940038f 	ldh	r5,14(r5)
100095fc:	000d883a 	mov	r6,zero
10009600:	01c00084 	movi	r7,2
10009604:	000b1c80 	call	1000b1c8 <_lseek_r>
10009608:	8080030b 	ldhu	r2,12(r16)
1000960c:	8140038f 	ldh	r5,14(r16)
10009610:	10bbffcc 	andi	r2,r2,61439
10009614:	9809883a 	mov	r4,r19
10009618:	900d883a 	mov	r6,r18
1000961c:	880f883a 	mov	r7,r17
10009620:	8080030d 	sth	r2,12(r16)
10009624:	dfc00417 	ldw	ra,16(sp)
10009628:	dcc00317 	ldw	r19,12(sp)
1000962c:	dc800217 	ldw	r18,8(sp)
10009630:	dc400117 	ldw	r17,4(sp)
10009634:	dc000017 	ldw	r16,0(sp)
10009638:	dec00504 	addi	sp,sp,20
1000963c:	000aca41 	jmpi	1000aca4 <_write_r>

10009640 <__sseek>:
10009640:	defffe04 	addi	sp,sp,-8
10009644:	dc000015 	stw	r16,0(sp)
10009648:	2821883a 	mov	r16,r5
1000964c:	2940038f 	ldh	r5,14(r5)
10009650:	dfc00115 	stw	ra,4(sp)
10009654:	000b1c80 	call	1000b1c8 <_lseek_r>
10009658:	00ffffc4 	movi	r3,-1
1000965c:	10c00826 	beq	r2,r3,10009680 <__sseek+0x40>
10009660:	80c0030b 	ldhu	r3,12(r16)
10009664:	80801415 	stw	r2,80(r16)
10009668:	18c40014 	ori	r3,r3,4096
1000966c:	80c0030d 	sth	r3,12(r16)
10009670:	dfc00117 	ldw	ra,4(sp)
10009674:	dc000017 	ldw	r16,0(sp)
10009678:	dec00204 	addi	sp,sp,8
1000967c:	f800283a 	ret
10009680:	80c0030b 	ldhu	r3,12(r16)
10009684:	18fbffcc 	andi	r3,r3,61439
10009688:	80c0030d 	sth	r3,12(r16)
1000968c:	dfc00117 	ldw	ra,4(sp)
10009690:	dc000017 	ldw	r16,0(sp)
10009694:	dec00204 	addi	sp,sp,8
10009698:	f800283a 	ret

1000969c <__sclose>:
1000969c:	2940038f 	ldh	r5,14(r5)
100096a0:	000ad001 	jmpi	1000ad00 <_close_r>

100096a4 <strcmp>:
100096a4:	2144b03a 	or	r2,r4,r5
100096a8:	108000cc 	andi	r2,r2,3
100096ac:	1000171e 	bne	r2,zero,1000970c <strcmp+0x68>
100096b0:	20800017 	ldw	r2,0(r4)
100096b4:	28c00017 	ldw	r3,0(r5)
100096b8:	10c0141e 	bne	r2,r3,1000970c <strcmp+0x68>
100096bc:	027fbff4 	movhi	r9,65279
100096c0:	4a7fbfc4 	addi	r9,r9,-257
100096c4:	0086303a 	nor	r3,zero,r2
100096c8:	02202074 	movhi	r8,32897
100096cc:	1245883a 	add	r2,r2,r9
100096d0:	42202004 	addi	r8,r8,-32640
100096d4:	10c4703a 	and	r2,r2,r3
100096d8:	1204703a 	and	r2,r2,r8
100096dc:	10000226 	beq	r2,zero,100096e8 <strcmp+0x44>
100096e0:	00001706 	br	10009740 <strcmp+0x9c>
100096e4:	1000161e 	bne	r2,zero,10009740 <strcmp+0x9c>
100096e8:	21000104 	addi	r4,r4,4
100096ec:	20c00017 	ldw	r3,0(r4)
100096f0:	29400104 	addi	r5,r5,4
100096f4:	29800017 	ldw	r6,0(r5)
100096f8:	1a4f883a 	add	r7,r3,r9
100096fc:	00c4303a 	nor	r2,zero,r3
10009700:	3884703a 	and	r2,r7,r2
10009704:	1204703a 	and	r2,r2,r8
10009708:	19bff626 	beq	r3,r6,100096e4 <__alt_data_end+0xf80096e4>
1000970c:	20800007 	ldb	r2,0(r4)
10009710:	1000051e 	bne	r2,zero,10009728 <strcmp+0x84>
10009714:	00000606 	br	10009730 <strcmp+0x8c>
10009718:	21000044 	addi	r4,r4,1
1000971c:	20800007 	ldb	r2,0(r4)
10009720:	29400044 	addi	r5,r5,1
10009724:	10000226 	beq	r2,zero,10009730 <strcmp+0x8c>
10009728:	28c00007 	ldb	r3,0(r5)
1000972c:	10fffa26 	beq	r2,r3,10009718 <__alt_data_end+0xf8009718>
10009730:	20800003 	ldbu	r2,0(r4)
10009734:	28c00003 	ldbu	r3,0(r5)
10009738:	10c5c83a 	sub	r2,r2,r3
1000973c:	f800283a 	ret
10009740:	0005883a 	mov	r2,zero
10009744:	f800283a 	ret

10009748 <__sprint_r.part.0>:
10009748:	28801917 	ldw	r2,100(r5)
1000974c:	defff604 	addi	sp,sp,-40
10009750:	dd400515 	stw	r21,20(sp)
10009754:	dcc00315 	stw	r19,12(sp)
10009758:	dfc00915 	stw	ra,36(sp)
1000975c:	df000815 	stw	fp,32(sp)
10009760:	ddc00715 	stw	r23,28(sp)
10009764:	dd800615 	stw	r22,24(sp)
10009768:	dd000415 	stw	r20,16(sp)
1000976c:	dc800215 	stw	r18,8(sp)
10009770:	dc400115 	stw	r17,4(sp)
10009774:	dc000015 	stw	r16,0(sp)
10009778:	1088000c 	andi	r2,r2,8192
1000977c:	2827883a 	mov	r19,r5
10009780:	302b883a 	mov	r21,r6
10009784:	10002d26 	beq	r2,zero,1000983c <__sprint_r.part.0+0xf4>
10009788:	30800217 	ldw	r2,8(r6)
1000978c:	35800017 	ldw	r22,0(r6)
10009790:	10002826 	beq	r2,zero,10009834 <__sprint_r.part.0+0xec>
10009794:	2029883a 	mov	r20,r4
10009798:	b5c00104 	addi	r23,r22,4
1000979c:	04bfffc4 	movi	r18,-1
100097a0:	bc400017 	ldw	r17,0(r23)
100097a4:	b4000017 	ldw	r16,0(r22)
100097a8:	0039883a 	mov	fp,zero
100097ac:	8822d0ba 	srli	r17,r17,2
100097b0:	04400316 	blt	zero,r17,100097c0 <__sprint_r.part.0+0x78>
100097b4:	00001706 	br	10009814 <__sprint_r.part.0+0xcc>
100097b8:	84000104 	addi	r16,r16,4
100097bc:	8f001526 	beq	r17,fp,10009814 <__sprint_r.part.0+0xcc>
100097c0:	81400017 	ldw	r5,0(r16)
100097c4:	a009883a 	mov	r4,r20
100097c8:	980d883a 	mov	r6,r19
100097cc:	000af400 	call	1000af40 <_fputwc_r>
100097d0:	e7000044 	addi	fp,fp,1
100097d4:	14bff81e 	bne	r2,r18,100097b8 <__alt_data_end+0xf80097b8>
100097d8:	9005883a 	mov	r2,r18
100097dc:	a8000215 	stw	zero,8(r21)
100097e0:	a8000115 	stw	zero,4(r21)
100097e4:	dfc00917 	ldw	ra,36(sp)
100097e8:	df000817 	ldw	fp,32(sp)
100097ec:	ddc00717 	ldw	r23,28(sp)
100097f0:	dd800617 	ldw	r22,24(sp)
100097f4:	dd400517 	ldw	r21,20(sp)
100097f8:	dd000417 	ldw	r20,16(sp)
100097fc:	dcc00317 	ldw	r19,12(sp)
10009800:	dc800217 	ldw	r18,8(sp)
10009804:	dc400117 	ldw	r17,4(sp)
10009808:	dc000017 	ldw	r16,0(sp)
1000980c:	dec00a04 	addi	sp,sp,40
10009810:	f800283a 	ret
10009814:	a8c00217 	ldw	r3,8(r21)
10009818:	8c63883a 	add	r17,r17,r17
1000981c:	8c63883a 	add	r17,r17,r17
10009820:	1c45c83a 	sub	r2,r3,r17
10009824:	a8800215 	stw	r2,8(r21)
10009828:	b5800204 	addi	r22,r22,8
1000982c:	bdc00204 	addi	r23,r23,8
10009830:	103fdb1e 	bne	r2,zero,100097a0 <__alt_data_end+0xf80097a0>
10009834:	0005883a 	mov	r2,zero
10009838:	003fe806 	br	100097dc <__alt_data_end+0xf80097dc>
1000983c:	00069c40 	call	100069c4 <__sfvwrite_r>
10009840:	003fe606 	br	100097dc <__alt_data_end+0xf80097dc>

10009844 <__sprint_r>:
10009844:	30c00217 	ldw	r3,8(r6)
10009848:	18000126 	beq	r3,zero,10009850 <__sprint_r+0xc>
1000984c:	00097481 	jmpi	10009748 <__sprint_r.part.0>
10009850:	30000115 	stw	zero,4(r6)
10009854:	0005883a 	mov	r2,zero
10009858:	f800283a 	ret

1000985c <___vfiprintf_internal_r>:
1000985c:	defeca04 	addi	sp,sp,-1240
10009860:	dcc12f15 	stw	r19,1212(sp)
10009864:	dfc13515 	stw	ra,1236(sp)
10009868:	df013415 	stw	fp,1232(sp)
1000986c:	ddc13315 	stw	r23,1228(sp)
10009870:	dd813215 	stw	r22,1224(sp)
10009874:	dd413115 	stw	r21,1220(sp)
10009878:	dd013015 	stw	r20,1216(sp)
1000987c:	dc812e15 	stw	r18,1208(sp)
10009880:	dc412d15 	stw	r17,1204(sp)
10009884:	dc012c15 	stw	r16,1200(sp)
10009888:	d9012115 	stw	r4,1156(sp)
1000988c:	d9412015 	stw	r5,1152(sp)
10009890:	d9c12315 	stw	r7,1164(sp)
10009894:	3027883a 	mov	r19,r6
10009898:	20000226 	beq	r4,zero,100098a4 <___vfiprintf_internal_r+0x48>
1000989c:	20800e17 	ldw	r2,56(r4)
100098a0:	1000f726 	beq	r2,zero,10009c80 <___vfiprintf_internal_r+0x424>
100098a4:	d8812017 	ldw	r2,1152(sp)
100098a8:	10c0030b 	ldhu	r3,12(r2)
100098ac:	1908000c 	andi	r4,r3,8192
100098b0:	1805883a 	mov	r2,r3
100098b4:	2000081e 	bne	r4,zero,100098d8 <___vfiprintf_internal_r+0x7c>
100098b8:	d9412017 	ldw	r5,1152(sp)
100098bc:	18880014 	ori	r2,r3,8192
100098c0:	00f7ffc4 	movi	r3,-8193
100098c4:	29001917 	ldw	r4,100(r5)
100098c8:	2880030d 	sth	r2,12(r5)
100098cc:	20c8703a 	and	r4,r4,r3
100098d0:	29001915 	stw	r4,100(r5)
100098d4:	1007883a 	mov	r3,r2
100098d8:	1100020c 	andi	r4,r2,8
100098dc:	2000a726 	beq	r4,zero,10009b7c <___vfiprintf_internal_r+0x320>
100098e0:	d9412017 	ldw	r5,1152(sp)
100098e4:	29000417 	ldw	r4,16(r5)
100098e8:	2000a426 	beq	r4,zero,10009b7c <___vfiprintf_internal_r+0x320>
100098ec:	1080068c 	andi	r2,r2,26
100098f0:	01000284 	movi	r4,10
100098f4:	1100ab26 	beq	r2,r4,10009ba4 <___vfiprintf_internal_r+0x348>
100098f8:	d9010a04 	addi	r4,sp,1064
100098fc:	d94109c4 	addi	r5,sp,1063
10009900:	07040074 	movhi	fp,4097
10009904:	04440074 	movhi	r17,4097
10009908:	2145c83a 	sub	r2,r4,r5
1000990c:	e7076c04 	addi	fp,fp,7600
10009910:	8c476804 	addi	r17,r17,7584
10009914:	d9011e15 	stw	r4,1144(sp)
10009918:	d9411f15 	stw	r5,1148(sp)
1000991c:	dec11a15 	stw	sp,1128(sp)
10009920:	d8011c15 	stw	zero,1136(sp)
10009924:	d8011b15 	stw	zero,1132(sp)
10009928:	d8012715 	stw	zero,1180(sp)
1000992c:	d8012515 	stw	zero,1172(sp)
10009930:	d811883a 	mov	r8,sp
10009934:	d8812815 	stw	r2,1184(sp)
10009938:	982f883a 	mov	r23,r19
1000993c:	b8800007 	ldb	r2,0(r23)
10009940:	1003b026 	beq	r2,zero,1000a804 <___vfiprintf_internal_r+0xfa8>
10009944:	01000944 	movi	r4,37
10009948:	1103ae26 	beq	r2,r4,1000a804 <___vfiprintf_internal_r+0xfa8>
1000994c:	b805883a 	mov	r2,r23
10009950:	00000106 	br	10009958 <___vfiprintf_internal_r+0xfc>
10009954:	19000326 	beq	r3,r4,10009964 <___vfiprintf_internal_r+0x108>
10009958:	10800044 	addi	r2,r2,1
1000995c:	10c00007 	ldb	r3,0(r2)
10009960:	183ffc1e 	bne	r3,zero,10009954 <__alt_data_end+0xf8009954>
10009964:	15e1c83a 	sub	r16,r2,r23
10009968:	1029883a 	mov	r20,r2
1000996c:	80001026 	beq	r16,zero,100099b0 <___vfiprintf_internal_r+0x154>
10009970:	d8c11c17 	ldw	r3,1136(sp)
10009974:	d8811b17 	ldw	r2,1132(sp)
10009978:	45c00015 	stw	r23,0(r8)
1000997c:	80c7883a 	add	r3,r16,r3
10009980:	10800044 	addi	r2,r2,1
10009984:	44000115 	stw	r16,4(r8)
10009988:	d8c11c15 	stw	r3,1136(sp)
1000998c:	d8811b15 	stw	r2,1132(sp)
10009990:	010001c4 	movi	r4,7
10009994:	2080740e 	bge	r4,r2,10009b68 <___vfiprintf_internal_r+0x30c>
10009998:	1803a71e 	bne	r3,zero,1000a838 <___vfiprintf_internal_r+0xfdc>
1000999c:	d8c12517 	ldw	r3,1172(sp)
100099a0:	d8011b15 	stw	zero,1132(sp)
100099a4:	d811883a 	mov	r8,sp
100099a8:	1c07883a 	add	r3,r3,r16
100099ac:	d8c12515 	stw	r3,1172(sp)
100099b0:	a0800007 	ldb	r2,0(r20)
100099b4:	1002bf26 	beq	r2,zero,1000a4b4 <___vfiprintf_internal_r+0xc58>
100099b8:	a5c00044 	addi	r23,r20,1
100099bc:	a1800047 	ldb	r6,1(r20)
100099c0:	d8011d85 	stb	zero,1142(sp)
100099c4:	d8012205 	stb	zero,1160(sp)
100099c8:	043fffc4 	movi	r16,-1
100099cc:	d8012415 	stw	zero,1168(sp)
100099d0:	0025883a 	mov	r18,zero
100099d4:	05001604 	movi	r20,88
100099d8:	05400244 	movi	r21,9
100099dc:	4027883a 	mov	r19,r8
100099e0:	bdc00044 	addi	r23,r23,1
100099e4:	30bff804 	addi	r2,r6,-32
100099e8:	a0825636 	bltu	r20,r2,1000a344 <___vfiprintf_internal_r+0xae8>
100099ec:	100490ba 	slli	r2,r2,2
100099f0:	01040074 	movhi	r4,4097
100099f4:	21268104 	addi	r4,r4,-26108
100099f8:	1105883a 	add	r2,r2,r4
100099fc:	10800017 	ldw	r2,0(r2)
10009a00:	1000683a 	jmp	r2
10009a04:	1000a2d4 	ori	zero,r2,651
10009a08:	1000a344 	addi	zero,r2,653
10009a0c:	1000a344 	addi	zero,r2,653
10009a10:	1000a338 	rdprs	zero,r2,652
10009a14:	1000a344 	addi	zero,r2,653
10009a18:	1000a344 	addi	zero,r2,653
10009a1c:	1000a344 	addi	zero,r2,653
10009a20:	1000a344 	addi	zero,r2,653
10009a24:	1000a344 	addi	zero,r2,653
10009a28:	1000a344 	addi	zero,r2,653
10009a2c:	1000a0c4 	addi	zero,r2,643
10009a30:	1000a2ec 	andhi	zero,r2,651
10009a34:	1000a344 	addi	zero,r2,653
10009a38:	10009c98 	cmpnei	zero,r2,626
10009a3c:	1000a0e8 	cmpgeui	zero,r2,643
10009a40:	1000a344 	addi	zero,r2,653
10009a44:	10009ca4 	muli	zero,r2,626
10009a48:	10009cb0 	cmpltui	zero,r2,626
10009a4c:	10009cb0 	cmpltui	zero,r2,626
10009a50:	10009cb0 	cmpltui	zero,r2,626
10009a54:	10009cb0 	cmpltui	zero,r2,626
10009a58:	10009cb0 	cmpltui	zero,r2,626
10009a5c:	10009cb0 	cmpltui	zero,r2,626
10009a60:	10009cb0 	cmpltui	zero,r2,626
10009a64:	10009cb0 	cmpltui	zero,r2,626
10009a68:	10009cb0 	cmpltui	zero,r2,626
10009a6c:	1000a344 	addi	zero,r2,653
10009a70:	1000a344 	addi	zero,r2,653
10009a74:	1000a344 	addi	zero,r2,653
10009a78:	1000a344 	addi	zero,r2,653
10009a7c:	1000a344 	addi	zero,r2,653
10009a80:	1000a344 	addi	zero,r2,653
10009a84:	1000a344 	addi	zero,r2,653
10009a88:	1000a344 	addi	zero,r2,653
10009a8c:	1000a344 	addi	zero,r2,653
10009a90:	1000a344 	addi	zero,r2,653
10009a94:	10009cf0 	cmpltui	zero,r2,627
10009a98:	1000a344 	addi	zero,r2,653
10009a9c:	1000a344 	addi	zero,r2,653
10009aa0:	1000a344 	addi	zero,r2,653
10009aa4:	1000a344 	addi	zero,r2,653
10009aa8:	1000a344 	addi	zero,r2,653
10009aac:	1000a344 	addi	zero,r2,653
10009ab0:	1000a344 	addi	zero,r2,653
10009ab4:	1000a344 	addi	zero,r2,653
10009ab8:	1000a344 	addi	zero,r2,653
10009abc:	1000a344 	addi	zero,r2,653
10009ac0:	10009fe0 	cmpeqi	zero,r2,639
10009ac4:	1000a344 	addi	zero,r2,653
10009ac8:	1000a344 	addi	zero,r2,653
10009acc:	1000a344 	addi	zero,r2,653
10009ad0:	1000a344 	addi	zero,r2,653
10009ad4:	1000a344 	addi	zero,r2,653
10009ad8:	1000a020 	cmpeqi	zero,r2,640
10009adc:	1000a344 	addi	zero,r2,653
10009ae0:	1000a344 	addi	zero,r2,653
10009ae4:	1000a064 	muli	zero,r2,641
10009ae8:	1000a344 	addi	zero,r2,653
10009aec:	1000a344 	addi	zero,r2,653
10009af0:	1000a344 	addi	zero,r2,653
10009af4:	1000a344 	addi	zero,r2,653
10009af8:	1000a344 	addi	zero,r2,653
10009afc:	1000a344 	addi	zero,r2,653
10009b00:	1000a344 	addi	zero,r2,653
10009b04:	1000a344 	addi	zero,r2,653
10009b08:	1000a344 	addi	zero,r2,653
10009b0c:	1000a344 	addi	zero,r2,653
10009b10:	10009fac 	andhi	zero,r2,638
10009b14:	1000a2fc 	xorhi	zero,r2,651
10009b18:	1000a344 	addi	zero,r2,653
10009b1c:	1000a344 	addi	zero,r2,653
10009b20:	1000a344 	addi	zero,r2,653
10009b24:	1000a138 	rdprs	zero,r2,644
10009b28:	1000a2fc 	xorhi	zero,r2,651
10009b2c:	1000a344 	addi	zero,r2,653
10009b30:	1000a344 	addi	zero,r2,653
10009b34:	1000a050 	cmplti	zero,r2,641
10009b38:	1000a344 	addi	zero,r2,653
10009b3c:	1000a29c 	xori	zero,r2,650
10009b40:	1000a224 	muli	zero,r2,648
10009b44:	1000a258 	cmpnei	zero,r2,649
10009b48:	1000a144 	addi	zero,r2,645
10009b4c:	1000a344 	addi	zero,r2,653
10009b50:	1000a150 	cmplti	zero,r2,645
10009b54:	1000a344 	addi	zero,r2,653
10009b58:	1000a1ac 	andhi	zero,r2,646
10009b5c:	1000a344 	addi	zero,r2,653
10009b60:	1000a344 	addi	zero,r2,653
10009b64:	1000a1e0 	cmpeqi	zero,r2,647
10009b68:	42000204 	addi	r8,r8,8
10009b6c:	d8c12517 	ldw	r3,1172(sp)
10009b70:	1c07883a 	add	r3,r3,r16
10009b74:	d8c12515 	stw	r3,1172(sp)
10009b78:	003f8d06 	br	100099b0 <__alt_data_end+0xf80099b0>
10009b7c:	d9012117 	ldw	r4,1156(sp)
10009b80:	d9412017 	ldw	r5,1152(sp)
10009b84:	00045240 	call	10004524 <__swsetup_r>
10009b88:	1000301e 	bne	r2,zero,10009c4c <___vfiprintf_internal_r+0x3f0>
10009b8c:	d8812017 	ldw	r2,1152(sp)
10009b90:	01000284 	movi	r4,10
10009b94:	10c0030b 	ldhu	r3,12(r2)
10009b98:	1805883a 	mov	r2,r3
10009b9c:	1080068c 	andi	r2,r2,26
10009ba0:	113f551e 	bne	r2,r4,100098f8 <__alt_data_end+0xf80098f8>
10009ba4:	d9012017 	ldw	r4,1152(sp)
10009ba8:	2080038b 	ldhu	r2,14(r4)
10009bac:	113fffcc 	andi	r4,r2,65535
10009bb0:	2120001c 	xori	r4,r4,32768
10009bb4:	21200004 	addi	r4,r4,-32768
10009bb8:	203f4f16 	blt	r4,zero,100098f8 <__alt_data_end+0xf80098f8>
10009bbc:	d9412017 	ldw	r5,1152(sp)
10009bc0:	d9012117 	ldw	r4,1156(sp)
10009bc4:	d9c12317 	ldw	r7,1164(sp)
10009bc8:	2b001917 	ldw	r12,100(r5)
10009bcc:	2ac00717 	ldw	r11,28(r5)
10009bd0:	2a800917 	ldw	r10,36(r5)
10009bd4:	02010004 	movi	r8,1024
10009bd8:	18ffff4c 	andi	r3,r3,65533
10009bdc:	da0b883a 	add	r5,sp,r8
10009be0:	980d883a 	mov	r6,r19
10009be4:	d8c1030d 	sth	r3,1036(sp)
10009be8:	db011915 	stw	r12,1124(sp)
10009bec:	d881038d 	sth	r2,1038(sp)
10009bf0:	dac10715 	stw	r11,1052(sp)
10009bf4:	da810915 	stw	r10,1060(sp)
10009bf8:	dec10015 	stw	sp,1024(sp)
10009bfc:	dec10415 	stw	sp,1040(sp)
10009c00:	da010215 	stw	r8,1032(sp)
10009c04:	da010515 	stw	r8,1044(sp)
10009c08:	d8010615 	stw	zero,1048(sp)
10009c0c:	000985c0 	call	1000985c <___vfiprintf_internal_r>
10009c10:	1021883a 	mov	r16,r2
10009c14:	10000416 	blt	r2,zero,10009c28 <___vfiprintf_internal_r+0x3cc>
10009c18:	d9012117 	ldw	r4,1156(sp)
10009c1c:	d9410004 	addi	r5,sp,1024
10009c20:	0005fa40 	call	10005fa4 <_fflush_r>
10009c24:	10040f1e 	bne	r2,zero,1000ac64 <___vfiprintf_internal_r+0x1408>
10009c28:	d881030b 	ldhu	r2,1036(sp)
10009c2c:	1080100c 	andi	r2,r2,64
10009c30:	10000426 	beq	r2,zero,10009c44 <___vfiprintf_internal_r+0x3e8>
10009c34:	d8c12017 	ldw	r3,1152(sp)
10009c38:	1880030b 	ldhu	r2,12(r3)
10009c3c:	10801014 	ori	r2,r2,64
10009c40:	1880030d 	sth	r2,12(r3)
10009c44:	8005883a 	mov	r2,r16
10009c48:	00000106 	br	10009c50 <___vfiprintf_internal_r+0x3f4>
10009c4c:	00bfffc4 	movi	r2,-1
10009c50:	dfc13517 	ldw	ra,1236(sp)
10009c54:	df013417 	ldw	fp,1232(sp)
10009c58:	ddc13317 	ldw	r23,1228(sp)
10009c5c:	dd813217 	ldw	r22,1224(sp)
10009c60:	dd413117 	ldw	r21,1220(sp)
10009c64:	dd013017 	ldw	r20,1216(sp)
10009c68:	dcc12f17 	ldw	r19,1212(sp)
10009c6c:	dc812e17 	ldw	r18,1208(sp)
10009c70:	dc412d17 	ldw	r17,1204(sp)
10009c74:	dc012c17 	ldw	r16,1200(sp)
10009c78:	dec13604 	addi	sp,sp,1240
10009c7c:	f800283a 	ret
10009c80:	00065600 	call	10006560 <__sinit>
10009c84:	003f0706 	br	100098a4 <__alt_data_end+0xf80098a4>
10009c88:	d8c12417 	ldw	r3,1168(sp)
10009c8c:	d8812315 	stw	r2,1164(sp)
10009c90:	00c7c83a 	sub	r3,zero,r3
10009c94:	d8c12415 	stw	r3,1168(sp)
10009c98:	94800114 	ori	r18,r18,4
10009c9c:	b9800007 	ldb	r6,0(r23)
10009ca0:	003f4f06 	br	100099e0 <__alt_data_end+0xf80099e0>
10009ca4:	94802014 	ori	r18,r18,128
10009ca8:	b9800007 	ldb	r6,0(r23)
10009cac:	003f4c06 	br	100099e0 <__alt_data_end+0xf80099e0>
10009cb0:	dc012615 	stw	r16,1176(sp)
10009cb4:	d8012415 	stw	zero,1168(sp)
10009cb8:	35bff404 	addi	r22,r6,-48
10009cbc:	0009883a 	mov	r4,zero
10009cc0:	b821883a 	mov	r16,r23
10009cc4:	01400284 	movi	r5,10
10009cc8:	000c3780 	call	1000c378 <__mulsi3>
10009ccc:	81800007 	ldb	r6,0(r16)
10009cd0:	1589883a 	add	r4,r2,r22
10009cd4:	bdc00044 	addi	r23,r23,1
10009cd8:	35bff404 	addi	r22,r6,-48
10009cdc:	b821883a 	mov	r16,r23
10009ce0:	adbff82e 	bgeu	r21,r22,10009cc4 <__alt_data_end+0xf8009cc4>
10009ce4:	d9012415 	stw	r4,1168(sp)
10009ce8:	dc012617 	ldw	r16,1176(sp)
10009cec:	003f3d06 	br	100099e4 <__alt_data_end+0xf80099e4>
10009cf0:	d8c12203 	ldbu	r3,1160(sp)
10009cf4:	94800414 	ori	r18,r18,16
10009cf8:	9080080c 	andi	r2,r18,32
10009cfc:	d8c11d85 	stb	r3,1142(sp)
10009d00:	9811883a 	mov	r8,r19
10009d04:	d8c12317 	ldw	r3,1164(sp)
10009d08:	10018226 	beq	r2,zero,1000a314 <___vfiprintf_internal_r+0xab8>
10009d0c:	d9012317 	ldw	r4,1164(sp)
10009d10:	18800117 	ldw	r2,4(r3)
10009d14:	1cc00017 	ldw	r19,0(r3)
10009d18:	21000204 	addi	r4,r4,8
10009d1c:	d9012315 	stw	r4,1164(sp)
10009d20:	102b883a 	mov	r21,r2
10009d24:	10030016 	blt	r2,zero,1000a928 <___vfiprintf_internal_r+0x10cc>
10009d28:	dd811d83 	ldbu	r22,1142(sp)
10009d2c:	8029883a 	mov	r20,r16
10009d30:	00800044 	movi	r2,1
10009d34:	9d46b03a 	or	r3,r19,r21
10009d38:	80000216 	blt	r16,zero,10009d44 <___vfiprintf_internal_r+0x4e8>
10009d3c:	013fdfc4 	movi	r4,-129
10009d40:	9124703a 	and	r18,r18,r4
10009d44:	1801b41e 	bne	r3,zero,1000a418 <___vfiprintf_internal_r+0xbbc>
10009d48:	80028126 	beq	r16,zero,1000a750 <___vfiprintf_internal_r+0xef4>
10009d4c:	10803fcc 	andi	r2,r2,255
10009d50:	00c00044 	movi	r3,1
10009d54:	10c1d126 	beq	r2,r3,1000a49c <___vfiprintf_internal_r+0xc40>
10009d58:	00c00084 	movi	r3,2
10009d5c:	10c28626 	beq	r2,r3,1000a778 <___vfiprintf_internal_r+0xf1c>
10009d60:	d8c10a04 	addi	r3,sp,1064
10009d64:	9808d0fa 	srli	r4,r19,3
10009d68:	a80a977a 	slli	r5,r21,29
10009d6c:	a82ad0fa 	srli	r21,r21,3
10009d70:	9cc001cc 	andi	r19,r19,7
10009d74:	98800c04 	addi	r2,r19,48
10009d78:	18ffffc4 	addi	r3,r3,-1
10009d7c:	2926b03a 	or	r19,r5,r4
10009d80:	18800005 	stb	r2,0(r3)
10009d84:	9d48b03a 	or	r4,r19,r21
10009d88:	203ff61e 	bne	r4,zero,10009d64 <__alt_data_end+0xf8009d64>
10009d8c:	9100004c 	andi	r4,r18,1
10009d90:	d8c12215 	stw	r3,1160(sp)
10009d94:	2002b31e 	bne	r4,zero,1000a864 <___vfiprintf_internal_r+0x1008>
10009d98:	d9411e17 	ldw	r5,1144(sp)
10009d9c:	28e9c83a 	sub	r20,r5,r3
10009da0:	a02b883a 	mov	r21,r20
10009da4:	a400010e 	bge	r20,r16,10009dac <___vfiprintf_internal_r+0x550>
10009da8:	802b883a 	mov	r21,r16
10009dac:	b5803fcc 	andi	r22,r22,255
10009db0:	b580201c 	xori	r22,r22,128
10009db4:	b5bfe004 	addi	r22,r22,-128
10009db8:	b0000126 	beq	r22,zero,10009dc0 <___vfiprintf_internal_r+0x564>
10009dbc:	ad400044 	addi	r21,r21,1
10009dc0:	9280008c 	andi	r10,r18,2
10009dc4:	50000126 	beq	r10,zero,10009dcc <___vfiprintf_internal_r+0x570>
10009dc8:	ad400084 	addi	r21,r21,2
10009dcc:	9580210c 	andi	r22,r18,132
10009dd0:	b001751e 	bne	r22,zero,1000a3a8 <___vfiprintf_internal_r+0xb4c>
10009dd4:	d9012417 	ldw	r4,1168(sp)
10009dd8:	2567c83a 	sub	r19,r4,r21
10009ddc:	04c1720e 	bge	zero,r19,1000a3a8 <___vfiprintf_internal_r+0xb4c>
10009de0:	01c00404 	movi	r7,16
10009de4:	d8c11c17 	ldw	r3,1136(sp)
10009de8:	3cc36b0e 	bge	r7,r19,1000ab98 <___vfiprintf_internal_r+0x133c>
10009dec:	00840074 	movhi	r2,4097
10009df0:	10876c04 	addi	r2,r2,7600
10009df4:	dc012915 	stw	r16,1188(sp)
10009df8:	d9011b17 	ldw	r4,1132(sp)
10009dfc:	9821883a 	mov	r16,r19
10009e00:	d8812615 	stw	r2,1176(sp)
10009e04:	030001c4 	movi	r12,7
10009e08:	5027883a 	mov	r19,r10
10009e0c:	00000506 	br	10009e24 <___vfiprintf_internal_r+0x5c8>
10009e10:	21400084 	addi	r5,r4,2
10009e14:	42000204 	addi	r8,r8,8
10009e18:	1009883a 	mov	r4,r2
10009e1c:	843ffc04 	addi	r16,r16,-16
10009e20:	3c000d0e 	bge	r7,r16,10009e58 <___vfiprintf_internal_r+0x5fc>
10009e24:	18c00404 	addi	r3,r3,16
10009e28:	20800044 	addi	r2,r4,1
10009e2c:	47000015 	stw	fp,0(r8)
10009e30:	41c00115 	stw	r7,4(r8)
10009e34:	d8c11c15 	stw	r3,1136(sp)
10009e38:	d8811b15 	stw	r2,1132(sp)
10009e3c:	60bff40e 	bge	r12,r2,10009e10 <__alt_data_end+0xf8009e10>
10009e40:	18014b1e 	bne	r3,zero,1000a370 <___vfiprintf_internal_r+0xb14>
10009e44:	843ffc04 	addi	r16,r16,-16
10009e48:	0009883a 	mov	r4,zero
10009e4c:	01400044 	movi	r5,1
10009e50:	d811883a 	mov	r8,sp
10009e54:	3c3ff316 	blt	r7,r16,10009e24 <__alt_data_end+0xf8009e24>
10009e58:	9815883a 	mov	r10,r19
10009e5c:	8027883a 	mov	r19,r16
10009e60:	dc012917 	ldw	r16,1188(sp)
10009e64:	d9012617 	ldw	r4,1176(sp)
10009e68:	98c7883a 	add	r3,r19,r3
10009e6c:	44c00115 	stw	r19,4(r8)
10009e70:	41000015 	stw	r4,0(r8)
10009e74:	d8c11c15 	stw	r3,1136(sp)
10009e78:	d9411b15 	stw	r5,1132(sp)
10009e7c:	008001c4 	movi	r2,7
10009e80:	11425116 	blt	r2,r5,1000a7c8 <___vfiprintf_internal_r+0xf6c>
10009e84:	d9011d87 	ldb	r4,1142(sp)
10009e88:	42000204 	addi	r8,r8,8
10009e8c:	28800044 	addi	r2,r5,1
10009e90:	20014a1e 	bne	r4,zero,1000a3bc <___vfiprintf_internal_r+0xb60>
10009e94:	50000c26 	beq	r10,zero,10009ec8 <___vfiprintf_internal_r+0x66c>
10009e98:	d9011d04 	addi	r4,sp,1140
10009e9c:	18c00084 	addi	r3,r3,2
10009ea0:	41000015 	stw	r4,0(r8)
10009ea4:	01000084 	movi	r4,2
10009ea8:	41000115 	stw	r4,4(r8)
10009eac:	d8c11c15 	stw	r3,1136(sp)
10009eb0:	d8811b15 	stw	r2,1132(sp)
10009eb4:	010001c4 	movi	r4,7
10009eb8:	20822016 	blt	r4,r2,1000a73c <___vfiprintf_internal_r+0xee0>
10009ebc:	100b883a 	mov	r5,r2
10009ec0:	42000204 	addi	r8,r8,8
10009ec4:	10800044 	addi	r2,r2,1
10009ec8:	01002004 	movi	r4,128
10009ecc:	b101de26 	beq	r22,r4,1000a648 <___vfiprintf_internal_r+0xdec>
10009ed0:	8521c83a 	sub	r16,r16,r20
10009ed4:	0400230e 	bge	zero,r16,10009f64 <___vfiprintf_internal_r+0x708>
10009ed8:	04c00404 	movi	r19,16
10009edc:	9c030d0e 	bge	r19,r16,1000ab14 <___vfiprintf_internal_r+0x12b8>
10009ee0:	00840074 	movhi	r2,4097
10009ee4:	10876804 	addi	r2,r2,7584
10009ee8:	d8812615 	stw	r2,1176(sp)
10009eec:	058001c4 	movi	r22,7
10009ef0:	00000506 	br	10009f08 <___vfiprintf_internal_r+0x6ac>
10009ef4:	28800084 	addi	r2,r5,2
10009ef8:	42000204 	addi	r8,r8,8
10009efc:	200b883a 	mov	r5,r4
10009f00:	843ffc04 	addi	r16,r16,-16
10009f04:	9c000d0e 	bge	r19,r16,10009f3c <___vfiprintf_internal_r+0x6e0>
10009f08:	18c00404 	addi	r3,r3,16
10009f0c:	29000044 	addi	r4,r5,1
10009f10:	44400015 	stw	r17,0(r8)
10009f14:	44c00115 	stw	r19,4(r8)
10009f18:	d8c11c15 	stw	r3,1136(sp)
10009f1c:	d9011b15 	stw	r4,1132(sp)
10009f20:	b13ff40e 	bge	r22,r4,10009ef4 <__alt_data_end+0xf8009ef4>
10009f24:	1801321e 	bne	r3,zero,1000a3f0 <___vfiprintf_internal_r+0xb94>
10009f28:	843ffc04 	addi	r16,r16,-16
10009f2c:	000b883a 	mov	r5,zero
10009f30:	00800044 	movi	r2,1
10009f34:	d811883a 	mov	r8,sp
10009f38:	9c3ff316 	blt	r19,r16,10009f08 <__alt_data_end+0xf8009f08>
10009f3c:	d9012617 	ldw	r4,1176(sp)
10009f40:	1c07883a 	add	r3,r3,r16
10009f44:	44000115 	stw	r16,4(r8)
10009f48:	41000015 	stw	r4,0(r8)
10009f4c:	d8c11c15 	stw	r3,1136(sp)
10009f50:	d8811b15 	stw	r2,1132(sp)
10009f54:	010001c4 	movi	r4,7
10009f58:	20816216 	blt	r4,r2,1000a4e4 <___vfiprintf_internal_r+0xc88>
10009f5c:	42000204 	addi	r8,r8,8
10009f60:	10800044 	addi	r2,r2,1
10009f64:	d9012217 	ldw	r4,1160(sp)
10009f68:	1d07883a 	add	r3,r3,r20
10009f6c:	45000115 	stw	r20,4(r8)
10009f70:	41000015 	stw	r4,0(r8)
10009f74:	d8c11c15 	stw	r3,1136(sp)
10009f78:	d8811b15 	stw	r2,1132(sp)
10009f7c:	010001c4 	movi	r4,7
10009f80:	2081610e 	bge	r4,r2,1000a508 <___vfiprintf_internal_r+0xcac>
10009f84:	1802211e 	bne	r3,zero,1000a80c <___vfiprintf_internal_r+0xfb0>
10009f88:	d8011b15 	stw	zero,1132(sp)
10009f8c:	9480010c 	andi	r18,r18,4
10009f90:	9002171e 	bne	r18,zero,1000a7f0 <___vfiprintf_internal_r+0xf94>
10009f94:	d9412417 	ldw	r5,1168(sp)
10009f98:	a9433716 	blt	r21,r5,1000ac78 <___vfiprintf_internal_r+0x141c>
10009f9c:	d8812517 	ldw	r2,1172(sp)
10009fa0:	1545883a 	add	r2,r2,r21
10009fa4:	d8812515 	stw	r2,1172(sp)
10009fa8:	00019a06 	br	1000a614 <___vfiprintf_internal_r+0xdb8>
10009fac:	d8c12317 	ldw	r3,1164(sp)
10009fb0:	05400044 	movi	r21,1
10009fb4:	9811883a 	mov	r8,r19
10009fb8:	18800017 	ldw	r2,0(r3)
10009fbc:	18c00104 	addi	r3,r3,4
10009fc0:	d8c12315 	stw	r3,1164(sp)
10009fc4:	d8c10004 	addi	r3,sp,1024
10009fc8:	d8011d85 	stb	zero,1142(sp)
10009fcc:	d8810005 	stb	r2,1024(sp)
10009fd0:	a829883a 	mov	r20,r21
10009fd4:	d8c12215 	stw	r3,1160(sp)
10009fd8:	0021883a 	mov	r16,zero
10009fdc:	003f7806 	br	10009dc0 <__alt_data_end+0xf8009dc0>
10009fe0:	94800414 	ori	r18,r18,16
10009fe4:	9080080c 	andi	r2,r18,32
10009fe8:	9811883a 	mov	r8,r19
10009fec:	10009026 	beq	r2,zero,1000a230 <___vfiprintf_internal_r+0x9d4>
10009ff0:	d8812317 	ldw	r2,1164(sp)
10009ff4:	d8c12317 	ldw	r3,1164(sp)
10009ff8:	14c00017 	ldw	r19,0(r2)
10009ffc:	15400117 	ldw	r21,4(r2)
1000a000:	18c00204 	addi	r3,r3,8
1000a004:	d8c12315 	stw	r3,1164(sp)
1000a008:	0005883a 	mov	r2,zero
1000a00c:	9d46b03a 	or	r3,r19,r21
1000a010:	d8011d85 	stb	zero,1142(sp)
1000a014:	8029883a 	mov	r20,r16
1000a018:	002d883a 	mov	r22,zero
1000a01c:	003f4606 	br	10009d38 <__alt_data_end+0xf8009d38>
1000a020:	94800414 	ori	r18,r18,16
1000a024:	9080080c 	andi	r2,r18,32
1000a028:	9811883a 	mov	r8,r19
1000a02c:	10006226 	beq	r2,zero,1000a1b8 <___vfiprintf_internal_r+0x95c>
1000a030:	d9012317 	ldw	r4,1164(sp)
1000a034:	00800044 	movi	r2,1
1000a038:	24c00017 	ldw	r19,0(r4)
1000a03c:	25400117 	ldw	r21,4(r4)
1000a040:	21000204 	addi	r4,r4,8
1000a044:	d9012315 	stw	r4,1164(sp)
1000a048:	9d46b03a 	or	r3,r19,r21
1000a04c:	003ff006 	br	1000a010 <__alt_data_end+0xf800a010>
1000a050:	b9800007 	ldb	r6,0(r23)
1000a054:	00801b04 	movi	r2,108
1000a058:	3082b226 	beq	r6,r2,1000ab24 <___vfiprintf_internal_r+0x12c8>
1000a05c:	94800414 	ori	r18,r18,16
1000a060:	003e5f06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a064:	d8c12203 	ldbu	r3,1160(sp)
1000a068:	01040074 	movhi	r4,4097
1000a06c:	21070204 	addi	r4,r4,7176
1000a070:	d8c11d85 	stb	r3,1142(sp)
1000a074:	d9012715 	stw	r4,1180(sp)
1000a078:	90c0080c 	andi	r3,r18,32
1000a07c:	9811883a 	mov	r8,r19
1000a080:	d8812317 	ldw	r2,1164(sp)
1000a084:	18005f26 	beq	r3,zero,1000a204 <___vfiprintf_internal_r+0x9a8>
1000a088:	d9012317 	ldw	r4,1164(sp)
1000a08c:	14c00017 	ldw	r19,0(r2)
1000a090:	15400117 	ldw	r21,4(r2)
1000a094:	21000204 	addi	r4,r4,8
1000a098:	d9012315 	stw	r4,1164(sp)
1000a09c:	9080004c 	andi	r2,r18,1
1000a0a0:	1001e226 	beq	r2,zero,1000a82c <___vfiprintf_internal_r+0xfd0>
1000a0a4:	9d46b03a 	or	r3,r19,r21
1000a0a8:	18024e26 	beq	r3,zero,1000a9e4 <___vfiprintf_internal_r+0x1188>
1000a0ac:	00800c04 	movi	r2,48
1000a0b0:	d8811d05 	stb	r2,1140(sp)
1000a0b4:	d9811d45 	stb	r6,1141(sp)
1000a0b8:	94800094 	ori	r18,r18,2
1000a0bc:	00800084 	movi	r2,2
1000a0c0:	003fd306 	br	1000a010 <__alt_data_end+0xf800a010>
1000a0c4:	d9012317 	ldw	r4,1164(sp)
1000a0c8:	d9412317 	ldw	r5,1164(sp)
1000a0cc:	21000017 	ldw	r4,0(r4)
1000a0d0:	28800104 	addi	r2,r5,4
1000a0d4:	d9012415 	stw	r4,1168(sp)
1000a0d8:	203eeb16 	blt	r4,zero,10009c88 <__alt_data_end+0xf8009c88>
1000a0dc:	d8812315 	stw	r2,1164(sp)
1000a0e0:	b9800007 	ldb	r6,0(r23)
1000a0e4:	003e3e06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a0e8:	b9800007 	ldb	r6,0(r23)
1000a0ec:	01000a84 	movi	r4,42
1000a0f0:	b8800044 	addi	r2,r23,1
1000a0f4:	3102d226 	beq	r6,r4,1000ac40 <___vfiprintf_internal_r+0x13e4>
1000a0f8:	35bff404 	addi	r22,r6,-48
1000a0fc:	102f883a 	mov	r23,r2
1000a100:	0021883a 	mov	r16,zero
1000a104:	adbe3736 	bltu	r21,r22,100099e4 <__alt_data_end+0xf80099e4>
1000a108:	0009883a 	mov	r4,zero
1000a10c:	01400284 	movi	r5,10
1000a110:	000c3780 	call	1000c378 <__mulsi3>
1000a114:	b9800007 	ldb	r6,0(r23)
1000a118:	b089883a 	add	r4,r22,r2
1000a11c:	bdc00044 	addi	r23,r23,1
1000a120:	35bff404 	addi	r22,r6,-48
1000a124:	adbff92e 	bgeu	r21,r22,1000a10c <__alt_data_end+0xf800a10c>
1000a128:	2021883a 	mov	r16,r4
1000a12c:	203e2d0e 	bge	r4,zero,100099e4 <__alt_data_end+0xf80099e4>
1000a130:	043fffc4 	movi	r16,-1
1000a134:	003e2b06 	br	100099e4 <__alt_data_end+0xf80099e4>
1000a138:	94801014 	ori	r18,r18,64
1000a13c:	b9800007 	ldb	r6,0(r23)
1000a140:	003e2706 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a144:	94800814 	ori	r18,r18,32
1000a148:	b9800007 	ldb	r6,0(r23)
1000a14c:	003e2406 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a150:	d9412317 	ldw	r5,1164(sp)
1000a154:	d8812317 	ldw	r2,1164(sp)
1000a158:	d8011d85 	stb	zero,1142(sp)
1000a15c:	29400017 	ldw	r5,0(r5)
1000a160:	9811883a 	mov	r8,r19
1000a164:	14c00104 	addi	r19,r2,4
1000a168:	d9412215 	stw	r5,1160(sp)
1000a16c:	28029026 	beq	r5,zero,1000abb0 <___vfiprintf_internal_r+0x1354>
1000a170:	d9012217 	ldw	r4,1160(sp)
1000a174:	80027616 	blt	r16,zero,1000ab50 <___vfiprintf_internal_r+0x12f4>
1000a178:	000b883a 	mov	r5,zero
1000a17c:	800d883a 	mov	r6,r16
1000a180:	da012a15 	stw	r8,1192(sp)
1000a184:	0007a180 	call	10007a18 <memchr>
1000a188:	da012a17 	ldw	r8,1192(sp)
1000a18c:	1002a026 	beq	r2,zero,1000ac10 <___vfiprintf_internal_r+0x13b4>
1000a190:	d8c12217 	ldw	r3,1160(sp)
1000a194:	10e9c83a 	sub	r20,r2,r3
1000a198:	85023816 	blt	r16,r20,1000aa7c <___vfiprintf_internal_r+0x1220>
1000a19c:	dd811d83 	ldbu	r22,1142(sp)
1000a1a0:	dcc12315 	stw	r19,1164(sp)
1000a1a4:	0021883a 	mov	r16,zero
1000a1a8:	003efd06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a1ac:	9080080c 	andi	r2,r18,32
1000a1b0:	9811883a 	mov	r8,r19
1000a1b4:	103f9e1e 	bne	r2,zero,1000a030 <__alt_data_end+0xf800a030>
1000a1b8:	9080040c 	andi	r2,r18,16
1000a1bc:	10021726 	beq	r2,zero,1000aa1c <___vfiprintf_internal_r+0x11c0>
1000a1c0:	d9412317 	ldw	r5,1164(sp)
1000a1c4:	002b883a 	mov	r21,zero
1000a1c8:	00800044 	movi	r2,1
1000a1cc:	2cc00017 	ldw	r19,0(r5)
1000a1d0:	29400104 	addi	r5,r5,4
1000a1d4:	d9412315 	stw	r5,1164(sp)
1000a1d8:	9807883a 	mov	r3,r19
1000a1dc:	003f8c06 	br	1000a010 <__alt_data_end+0xf800a010>
1000a1e0:	d8c12203 	ldbu	r3,1160(sp)
1000a1e4:	01040074 	movhi	r4,4097
1000a1e8:	21070704 	addi	r4,r4,7196
1000a1ec:	d8c11d85 	stb	r3,1142(sp)
1000a1f0:	d9012715 	stw	r4,1180(sp)
1000a1f4:	90c0080c 	andi	r3,r18,32
1000a1f8:	9811883a 	mov	r8,r19
1000a1fc:	d8812317 	ldw	r2,1164(sp)
1000a200:	183fa11e 	bne	r3,zero,1000a088 <__alt_data_end+0xf800a088>
1000a204:	90c0040c 	andi	r3,r18,16
1000a208:	1801e526 	beq	r3,zero,1000a9a0 <___vfiprintf_internal_r+0x1144>
1000a20c:	d9412317 	ldw	r5,1164(sp)
1000a210:	14c00017 	ldw	r19,0(r2)
1000a214:	002b883a 	mov	r21,zero
1000a218:	29400104 	addi	r5,r5,4
1000a21c:	d9412315 	stw	r5,1164(sp)
1000a220:	003f9e06 	br	1000a09c <__alt_data_end+0xf800a09c>
1000a224:	9080080c 	andi	r2,r18,32
1000a228:	9811883a 	mov	r8,r19
1000a22c:	103f701e 	bne	r2,zero,10009ff0 <__alt_data_end+0xf8009ff0>
1000a230:	9080040c 	andi	r2,r18,16
1000a234:	1001ef26 	beq	r2,zero,1000a9f4 <___vfiprintf_internal_r+0x1198>
1000a238:	d9012317 	ldw	r4,1164(sp)
1000a23c:	002b883a 	mov	r21,zero
1000a240:	0005883a 	mov	r2,zero
1000a244:	24c00017 	ldw	r19,0(r4)
1000a248:	21000104 	addi	r4,r4,4
1000a24c:	d9012315 	stw	r4,1164(sp)
1000a250:	9807883a 	mov	r3,r19
1000a254:	003f6e06 	br	1000a010 <__alt_data_end+0xf800a010>
1000a258:	d8c12317 	ldw	r3,1164(sp)
1000a25c:	9811883a 	mov	r8,r19
1000a260:	00800c04 	movi	r2,48
1000a264:	1cc00017 	ldw	r19,0(r3)
1000a268:	01040074 	movhi	r4,4097
1000a26c:	18c00104 	addi	r3,r3,4
1000a270:	d8811d05 	stb	r2,1140(sp)
1000a274:	21070704 	addi	r4,r4,7196
1000a278:	00801e04 	movi	r2,120
1000a27c:	d8811d45 	stb	r2,1141(sp)
1000a280:	d8c12315 	stw	r3,1164(sp)
1000a284:	002b883a 	mov	r21,zero
1000a288:	94800094 	ori	r18,r18,2
1000a28c:	d9012715 	stw	r4,1180(sp)
1000a290:	00800084 	movi	r2,2
1000a294:	9807883a 	mov	r3,r19
1000a298:	003f5d06 	br	1000a010 <__alt_data_end+0xf800a010>
1000a29c:	d8c12203 	ldbu	r3,1160(sp)
1000a2a0:	9080080c 	andi	r2,r18,32
1000a2a4:	9811883a 	mov	r8,r19
1000a2a8:	d8c11d85 	stb	r3,1142(sp)
1000a2ac:	1001b126 	beq	r2,zero,1000a974 <___vfiprintf_internal_r+0x1118>
1000a2b0:	d9012317 	ldw	r4,1164(sp)
1000a2b4:	d9412517 	ldw	r5,1172(sp)
1000a2b8:	20800017 	ldw	r2,0(r4)
1000a2bc:	2807d7fa 	srai	r3,r5,31
1000a2c0:	21000104 	addi	r4,r4,4
1000a2c4:	d9012315 	stw	r4,1164(sp)
1000a2c8:	11400015 	stw	r5,0(r2)
1000a2cc:	10c00115 	stw	r3,4(r2)
1000a2d0:	003d9a06 	br	1000993c <__alt_data_end+0xf800993c>
1000a2d4:	d8812207 	ldb	r2,1160(sp)
1000a2d8:	1001c41e 	bne	r2,zero,1000a9ec <___vfiprintf_internal_r+0x1190>
1000a2dc:	00c00804 	movi	r3,32
1000a2e0:	d8c12205 	stb	r3,1160(sp)
1000a2e4:	b9800007 	ldb	r6,0(r23)
1000a2e8:	003dbd06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a2ec:	00c00ac4 	movi	r3,43
1000a2f0:	d8c12205 	stb	r3,1160(sp)
1000a2f4:	b9800007 	ldb	r6,0(r23)
1000a2f8:	003db906 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a2fc:	d8c12203 	ldbu	r3,1160(sp)
1000a300:	9080080c 	andi	r2,r18,32
1000a304:	9811883a 	mov	r8,r19
1000a308:	d8c11d85 	stb	r3,1142(sp)
1000a30c:	d8c12317 	ldw	r3,1164(sp)
1000a310:	103e7e1e 	bne	r2,zero,10009d0c <__alt_data_end+0xf8009d0c>
1000a314:	9080040c 	andi	r2,r18,16
1000a318:	1001a926 	beq	r2,zero,1000a9c0 <___vfiprintf_internal_r+0x1164>
1000a31c:	1cc00017 	ldw	r19,0(r3)
1000a320:	d9412317 	ldw	r5,1164(sp)
1000a324:	982bd7fa 	srai	r21,r19,31
1000a328:	29400104 	addi	r5,r5,4
1000a32c:	d9412315 	stw	r5,1164(sp)
1000a330:	a805883a 	mov	r2,r21
1000a334:	003e7b06 	br	10009d24 <__alt_data_end+0xf8009d24>
1000a338:	94800054 	ori	r18,r18,1
1000a33c:	b9800007 	ldb	r6,0(r23)
1000a340:	003da706 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a344:	d8c12203 	ldbu	r3,1160(sp)
1000a348:	9811883a 	mov	r8,r19
1000a34c:	d8c11d85 	stb	r3,1142(sp)
1000a350:	30005826 	beq	r6,zero,1000a4b4 <___vfiprintf_internal_r+0xc58>
1000a354:	05400044 	movi	r21,1
1000a358:	d8c10004 	addi	r3,sp,1024
1000a35c:	d9810005 	stb	r6,1024(sp)
1000a360:	d8011d85 	stb	zero,1142(sp)
1000a364:	a829883a 	mov	r20,r21
1000a368:	d8c12215 	stw	r3,1160(sp)
1000a36c:	003f1a06 	br	10009fd8 <__alt_data_end+0xf8009fd8>
1000a370:	d9012117 	ldw	r4,1156(sp)
1000a374:	d9412017 	ldw	r5,1152(sp)
1000a378:	d9811a04 	addi	r6,sp,1128
1000a37c:	d9c12a15 	stw	r7,1192(sp)
1000a380:	db012b15 	stw	r12,1196(sp)
1000a384:	00097480 	call	10009748 <__sprint_r.part.0>
1000a388:	d9c12a17 	ldw	r7,1192(sp)
1000a38c:	db012b17 	ldw	r12,1196(sp)
1000a390:	10004e1e 	bne	r2,zero,1000a4cc <___vfiprintf_internal_r+0xc70>
1000a394:	d9011b17 	ldw	r4,1132(sp)
1000a398:	d8c11c17 	ldw	r3,1136(sp)
1000a39c:	d811883a 	mov	r8,sp
1000a3a0:	21400044 	addi	r5,r4,1
1000a3a4:	003e9d06 	br	10009e1c <__alt_data_end+0xf8009e1c>
1000a3a8:	d9411b17 	ldw	r5,1132(sp)
1000a3ac:	d8c11c17 	ldw	r3,1136(sp)
1000a3b0:	28800044 	addi	r2,r5,1
1000a3b4:	d9011d87 	ldb	r4,1142(sp)
1000a3b8:	203eb626 	beq	r4,zero,10009e94 <__alt_data_end+0xf8009e94>
1000a3bc:	01000044 	movi	r4,1
1000a3c0:	d9411d84 	addi	r5,sp,1142
1000a3c4:	1907883a 	add	r3,r3,r4
1000a3c8:	41400015 	stw	r5,0(r8)
1000a3cc:	41000115 	stw	r4,4(r8)
1000a3d0:	d8c11c15 	stw	r3,1136(sp)
1000a3d4:	d8811b15 	stw	r2,1132(sp)
1000a3d8:	014001c4 	movi	r5,7
1000a3dc:	2880ce16 	blt	r5,r2,1000a718 <___vfiprintf_internal_r+0xebc>
1000a3e0:	100b883a 	mov	r5,r2
1000a3e4:	42000204 	addi	r8,r8,8
1000a3e8:	10800044 	addi	r2,r2,1
1000a3ec:	003ea906 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a3f0:	d9012117 	ldw	r4,1156(sp)
1000a3f4:	d9412017 	ldw	r5,1152(sp)
1000a3f8:	d9811a04 	addi	r6,sp,1128
1000a3fc:	00097480 	call	10009748 <__sprint_r.part.0>
1000a400:	1000321e 	bne	r2,zero,1000a4cc <___vfiprintf_internal_r+0xc70>
1000a404:	d9411b17 	ldw	r5,1132(sp)
1000a408:	d8c11c17 	ldw	r3,1136(sp)
1000a40c:	d811883a 	mov	r8,sp
1000a410:	28800044 	addi	r2,r5,1
1000a414:	003eba06 	br	10009f00 <__alt_data_end+0xf8009f00>
1000a418:	10803fcc 	andi	r2,r2,255
1000a41c:	00c00044 	movi	r3,1
1000a420:	10fe4d1e 	bne	r2,r3,10009d58 <__alt_data_end+0xf8009d58>
1000a424:	a800021e 	bne	r21,zero,1000a430 <___vfiprintf_internal_r+0xbd4>
1000a428:	00800244 	movi	r2,9
1000a42c:	14c01b2e 	bgeu	r2,r19,1000a49c <___vfiprintf_internal_r+0xc40>
1000a430:	dc012215 	stw	r16,1160(sp)
1000a434:	dd010a04 	addi	r20,sp,1064
1000a438:	a821883a 	mov	r16,r21
1000a43c:	402b883a 	mov	r21,r8
1000a440:	9809883a 	mov	r4,r19
1000a444:	800b883a 	mov	r5,r16
1000a448:	01800284 	movi	r6,10
1000a44c:	000f883a 	mov	r7,zero
1000a450:	000bc300 	call	1000bc30 <__umoddi3>
1000a454:	10800c04 	addi	r2,r2,48
1000a458:	a53fffc4 	addi	r20,r20,-1
1000a45c:	9809883a 	mov	r4,r19
1000a460:	800b883a 	mov	r5,r16
1000a464:	01800284 	movi	r6,10
1000a468:	000f883a 	mov	r7,zero
1000a46c:	a0800005 	stb	r2,0(r20)
1000a470:	000b5f00 	call	1000b5f0 <__udivdi3>
1000a474:	1027883a 	mov	r19,r2
1000a478:	10c4b03a 	or	r2,r2,r3
1000a47c:	1821883a 	mov	r16,r3
1000a480:	103fef1e 	bne	r2,zero,1000a440 <__alt_data_end+0xf800a440>
1000a484:	d9011e17 	ldw	r4,1144(sp)
1000a488:	dc012217 	ldw	r16,1160(sp)
1000a48c:	a811883a 	mov	r8,r21
1000a490:	dd012215 	stw	r20,1160(sp)
1000a494:	2529c83a 	sub	r20,r4,r20
1000a498:	003e4106 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a49c:	9cc00c04 	addi	r19,r19,48
1000a4a0:	d8c109c4 	addi	r3,sp,1063
1000a4a4:	dcc109c5 	stb	r19,1063(sp)
1000a4a8:	dd012817 	ldw	r20,1184(sp)
1000a4ac:	d8c12215 	stw	r3,1160(sp)
1000a4b0:	003e3b06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a4b4:	d8811c17 	ldw	r2,1136(sp)
1000a4b8:	10000426 	beq	r2,zero,1000a4cc <___vfiprintf_internal_r+0xc70>
1000a4bc:	d9012117 	ldw	r4,1156(sp)
1000a4c0:	d9412017 	ldw	r5,1152(sp)
1000a4c4:	d9811a04 	addi	r6,sp,1128
1000a4c8:	00097480 	call	10009748 <__sprint_r.part.0>
1000a4cc:	d9412017 	ldw	r5,1152(sp)
1000a4d0:	2880030b 	ldhu	r2,12(r5)
1000a4d4:	1080100c 	andi	r2,r2,64
1000a4d8:	103ddc1e 	bne	r2,zero,10009c4c <__alt_data_end+0xf8009c4c>
1000a4dc:	d8812517 	ldw	r2,1172(sp)
1000a4e0:	003ddb06 	br	10009c50 <__alt_data_end+0xf8009c50>
1000a4e4:	1801061e 	bne	r3,zero,1000a900 <___vfiprintf_internal_r+0x10a4>
1000a4e8:	d8c12217 	ldw	r3,1160(sp)
1000a4ec:	00800044 	movi	r2,1
1000a4f0:	dd000115 	stw	r20,4(sp)
1000a4f4:	d8c00015 	stw	r3,0(sp)
1000a4f8:	dd011c15 	stw	r20,1136(sp)
1000a4fc:	d8811b15 	stw	r2,1132(sp)
1000a500:	a007883a 	mov	r3,r20
1000a504:	d811883a 	mov	r8,sp
1000a508:	42000204 	addi	r8,r8,8
1000a50c:	9480010c 	andi	r18,r18,4
1000a510:	90003426 	beq	r18,zero,1000a5e4 <___vfiprintf_internal_r+0xd88>
1000a514:	d9412417 	ldw	r5,1168(sp)
1000a518:	2d65c83a 	sub	r18,r5,r21
1000a51c:	0480310e 	bge	zero,r18,1000a5e4 <___vfiprintf_internal_r+0xd88>
1000a520:	04000404 	movi	r16,16
1000a524:	8481ad0e 	bge	r16,r18,1000abdc <___vfiprintf_internal_r+0x1380>
1000a528:	01440074 	movhi	r5,4097
1000a52c:	29476c04 	addi	r5,r5,7600
1000a530:	d9011b17 	ldw	r4,1132(sp)
1000a534:	d9412615 	stw	r5,1176(sp)
1000a538:	04c001c4 	movi	r19,7
1000a53c:	dd012117 	ldw	r20,1156(sp)
1000a540:	dd812017 	ldw	r22,1152(sp)
1000a544:	00000506 	br	1000a55c <___vfiprintf_internal_r+0xd00>
1000a548:	21400084 	addi	r5,r4,2
1000a54c:	42000204 	addi	r8,r8,8
1000a550:	1009883a 	mov	r4,r2
1000a554:	94bffc04 	addi	r18,r18,-16
1000a558:	84800d0e 	bge	r16,r18,1000a590 <___vfiprintf_internal_r+0xd34>
1000a55c:	18c00404 	addi	r3,r3,16
1000a560:	20800044 	addi	r2,r4,1
1000a564:	47000015 	stw	fp,0(r8)
1000a568:	44000115 	stw	r16,4(r8)
1000a56c:	d8c11c15 	stw	r3,1136(sp)
1000a570:	d8811b15 	stw	r2,1132(sp)
1000a574:	98bff40e 	bge	r19,r2,1000a548 <__alt_data_end+0xf800a548>
1000a578:	1800291e 	bne	r3,zero,1000a620 <___vfiprintf_internal_r+0xdc4>
1000a57c:	94bffc04 	addi	r18,r18,-16
1000a580:	0009883a 	mov	r4,zero
1000a584:	01400044 	movi	r5,1
1000a588:	d811883a 	mov	r8,sp
1000a58c:	84bff316 	blt	r16,r18,1000a55c <__alt_data_end+0xf800a55c>
1000a590:	d8812617 	ldw	r2,1176(sp)
1000a594:	1c87883a 	add	r3,r3,r18
1000a598:	44800115 	stw	r18,4(r8)
1000a59c:	40800015 	stw	r2,0(r8)
1000a5a0:	d8c11c15 	stw	r3,1136(sp)
1000a5a4:	d9411b15 	stw	r5,1132(sp)
1000a5a8:	008001c4 	movi	r2,7
1000a5ac:	11400d0e 	bge	r2,r5,1000a5e4 <___vfiprintf_internal_r+0xd88>
1000a5b0:	1800061e 	bne	r3,zero,1000a5cc <___vfiprintf_internal_r+0xd70>
1000a5b4:	d8c12417 	ldw	r3,1168(sp)
1000a5b8:	a8c12e16 	blt	r21,r3,1000aa74 <___vfiprintf_internal_r+0x1218>
1000a5bc:	d9012517 	ldw	r4,1172(sp)
1000a5c0:	2549883a 	add	r4,r4,r21
1000a5c4:	d9012515 	stw	r4,1172(sp)
1000a5c8:	00001206 	br	1000a614 <___vfiprintf_internal_r+0xdb8>
1000a5cc:	d9012117 	ldw	r4,1156(sp)
1000a5d0:	d9412017 	ldw	r5,1152(sp)
1000a5d4:	d9811a04 	addi	r6,sp,1128
1000a5d8:	00097480 	call	10009748 <__sprint_r.part.0>
1000a5dc:	103fbb1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a5e0:	d8c11c17 	ldw	r3,1136(sp)
1000a5e4:	d8812417 	ldw	r2,1168(sp)
1000a5e8:	a880010e 	bge	r21,r2,1000a5f0 <___vfiprintf_internal_r+0xd94>
1000a5ec:	102b883a 	mov	r21,r2
1000a5f0:	d9012517 	ldw	r4,1172(sp)
1000a5f4:	2549883a 	add	r4,r4,r21
1000a5f8:	d9012515 	stw	r4,1172(sp)
1000a5fc:	18000526 	beq	r3,zero,1000a614 <___vfiprintf_internal_r+0xdb8>
1000a600:	d9012117 	ldw	r4,1156(sp)
1000a604:	d9412017 	ldw	r5,1152(sp)
1000a608:	d9811a04 	addi	r6,sp,1128
1000a60c:	00097480 	call	10009748 <__sprint_r.part.0>
1000a610:	103fae1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a614:	d8011b15 	stw	zero,1132(sp)
1000a618:	d811883a 	mov	r8,sp
1000a61c:	003cc706 	br	1000993c <__alt_data_end+0xf800993c>
1000a620:	a009883a 	mov	r4,r20
1000a624:	b00b883a 	mov	r5,r22
1000a628:	d9811a04 	addi	r6,sp,1128
1000a62c:	00097480 	call	10009748 <__sprint_r.part.0>
1000a630:	103fa61e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a634:	d9011b17 	ldw	r4,1132(sp)
1000a638:	d8c11c17 	ldw	r3,1136(sp)
1000a63c:	d811883a 	mov	r8,sp
1000a640:	21400044 	addi	r5,r4,1
1000a644:	003fc306 	br	1000a554 <__alt_data_end+0xf800a554>
1000a648:	d9012417 	ldw	r4,1168(sp)
1000a64c:	256dc83a 	sub	r22,r4,r21
1000a650:	05be1f0e 	bge	zero,r22,10009ed0 <__alt_data_end+0xf8009ed0>
1000a654:	04c00404 	movi	r19,16
1000a658:	9d81720e 	bge	r19,r22,1000ac24 <___vfiprintf_internal_r+0x13c8>
1000a65c:	00840074 	movhi	r2,4097
1000a660:	10876804 	addi	r2,r2,7584
1000a664:	d8812615 	stw	r2,1176(sp)
1000a668:	028001c4 	movi	r10,7
1000a66c:	00000506 	br	1000a684 <___vfiprintf_internal_r+0xe28>
1000a670:	29000084 	addi	r4,r5,2
1000a674:	42000204 	addi	r8,r8,8
1000a678:	100b883a 	mov	r5,r2
1000a67c:	b5bffc04 	addi	r22,r22,-16
1000a680:	9d800d0e 	bge	r19,r22,1000a6b8 <___vfiprintf_internal_r+0xe5c>
1000a684:	18c00404 	addi	r3,r3,16
1000a688:	28800044 	addi	r2,r5,1
1000a68c:	44400015 	stw	r17,0(r8)
1000a690:	44c00115 	stw	r19,4(r8)
1000a694:	d8c11c15 	stw	r3,1136(sp)
1000a698:	d8811b15 	stw	r2,1132(sp)
1000a69c:	50bff40e 	bge	r10,r2,1000a670 <__alt_data_end+0xf800a670>
1000a6a0:	1800111e 	bne	r3,zero,1000a6e8 <___vfiprintf_internal_r+0xe8c>
1000a6a4:	b5bffc04 	addi	r22,r22,-16
1000a6a8:	000b883a 	mov	r5,zero
1000a6ac:	01000044 	movi	r4,1
1000a6b0:	d811883a 	mov	r8,sp
1000a6b4:	9dbff316 	blt	r19,r22,1000a684 <__alt_data_end+0xf800a684>
1000a6b8:	d9412617 	ldw	r5,1176(sp)
1000a6bc:	1d87883a 	add	r3,r3,r22
1000a6c0:	45800115 	stw	r22,4(r8)
1000a6c4:	41400015 	stw	r5,0(r8)
1000a6c8:	d8c11c15 	stw	r3,1136(sp)
1000a6cc:	d9011b15 	stw	r4,1132(sp)
1000a6d0:	008001c4 	movi	r2,7
1000a6d4:	11008516 	blt	r2,r4,1000a8ec <___vfiprintf_internal_r+0x1090>
1000a6d8:	42000204 	addi	r8,r8,8
1000a6dc:	20800044 	addi	r2,r4,1
1000a6e0:	200b883a 	mov	r5,r4
1000a6e4:	003dfa06 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000a6e8:	d9012117 	ldw	r4,1156(sp)
1000a6ec:	d9412017 	ldw	r5,1152(sp)
1000a6f0:	d9811a04 	addi	r6,sp,1128
1000a6f4:	da812a15 	stw	r10,1192(sp)
1000a6f8:	00097480 	call	10009748 <__sprint_r.part.0>
1000a6fc:	da812a17 	ldw	r10,1192(sp)
1000a700:	103f721e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a704:	d9411b17 	ldw	r5,1132(sp)
1000a708:	d8c11c17 	ldw	r3,1136(sp)
1000a70c:	d811883a 	mov	r8,sp
1000a710:	29000044 	addi	r4,r5,1
1000a714:	003fd906 	br	1000a67c <__alt_data_end+0xf800a67c>
1000a718:	1800681e 	bne	r3,zero,1000a8bc <___vfiprintf_internal_r+0x1060>
1000a71c:	50004d26 	beq	r10,zero,1000a854 <___vfiprintf_internal_r+0xff8>
1000a720:	d8811d04 	addi	r2,sp,1140
1000a724:	00c00084 	movi	r3,2
1000a728:	d8800015 	stw	r2,0(sp)
1000a72c:	d8c00115 	stw	r3,4(sp)
1000a730:	2005883a 	mov	r2,r4
1000a734:	d811883a 	mov	r8,sp
1000a738:	003de006 	br	10009ebc <__alt_data_end+0xf8009ebc>
1000a73c:	1800551e 	bne	r3,zero,1000a894 <___vfiprintf_internal_r+0x1038>
1000a740:	000b883a 	mov	r5,zero
1000a744:	00800044 	movi	r2,1
1000a748:	d811883a 	mov	r8,sp
1000a74c:	003dde06 	br	10009ec8 <__alt_data_end+0xf8009ec8>
1000a750:	10803fcc 	andi	r2,r2,255
1000a754:	1000191e 	bne	r2,zero,1000a7bc <___vfiprintf_internal_r+0xf60>
1000a758:	9080004c 	andi	r2,r18,1
1000a75c:	10001726 	beq	r2,zero,1000a7bc <___vfiprintf_internal_r+0xf60>
1000a760:	00800c04 	movi	r2,48
1000a764:	d8c109c4 	addi	r3,sp,1063
1000a768:	d88109c5 	stb	r2,1063(sp)
1000a76c:	dd012817 	ldw	r20,1184(sp)
1000a770:	d8c12215 	stw	r3,1160(sp)
1000a774:	003d8a06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a778:	d9012717 	ldw	r4,1180(sp)
1000a77c:	dd010a04 	addi	r20,sp,1064
1000a780:	988003cc 	andi	r2,r19,15
1000a784:	a806973a 	slli	r3,r21,28
1000a788:	2085883a 	add	r2,r4,r2
1000a78c:	9826d13a 	srli	r19,r19,4
1000a790:	10800003 	ldbu	r2,0(r2)
1000a794:	a82ad13a 	srli	r21,r21,4
1000a798:	a53fffc4 	addi	r20,r20,-1
1000a79c:	1ce6b03a 	or	r19,r3,r19
1000a7a0:	a0800005 	stb	r2,0(r20)
1000a7a4:	9d44b03a 	or	r2,r19,r21
1000a7a8:	103ff51e 	bne	r2,zero,1000a780 <__alt_data_end+0xf800a780>
1000a7ac:	d9411e17 	ldw	r5,1144(sp)
1000a7b0:	dd012215 	stw	r20,1160(sp)
1000a7b4:	2d29c83a 	sub	r20,r5,r20
1000a7b8:	003d7906 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a7bc:	d8c10a04 	addi	r3,sp,1064
1000a7c0:	d8c12215 	stw	r3,1160(sp)
1000a7c4:	003d7606 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a7c8:	18009e1e 	bne	r3,zero,1000aa44 <___vfiprintf_internal_r+0x11e8>
1000a7cc:	d8811d87 	ldb	r2,1142(sp)
1000a7d0:	10005f26 	beq	r2,zero,1000a950 <___vfiprintf_internal_r+0x10f4>
1000a7d4:	00c00044 	movi	r3,1
1000a7d8:	d9011d84 	addi	r4,sp,1142
1000a7dc:	1805883a 	mov	r2,r3
1000a7e0:	d9000015 	stw	r4,0(sp)
1000a7e4:	d8c00115 	stw	r3,4(sp)
1000a7e8:	d811883a 	mov	r8,sp
1000a7ec:	003efc06 	br	1000a3e0 <__alt_data_end+0xf800a3e0>
1000a7f0:	d9412417 	ldw	r5,1168(sp)
1000a7f4:	d811883a 	mov	r8,sp
1000a7f8:	2d65c83a 	sub	r18,r5,r21
1000a7fc:	04bf4816 	blt	zero,r18,1000a520 <__alt_data_end+0xf800a520>
1000a800:	003f6c06 	br	1000a5b4 <__alt_data_end+0xf800a5b4>
1000a804:	b829883a 	mov	r20,r23
1000a808:	003c6906 	br	100099b0 <__alt_data_end+0xf80099b0>
1000a80c:	d9012117 	ldw	r4,1156(sp)
1000a810:	d9412017 	ldw	r5,1152(sp)
1000a814:	d9811a04 	addi	r6,sp,1128
1000a818:	00097480 	call	10009748 <__sprint_r.part.0>
1000a81c:	103f2b1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a820:	d8c11c17 	ldw	r3,1136(sp)
1000a824:	d811883a 	mov	r8,sp
1000a828:	003f3806 	br	1000a50c <__alt_data_end+0xf800a50c>
1000a82c:	00800084 	movi	r2,2
1000a830:	9d46b03a 	or	r3,r19,r21
1000a834:	003df606 	br	1000a010 <__alt_data_end+0xf800a010>
1000a838:	d9012117 	ldw	r4,1156(sp)
1000a83c:	d9412017 	ldw	r5,1152(sp)
1000a840:	d9811a04 	addi	r6,sp,1128
1000a844:	00097480 	call	10009748 <__sprint_r.part.0>
1000a848:	103f201e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a84c:	d811883a 	mov	r8,sp
1000a850:	003cc606 	br	10009b6c <__alt_data_end+0xf8009b6c>
1000a854:	000b883a 	mov	r5,zero
1000a858:	2005883a 	mov	r2,r4
1000a85c:	d811883a 	mov	r8,sp
1000a860:	003d9906 	br	10009ec8 <__alt_data_end+0xf8009ec8>
1000a864:	10803fcc 	andi	r2,r2,255
1000a868:	1080201c 	xori	r2,r2,128
1000a86c:	10bfe004 	addi	r2,r2,-128
1000a870:	01000c04 	movi	r4,48
1000a874:	1100b226 	beq	r2,r4,1000ab40 <___vfiprintf_internal_r+0x12e4>
1000a878:	d9412217 	ldw	r5,1160(sp)
1000a87c:	d8811e17 	ldw	r2,1144(sp)
1000a880:	193fffc5 	stb	r4,-1(r3)
1000a884:	297fffc4 	addi	r5,r5,-1
1000a888:	d9412215 	stw	r5,1160(sp)
1000a88c:	1169c83a 	sub	r20,r2,r5
1000a890:	003d4306 	br	10009da0 <__alt_data_end+0xf8009da0>
1000a894:	d9012117 	ldw	r4,1156(sp)
1000a898:	d9412017 	ldw	r5,1152(sp)
1000a89c:	d9811a04 	addi	r6,sp,1128
1000a8a0:	00097480 	call	10009748 <__sprint_r.part.0>
1000a8a4:	103f091e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a8a8:	d9411b17 	ldw	r5,1132(sp)
1000a8ac:	d8c11c17 	ldw	r3,1136(sp)
1000a8b0:	d811883a 	mov	r8,sp
1000a8b4:	28800044 	addi	r2,r5,1
1000a8b8:	003d8306 	br	10009ec8 <__alt_data_end+0xf8009ec8>
1000a8bc:	d9012117 	ldw	r4,1156(sp)
1000a8c0:	d9412017 	ldw	r5,1152(sp)
1000a8c4:	d9811a04 	addi	r6,sp,1128
1000a8c8:	da812a15 	stw	r10,1192(sp)
1000a8cc:	00097480 	call	10009748 <__sprint_r.part.0>
1000a8d0:	da812a17 	ldw	r10,1192(sp)
1000a8d4:	103efd1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a8d8:	d9411b17 	ldw	r5,1132(sp)
1000a8dc:	d8c11c17 	ldw	r3,1136(sp)
1000a8e0:	d811883a 	mov	r8,sp
1000a8e4:	28800044 	addi	r2,r5,1
1000a8e8:	003d6a06 	br	10009e94 <__alt_data_end+0xf8009e94>
1000a8ec:	1800a01e 	bne	r3,zero,1000ab70 <___vfiprintf_internal_r+0x1314>
1000a8f0:	000b883a 	mov	r5,zero
1000a8f4:	00800044 	movi	r2,1
1000a8f8:	d811883a 	mov	r8,sp
1000a8fc:	003d7406 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000a900:	d9012117 	ldw	r4,1156(sp)
1000a904:	d9412017 	ldw	r5,1152(sp)
1000a908:	d9811a04 	addi	r6,sp,1128
1000a90c:	00097480 	call	10009748 <__sprint_r.part.0>
1000a910:	103eee1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000a914:	d8811b17 	ldw	r2,1132(sp)
1000a918:	d8c11c17 	ldw	r3,1136(sp)
1000a91c:	d811883a 	mov	r8,sp
1000a920:	10800044 	addi	r2,r2,1
1000a924:	003d8f06 	br	10009f64 <__alt_data_end+0xf8009f64>
1000a928:	04e7c83a 	sub	r19,zero,r19
1000a92c:	9804c03a 	cmpne	r2,r19,zero
1000a930:	056bc83a 	sub	r21,zero,r21
1000a934:	a8abc83a 	sub	r21,r21,r2
1000a938:	05800b44 	movi	r22,45
1000a93c:	dd811d85 	stb	r22,1142(sp)
1000a940:	8029883a 	mov	r20,r16
1000a944:	00800044 	movi	r2,1
1000a948:	9d46b03a 	or	r3,r19,r21
1000a94c:	003cfa06 	br	10009d38 <__alt_data_end+0xf8009d38>
1000a950:	000b883a 	mov	r5,zero
1000a954:	00800044 	movi	r2,1
1000a958:	d811883a 	mov	r8,sp
1000a95c:	503d5a26 	beq	r10,zero,10009ec8 <__alt_data_end+0xf8009ec8>
1000a960:	00c00084 	movi	r3,2
1000a964:	d9011d04 	addi	r4,sp,1140
1000a968:	d9000015 	stw	r4,0(sp)
1000a96c:	d8c00115 	stw	r3,4(sp)
1000a970:	003d5206 	br	10009ebc <__alt_data_end+0xf8009ebc>
1000a974:	9080040c 	andi	r2,r18,16
1000a978:	1000421e 	bne	r2,zero,1000aa84 <___vfiprintf_internal_r+0x1228>
1000a97c:	9480100c 	andi	r18,r18,64
1000a980:	90009c26 	beq	r18,zero,1000abf4 <___vfiprintf_internal_r+0x1398>
1000a984:	d9412317 	ldw	r5,1164(sp)
1000a988:	d8c12517 	ldw	r3,1172(sp)
1000a98c:	28800017 	ldw	r2,0(r5)
1000a990:	29400104 	addi	r5,r5,4
1000a994:	d9412315 	stw	r5,1164(sp)
1000a998:	10c0000d 	sth	r3,0(r2)
1000a99c:	003be706 	br	1000993c <__alt_data_end+0xf800993c>
1000a9a0:	90c0100c 	andi	r3,r18,64
1000a9a4:	18003e26 	beq	r3,zero,1000aaa0 <___vfiprintf_internal_r+0x1244>
1000a9a8:	d8c12317 	ldw	r3,1164(sp)
1000a9ac:	14c0000b 	ldhu	r19,0(r2)
1000a9b0:	002b883a 	mov	r21,zero
1000a9b4:	18c00104 	addi	r3,r3,4
1000a9b8:	d8c12315 	stw	r3,1164(sp)
1000a9bc:	003db706 	br	1000a09c <__alt_data_end+0xf800a09c>
1000a9c0:	9080100c 	andi	r2,r18,64
1000a9c4:	10004c26 	beq	r2,zero,1000aaf8 <___vfiprintf_internal_r+0x129c>
1000a9c8:	1cc0000f 	ldh	r19,0(r3)
1000a9cc:	d8812317 	ldw	r2,1164(sp)
1000a9d0:	982bd7fa 	srai	r21,r19,31
1000a9d4:	10800104 	addi	r2,r2,4
1000a9d8:	d8812315 	stw	r2,1164(sp)
1000a9dc:	a805883a 	mov	r2,r21
1000a9e0:	003cd006 	br	10009d24 <__alt_data_end+0xf8009d24>
1000a9e4:	00800084 	movi	r2,2
1000a9e8:	003d8906 	br	1000a010 <__alt_data_end+0xf800a010>
1000a9ec:	b9800007 	ldb	r6,0(r23)
1000a9f0:	003bfb06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000a9f4:	9080100c 	andi	r2,r18,64
1000a9f8:	10003726 	beq	r2,zero,1000aad8 <___vfiprintf_internal_r+0x127c>
1000a9fc:	d9412317 	ldw	r5,1164(sp)
1000aa00:	002b883a 	mov	r21,zero
1000aa04:	0005883a 	mov	r2,zero
1000aa08:	2cc0000b 	ldhu	r19,0(r5)
1000aa0c:	29400104 	addi	r5,r5,4
1000aa10:	d9412315 	stw	r5,1164(sp)
1000aa14:	9807883a 	mov	r3,r19
1000aa18:	003d7d06 	br	1000a010 <__alt_data_end+0xf800a010>
1000aa1c:	9080100c 	andi	r2,r18,64
1000aa20:	10002526 	beq	r2,zero,1000aab8 <___vfiprintf_internal_r+0x125c>
1000aa24:	d8812317 	ldw	r2,1164(sp)
1000aa28:	002b883a 	mov	r21,zero
1000aa2c:	14c0000b 	ldhu	r19,0(r2)
1000aa30:	10800104 	addi	r2,r2,4
1000aa34:	d8812315 	stw	r2,1164(sp)
1000aa38:	9807883a 	mov	r3,r19
1000aa3c:	00800044 	movi	r2,1
1000aa40:	003d7306 	br	1000a010 <__alt_data_end+0xf800a010>
1000aa44:	d9012117 	ldw	r4,1156(sp)
1000aa48:	d9412017 	ldw	r5,1152(sp)
1000aa4c:	d9811a04 	addi	r6,sp,1128
1000aa50:	da812a15 	stw	r10,1192(sp)
1000aa54:	00097480 	call	10009748 <__sprint_r.part.0>
1000aa58:	da812a17 	ldw	r10,1192(sp)
1000aa5c:	103e9b1e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000aa60:	d9411b17 	ldw	r5,1132(sp)
1000aa64:	d8c11c17 	ldw	r3,1136(sp)
1000aa68:	d811883a 	mov	r8,sp
1000aa6c:	28800044 	addi	r2,r5,1
1000aa70:	003e5006 	br	1000a3b4 <__alt_data_end+0xf800a3b4>
1000aa74:	182b883a 	mov	r21,r3
1000aa78:	003ed006 	br	1000a5bc <__alt_data_end+0xf800a5bc>
1000aa7c:	8029883a 	mov	r20,r16
1000aa80:	003dc606 	br	1000a19c <__alt_data_end+0xf800a19c>
1000aa84:	d8c12317 	ldw	r3,1164(sp)
1000aa88:	d9012517 	ldw	r4,1172(sp)
1000aa8c:	18800017 	ldw	r2,0(r3)
1000aa90:	18c00104 	addi	r3,r3,4
1000aa94:	d8c12315 	stw	r3,1164(sp)
1000aa98:	11000015 	stw	r4,0(r2)
1000aa9c:	003ba706 	br	1000993c <__alt_data_end+0xf800993c>
1000aaa0:	d9012317 	ldw	r4,1164(sp)
1000aaa4:	14c00017 	ldw	r19,0(r2)
1000aaa8:	002b883a 	mov	r21,zero
1000aaac:	21000104 	addi	r4,r4,4
1000aab0:	d9012315 	stw	r4,1164(sp)
1000aab4:	003d7906 	br	1000a09c <__alt_data_end+0xf800a09c>
1000aab8:	d8c12317 	ldw	r3,1164(sp)
1000aabc:	002b883a 	mov	r21,zero
1000aac0:	00800044 	movi	r2,1
1000aac4:	1cc00017 	ldw	r19,0(r3)
1000aac8:	18c00104 	addi	r3,r3,4
1000aacc:	d8c12315 	stw	r3,1164(sp)
1000aad0:	9807883a 	mov	r3,r19
1000aad4:	003d4e06 	br	1000a010 <__alt_data_end+0xf800a010>
1000aad8:	d8812317 	ldw	r2,1164(sp)
1000aadc:	002b883a 	mov	r21,zero
1000aae0:	14c00017 	ldw	r19,0(r2)
1000aae4:	10800104 	addi	r2,r2,4
1000aae8:	d8812315 	stw	r2,1164(sp)
1000aaec:	9807883a 	mov	r3,r19
1000aaf0:	0005883a 	mov	r2,zero
1000aaf4:	003d4606 	br	1000a010 <__alt_data_end+0xf800a010>
1000aaf8:	1cc00017 	ldw	r19,0(r3)
1000aafc:	d8c12317 	ldw	r3,1164(sp)
1000ab00:	982bd7fa 	srai	r21,r19,31
1000ab04:	18c00104 	addi	r3,r3,4
1000ab08:	d8c12315 	stw	r3,1164(sp)
1000ab0c:	a805883a 	mov	r2,r21
1000ab10:	003c8406 	br	10009d24 <__alt_data_end+0xf8009d24>
1000ab14:	01040074 	movhi	r4,4097
1000ab18:	21076804 	addi	r4,r4,7584
1000ab1c:	d9012615 	stw	r4,1176(sp)
1000ab20:	003d0606 	br	10009f3c <__alt_data_end+0xf8009f3c>
1000ab24:	b9800043 	ldbu	r6,1(r23)
1000ab28:	94800814 	ori	r18,r18,32
1000ab2c:	bdc00044 	addi	r23,r23,1
1000ab30:	31803fcc 	andi	r6,r6,255
1000ab34:	3180201c 	xori	r6,r6,128
1000ab38:	31bfe004 	addi	r6,r6,-128
1000ab3c:	003ba806 	br	100099e0 <__alt_data_end+0xf80099e0>
1000ab40:	d8811e17 	ldw	r2,1144(sp)
1000ab44:	d8c12217 	ldw	r3,1160(sp)
1000ab48:	10e9c83a 	sub	r20,r2,r3
1000ab4c:	003c9406 	br	10009da0 <__alt_data_end+0xf8009da0>
1000ab50:	da012a15 	stw	r8,1192(sp)
1000ab54:	000236c0 	call	1000236c <strlen>
1000ab58:	1029883a 	mov	r20,r2
1000ab5c:	dd811d83 	ldbu	r22,1142(sp)
1000ab60:	dcc12315 	stw	r19,1164(sp)
1000ab64:	0021883a 	mov	r16,zero
1000ab68:	da012a17 	ldw	r8,1192(sp)
1000ab6c:	003c8c06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000ab70:	d9012117 	ldw	r4,1156(sp)
1000ab74:	d9412017 	ldw	r5,1152(sp)
1000ab78:	d9811a04 	addi	r6,sp,1128
1000ab7c:	00097480 	call	10009748 <__sprint_r.part.0>
1000ab80:	103e521e 	bne	r2,zero,1000a4cc <__alt_data_end+0xf800a4cc>
1000ab84:	d9411b17 	ldw	r5,1132(sp)
1000ab88:	d8c11c17 	ldw	r3,1136(sp)
1000ab8c:	d811883a 	mov	r8,sp
1000ab90:	28800044 	addi	r2,r5,1
1000ab94:	003cce06 	br	10009ed0 <__alt_data_end+0xf8009ed0>
1000ab98:	01440074 	movhi	r5,4097
1000ab9c:	29476c04 	addi	r5,r5,7600
1000aba0:	d9412615 	stw	r5,1176(sp)
1000aba4:	d9411b17 	ldw	r5,1132(sp)
1000aba8:	29400044 	addi	r5,r5,1
1000abac:	003cad06 	br	10009e64 <__alt_data_end+0xf8009e64>
1000abb0:	00800184 	movi	r2,6
1000abb4:	1400012e 	bgeu	r2,r16,1000abbc <___vfiprintf_internal_r+0x1360>
1000abb8:	1021883a 	mov	r16,r2
1000abbc:	8029883a 	mov	r20,r16
1000abc0:	802b883a 	mov	r21,r16
1000abc4:	80001c16 	blt	r16,zero,1000ac38 <___vfiprintf_internal_r+0x13dc>
1000abc8:	00c40074 	movhi	r3,4097
1000abcc:	18c70c04 	addi	r3,r3,7216
1000abd0:	dcc12315 	stw	r19,1164(sp)
1000abd4:	d8c12215 	stw	r3,1160(sp)
1000abd8:	003cff06 	br	10009fd8 <__alt_data_end+0xf8009fd8>
1000abdc:	d9411b17 	ldw	r5,1132(sp)
1000abe0:	00840074 	movhi	r2,4097
1000abe4:	10876c04 	addi	r2,r2,7600
1000abe8:	d8812615 	stw	r2,1176(sp)
1000abec:	29400044 	addi	r5,r5,1
1000abf0:	003e6706 	br	1000a590 <__alt_data_end+0xf800a590>
1000abf4:	d9012317 	ldw	r4,1164(sp)
1000abf8:	d9412517 	ldw	r5,1172(sp)
1000abfc:	20800017 	ldw	r2,0(r4)
1000ac00:	21000104 	addi	r4,r4,4
1000ac04:	d9012315 	stw	r4,1164(sp)
1000ac08:	11400015 	stw	r5,0(r2)
1000ac0c:	003b4b06 	br	1000993c <__alt_data_end+0xf800993c>
1000ac10:	8029883a 	mov	r20,r16
1000ac14:	dd811d83 	ldbu	r22,1142(sp)
1000ac18:	dcc12315 	stw	r19,1164(sp)
1000ac1c:	0021883a 	mov	r16,zero
1000ac20:	003c5f06 	br	10009da0 <__alt_data_end+0xf8009da0>
1000ac24:	01040074 	movhi	r4,4097
1000ac28:	21076804 	addi	r4,r4,7584
1000ac2c:	d9012615 	stw	r4,1176(sp)
1000ac30:	1009883a 	mov	r4,r2
1000ac34:	003ea006 	br	1000a6b8 <__alt_data_end+0xf800a6b8>
1000ac38:	002b883a 	mov	r21,zero
1000ac3c:	003fe206 	br	1000abc8 <__alt_data_end+0xf800abc8>
1000ac40:	d9412317 	ldw	r5,1164(sp)
1000ac44:	b807883a 	mov	r3,r23
1000ac48:	102f883a 	mov	r23,r2
1000ac4c:	2c000017 	ldw	r16,0(r5)
1000ac50:	29000104 	addi	r4,r5,4
1000ac54:	d9012315 	stw	r4,1164(sp)
1000ac58:	80000416 	blt	r16,zero,1000ac6c <___vfiprintf_internal_r+0x1410>
1000ac5c:	19800047 	ldb	r6,1(r3)
1000ac60:	003b5f06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000ac64:	043fffc4 	movi	r16,-1
1000ac68:	003bef06 	br	10009c28 <__alt_data_end+0xf8009c28>
1000ac6c:	043fffc4 	movi	r16,-1
1000ac70:	19800047 	ldb	r6,1(r3)
1000ac74:	003b5a06 	br	100099e0 <__alt_data_end+0xf80099e0>
1000ac78:	282b883a 	mov	r21,r5
1000ac7c:	003cc706 	br	10009f9c <__alt_data_end+0xf8009f9c>

1000ac80 <__vfiprintf_internal>:
1000ac80:	2007883a 	mov	r3,r4
1000ac84:	01040074 	movhi	r4,4097
1000ac88:	210e6904 	addi	r4,r4,14756
1000ac8c:	21000017 	ldw	r4,0(r4)
1000ac90:	2805883a 	mov	r2,r5
1000ac94:	300f883a 	mov	r7,r6
1000ac98:	180b883a 	mov	r5,r3
1000ac9c:	100d883a 	mov	r6,r2
1000aca0:	000985c1 	jmpi	1000985c <___vfiprintf_internal_r>

1000aca4 <_write_r>:
1000aca4:	defffd04 	addi	sp,sp,-12
1000aca8:	dc000015 	stw	r16,0(sp)
1000acac:	04040074 	movhi	r16,4097
1000acb0:	dc400115 	stw	r17,4(sp)
1000acb4:	84153a04 	addi	r16,r16,21736
1000acb8:	2023883a 	mov	r17,r4
1000acbc:	2809883a 	mov	r4,r5
1000acc0:	300b883a 	mov	r5,r6
1000acc4:	380d883a 	mov	r6,r7
1000acc8:	dfc00215 	stw	ra,8(sp)
1000accc:	80000015 	stw	zero,0(r16)
1000acd0:	000f4c00 	call	1000f4c0 <write>
1000acd4:	00ffffc4 	movi	r3,-1
1000acd8:	10c00526 	beq	r2,r3,1000acf0 <_write_r+0x4c>
1000acdc:	dfc00217 	ldw	ra,8(sp)
1000ace0:	dc400117 	ldw	r17,4(sp)
1000ace4:	dc000017 	ldw	r16,0(sp)
1000ace8:	dec00304 	addi	sp,sp,12
1000acec:	f800283a 	ret
1000acf0:	80c00017 	ldw	r3,0(r16)
1000acf4:	183ff926 	beq	r3,zero,1000acdc <__alt_data_end+0xf800acdc>
1000acf8:	88c00015 	stw	r3,0(r17)
1000acfc:	003ff706 	br	1000acdc <__alt_data_end+0xf800acdc>

1000ad00 <_close_r>:
1000ad00:	defffd04 	addi	sp,sp,-12
1000ad04:	dc000015 	stw	r16,0(sp)
1000ad08:	04040074 	movhi	r16,4097
1000ad0c:	dc400115 	stw	r17,4(sp)
1000ad10:	84153a04 	addi	r16,r16,21736
1000ad14:	2023883a 	mov	r17,r4
1000ad18:	2809883a 	mov	r4,r5
1000ad1c:	dfc00215 	stw	ra,8(sp)
1000ad20:	80000015 	stw	zero,0(r16)
1000ad24:	000ebec0 	call	1000ebec <close>
1000ad28:	00ffffc4 	movi	r3,-1
1000ad2c:	10c00526 	beq	r2,r3,1000ad44 <_close_r+0x44>
1000ad30:	dfc00217 	ldw	ra,8(sp)
1000ad34:	dc400117 	ldw	r17,4(sp)
1000ad38:	dc000017 	ldw	r16,0(sp)
1000ad3c:	dec00304 	addi	sp,sp,12
1000ad40:	f800283a 	ret
1000ad44:	80c00017 	ldw	r3,0(r16)
1000ad48:	183ff926 	beq	r3,zero,1000ad30 <__alt_data_end+0xf800ad30>
1000ad4c:	88c00015 	stw	r3,0(r17)
1000ad50:	003ff706 	br	1000ad30 <__alt_data_end+0xf800ad30>

1000ad54 <_calloc_r>:
1000ad54:	defffe04 	addi	sp,sp,-8
1000ad58:	dc000015 	stw	r16,0(sp)
1000ad5c:	2021883a 	mov	r16,r4
1000ad60:	2809883a 	mov	r4,r5
1000ad64:	300b883a 	mov	r5,r6
1000ad68:	dfc00115 	stw	ra,4(sp)
1000ad6c:	000c3780 	call	1000c378 <__mulsi3>
1000ad70:	8009883a 	mov	r4,r16
1000ad74:	100b883a 	mov	r5,r2
1000ad78:	00072700 	call	10007270 <_malloc_r>
1000ad7c:	1021883a 	mov	r16,r2
1000ad80:	10002826 	beq	r2,zero,1000ae24 <_calloc_r+0xd0>
1000ad84:	11bfff17 	ldw	r6,-4(r2)
1000ad88:	00bfff04 	movi	r2,-4
1000ad8c:	00c00904 	movi	r3,36
1000ad90:	308c703a 	and	r6,r6,r2
1000ad94:	308d883a 	add	r6,r6,r2
1000ad98:	19801436 	bltu	r3,r6,1000adec <_calloc_r+0x98>
1000ad9c:	008004c4 	movi	r2,19
1000ada0:	11800936 	bltu	r2,r6,1000adc8 <_calloc_r+0x74>
1000ada4:	8005883a 	mov	r2,r16
1000ada8:	10000015 	stw	zero,0(r2)
1000adac:	10000115 	stw	zero,4(r2)
1000adb0:	10000215 	stw	zero,8(r2)
1000adb4:	8005883a 	mov	r2,r16
1000adb8:	dfc00117 	ldw	ra,4(sp)
1000adbc:	dc000017 	ldw	r16,0(sp)
1000adc0:	dec00204 	addi	sp,sp,8
1000adc4:	f800283a 	ret
1000adc8:	80000015 	stw	zero,0(r16)
1000adcc:	80000115 	stw	zero,4(r16)
1000add0:	008006c4 	movi	r2,27
1000add4:	11800d2e 	bgeu	r2,r6,1000ae0c <_calloc_r+0xb8>
1000add8:	80000215 	stw	zero,8(r16)
1000addc:	80000315 	stw	zero,12(r16)
1000ade0:	30c00c26 	beq	r6,r3,1000ae14 <_calloc_r+0xc0>
1000ade4:	80800404 	addi	r2,r16,16
1000ade8:	003fef06 	br	1000ada8 <__alt_data_end+0xf800ada8>
1000adec:	8009883a 	mov	r4,r16
1000adf0:	000b883a 	mov	r5,zero
1000adf4:	0007d940 	call	10007d94 <memset>
1000adf8:	8005883a 	mov	r2,r16
1000adfc:	dfc00117 	ldw	ra,4(sp)
1000ae00:	dc000017 	ldw	r16,0(sp)
1000ae04:	dec00204 	addi	sp,sp,8
1000ae08:	f800283a 	ret
1000ae0c:	80800204 	addi	r2,r16,8
1000ae10:	003fe506 	br	1000ada8 <__alt_data_end+0xf800ada8>
1000ae14:	80000415 	stw	zero,16(r16)
1000ae18:	80800604 	addi	r2,r16,24
1000ae1c:	80000515 	stw	zero,20(r16)
1000ae20:	003fe106 	br	1000ada8 <__alt_data_end+0xf800ada8>
1000ae24:	0005883a 	mov	r2,zero
1000ae28:	003fe306 	br	1000adb8 <__alt_data_end+0xf800adb8>

1000ae2c <_fclose_r>:
1000ae2c:	28003226 	beq	r5,zero,1000aef8 <_fclose_r+0xcc>
1000ae30:	defffc04 	addi	sp,sp,-16
1000ae34:	dc400115 	stw	r17,4(sp)
1000ae38:	2023883a 	mov	r17,r4
1000ae3c:	dc000015 	stw	r16,0(sp)
1000ae40:	dfc00315 	stw	ra,12(sp)
1000ae44:	dc800215 	stw	r18,8(sp)
1000ae48:	2821883a 	mov	r16,r5
1000ae4c:	00065700 	call	10006570 <__sfp_lock_acquire>
1000ae50:	88000226 	beq	r17,zero,1000ae5c <_fclose_r+0x30>
1000ae54:	88800e17 	ldw	r2,56(r17)
1000ae58:	10002926 	beq	r2,zero,1000af00 <_fclose_r+0xd4>
1000ae5c:	8080030f 	ldh	r2,12(r16)
1000ae60:	10002226 	beq	r2,zero,1000aeec <_fclose_r+0xc0>
1000ae64:	8809883a 	mov	r4,r17
1000ae68:	800b883a 	mov	r5,r16
1000ae6c:	0005fa40 	call	10005fa4 <_fflush_r>
1000ae70:	1025883a 	mov	r18,r2
1000ae74:	80800b17 	ldw	r2,44(r16)
1000ae78:	10000426 	beq	r2,zero,1000ae8c <_fclose_r+0x60>
1000ae7c:	81400717 	ldw	r5,28(r16)
1000ae80:	8809883a 	mov	r4,r17
1000ae84:	103ee83a 	callr	r2
1000ae88:	10002616 	blt	r2,zero,1000af24 <_fclose_r+0xf8>
1000ae8c:	8080030b 	ldhu	r2,12(r16)
1000ae90:	1080200c 	andi	r2,r2,128
1000ae94:	10001f1e 	bne	r2,zero,1000af14 <_fclose_r+0xe8>
1000ae98:	81400c17 	ldw	r5,48(r16)
1000ae9c:	28000526 	beq	r5,zero,1000aeb4 <_fclose_r+0x88>
1000aea0:	80801004 	addi	r2,r16,64
1000aea4:	28800226 	beq	r5,r2,1000aeb0 <_fclose_r+0x84>
1000aea8:	8809883a 	mov	r4,r17
1000aeac:	00066d40 	call	100066d4 <_free_r>
1000aeb0:	80000c15 	stw	zero,48(r16)
1000aeb4:	81401117 	ldw	r5,68(r16)
1000aeb8:	28000326 	beq	r5,zero,1000aec8 <_fclose_r+0x9c>
1000aebc:	8809883a 	mov	r4,r17
1000aec0:	00066d40 	call	100066d4 <_free_r>
1000aec4:	80001115 	stw	zero,68(r16)
1000aec8:	8000030d 	sth	zero,12(r16)
1000aecc:	00065740 	call	10006574 <__sfp_lock_release>
1000aed0:	9005883a 	mov	r2,r18
1000aed4:	dfc00317 	ldw	ra,12(sp)
1000aed8:	dc800217 	ldw	r18,8(sp)
1000aedc:	dc400117 	ldw	r17,4(sp)
1000aee0:	dc000017 	ldw	r16,0(sp)
1000aee4:	dec00404 	addi	sp,sp,16
1000aee8:	f800283a 	ret
1000aeec:	00065740 	call	10006574 <__sfp_lock_release>
1000aef0:	0005883a 	mov	r2,zero
1000aef4:	003ff706 	br	1000aed4 <__alt_data_end+0xf800aed4>
1000aef8:	0005883a 	mov	r2,zero
1000aefc:	f800283a 	ret
1000af00:	8809883a 	mov	r4,r17
1000af04:	00065600 	call	10006560 <__sinit>
1000af08:	8080030f 	ldh	r2,12(r16)
1000af0c:	103fd51e 	bne	r2,zero,1000ae64 <__alt_data_end+0xf800ae64>
1000af10:	003ff606 	br	1000aeec <__alt_data_end+0xf800aeec>
1000af14:	81400417 	ldw	r5,16(r16)
1000af18:	8809883a 	mov	r4,r17
1000af1c:	00066d40 	call	100066d4 <_free_r>
1000af20:	003fdd06 	br	1000ae98 <__alt_data_end+0xf800ae98>
1000af24:	04bfffc4 	movi	r18,-1
1000af28:	003fd806 	br	1000ae8c <__alt_data_end+0xf800ae8c>

1000af2c <fclose>:
1000af2c:	00840074 	movhi	r2,4097
1000af30:	108e6904 	addi	r2,r2,14756
1000af34:	200b883a 	mov	r5,r4
1000af38:	11000017 	ldw	r4,0(r2)
1000af3c:	000ae2c1 	jmpi	1000ae2c <_fclose_r>

1000af40 <_fputwc_r>:
1000af40:	3080030b 	ldhu	r2,12(r6)
1000af44:	defff804 	addi	sp,sp,-32
1000af48:	dcc00415 	stw	r19,16(sp)
1000af4c:	dc800315 	stw	r18,12(sp)
1000af50:	dc000115 	stw	r16,4(sp)
1000af54:	dfc00715 	stw	ra,28(sp)
1000af58:	dd400615 	stw	r21,24(sp)
1000af5c:	dd000515 	stw	r20,20(sp)
1000af60:	dc400215 	stw	r17,8(sp)
1000af64:	10c8000c 	andi	r3,r2,8192
1000af68:	3021883a 	mov	r16,r6
1000af6c:	2027883a 	mov	r19,r4
1000af70:	2825883a 	mov	r18,r5
1000af74:	1800051e 	bne	r3,zero,1000af8c <_fputwc_r+0x4c>
1000af78:	30c01917 	ldw	r3,100(r6)
1000af7c:	10880014 	ori	r2,r2,8192
1000af80:	3080030d 	sth	r2,12(r6)
1000af84:	18880014 	ori	r2,r3,8192
1000af88:	30801915 	stw	r2,100(r6)
1000af8c:	00070600 	call	10007060 <__locale_mb_cur_max>
1000af90:	00c00044 	movi	r3,1
1000af94:	10c03e26 	beq	r2,r3,1000b090 <_fputwc_r+0x150>
1000af98:	9809883a 	mov	r4,r19
1000af9c:	d80b883a 	mov	r5,sp
1000afa0:	900d883a 	mov	r6,r18
1000afa4:	81c01704 	addi	r7,r16,92
1000afa8:	000b3f00 	call	1000b3f0 <_wcrtomb_r>
1000afac:	1029883a 	mov	r20,r2
1000afb0:	00bfffc4 	movi	r2,-1
1000afb4:	a0802026 	beq	r20,r2,1000b038 <_fputwc_r+0xf8>
1000afb8:	d9400003 	ldbu	r5,0(sp)
1000afbc:	a0001c26 	beq	r20,zero,1000b030 <_fputwc_r+0xf0>
1000afc0:	0023883a 	mov	r17,zero
1000afc4:	05400284 	movi	r21,10
1000afc8:	00000906 	br	1000aff0 <_fputwc_r+0xb0>
1000afcc:	80800017 	ldw	r2,0(r16)
1000afd0:	11400005 	stb	r5,0(r2)
1000afd4:	80c00017 	ldw	r3,0(r16)
1000afd8:	18c00044 	addi	r3,r3,1
1000afdc:	80c00015 	stw	r3,0(r16)
1000afe0:	8c400044 	addi	r17,r17,1
1000afe4:	dc45883a 	add	r2,sp,r17
1000afe8:	8d00112e 	bgeu	r17,r20,1000b030 <_fputwc_r+0xf0>
1000afec:	11400003 	ldbu	r5,0(r2)
1000aff0:	80c00217 	ldw	r3,8(r16)
1000aff4:	18ffffc4 	addi	r3,r3,-1
1000aff8:	80c00215 	stw	r3,8(r16)
1000affc:	183ff30e 	bge	r3,zero,1000afcc <__alt_data_end+0xf800afcc>
1000b000:	80800617 	ldw	r2,24(r16)
1000b004:	18801916 	blt	r3,r2,1000b06c <_fputwc_r+0x12c>
1000b008:	80800017 	ldw	r2,0(r16)
1000b00c:	11400005 	stb	r5,0(r2)
1000b010:	80800017 	ldw	r2,0(r16)
1000b014:	10c00003 	ldbu	r3,0(r2)
1000b018:	10800044 	addi	r2,r2,1
1000b01c:	1d402326 	beq	r3,r21,1000b0ac <_fputwc_r+0x16c>
1000b020:	80800015 	stw	r2,0(r16)
1000b024:	8c400044 	addi	r17,r17,1
1000b028:	dc45883a 	add	r2,sp,r17
1000b02c:	8d3fef36 	bltu	r17,r20,1000afec <__alt_data_end+0xf800afec>
1000b030:	9005883a 	mov	r2,r18
1000b034:	00000406 	br	1000b048 <_fputwc_r+0x108>
1000b038:	80c0030b 	ldhu	r3,12(r16)
1000b03c:	a005883a 	mov	r2,r20
1000b040:	18c01014 	ori	r3,r3,64
1000b044:	80c0030d 	sth	r3,12(r16)
1000b048:	dfc00717 	ldw	ra,28(sp)
1000b04c:	dd400617 	ldw	r21,24(sp)
1000b050:	dd000517 	ldw	r20,20(sp)
1000b054:	dcc00417 	ldw	r19,16(sp)
1000b058:	dc800317 	ldw	r18,12(sp)
1000b05c:	dc400217 	ldw	r17,8(sp)
1000b060:	dc000117 	ldw	r16,4(sp)
1000b064:	dec00804 	addi	sp,sp,32
1000b068:	f800283a 	ret
1000b06c:	9809883a 	mov	r4,r19
1000b070:	29403fcc 	andi	r5,r5,255
1000b074:	800d883a 	mov	r6,r16
1000b078:	000b2800 	call	1000b280 <__swbuf_r>
1000b07c:	10bfffe0 	cmpeqi	r2,r2,-1
1000b080:	10803fcc 	andi	r2,r2,255
1000b084:	103fd626 	beq	r2,zero,1000afe0 <__alt_data_end+0xf800afe0>
1000b088:	00bfffc4 	movi	r2,-1
1000b08c:	003fee06 	br	1000b048 <__alt_data_end+0xf800b048>
1000b090:	90ffffc4 	addi	r3,r18,-1
1000b094:	01003f84 	movi	r4,254
1000b098:	20ffbf36 	bltu	r4,r3,1000af98 <__alt_data_end+0xf800af98>
1000b09c:	900b883a 	mov	r5,r18
1000b0a0:	dc800005 	stb	r18,0(sp)
1000b0a4:	1029883a 	mov	r20,r2
1000b0a8:	003fc506 	br	1000afc0 <__alt_data_end+0xf800afc0>
1000b0ac:	9809883a 	mov	r4,r19
1000b0b0:	a80b883a 	mov	r5,r21
1000b0b4:	800d883a 	mov	r6,r16
1000b0b8:	000b2800 	call	1000b280 <__swbuf_r>
1000b0bc:	10bfffe0 	cmpeqi	r2,r2,-1
1000b0c0:	003fef06 	br	1000b080 <__alt_data_end+0xf800b080>

1000b0c4 <fputwc>:
1000b0c4:	defffc04 	addi	sp,sp,-16
1000b0c8:	dc000115 	stw	r16,4(sp)
1000b0cc:	04040074 	movhi	r16,4097
1000b0d0:	840e6904 	addi	r16,r16,14756
1000b0d4:	dc400215 	stw	r17,8(sp)
1000b0d8:	2023883a 	mov	r17,r4
1000b0dc:	81000017 	ldw	r4,0(r16)
1000b0e0:	dfc00315 	stw	ra,12(sp)
1000b0e4:	280d883a 	mov	r6,r5
1000b0e8:	20000626 	beq	r4,zero,1000b104 <fputwc+0x40>
1000b0ec:	20800e17 	ldw	r2,56(r4)
1000b0f0:	1000041e 	bne	r2,zero,1000b104 <fputwc+0x40>
1000b0f4:	d9400015 	stw	r5,0(sp)
1000b0f8:	00065600 	call	10006560 <__sinit>
1000b0fc:	81000017 	ldw	r4,0(r16)
1000b100:	d9800017 	ldw	r6,0(sp)
1000b104:	880b883a 	mov	r5,r17
1000b108:	dfc00317 	ldw	ra,12(sp)
1000b10c:	dc400217 	ldw	r17,8(sp)
1000b110:	dc000117 	ldw	r16,4(sp)
1000b114:	dec00404 	addi	sp,sp,16
1000b118:	000af401 	jmpi	1000af40 <_fputwc_r>

1000b11c <_fstat_r>:
1000b11c:	defffd04 	addi	sp,sp,-12
1000b120:	dc000015 	stw	r16,0(sp)
1000b124:	04040074 	movhi	r16,4097
1000b128:	dc400115 	stw	r17,4(sp)
1000b12c:	84153a04 	addi	r16,r16,21736
1000b130:	2023883a 	mov	r17,r4
1000b134:	2809883a 	mov	r4,r5
1000b138:	300b883a 	mov	r5,r6
1000b13c:	dfc00215 	stw	ra,8(sp)
1000b140:	80000015 	stw	zero,0(r16)
1000b144:	000ed400 	call	1000ed40 <fstat>
1000b148:	00ffffc4 	movi	r3,-1
1000b14c:	10c00526 	beq	r2,r3,1000b164 <_fstat_r+0x48>
1000b150:	dfc00217 	ldw	ra,8(sp)
1000b154:	dc400117 	ldw	r17,4(sp)
1000b158:	dc000017 	ldw	r16,0(sp)
1000b15c:	dec00304 	addi	sp,sp,12
1000b160:	f800283a 	ret
1000b164:	80c00017 	ldw	r3,0(r16)
1000b168:	183ff926 	beq	r3,zero,1000b150 <__alt_data_end+0xf800b150>
1000b16c:	88c00015 	stw	r3,0(r17)
1000b170:	003ff706 	br	1000b150 <__alt_data_end+0xf800b150>

1000b174 <_isatty_r>:
1000b174:	defffd04 	addi	sp,sp,-12
1000b178:	dc000015 	stw	r16,0(sp)
1000b17c:	04040074 	movhi	r16,4097
1000b180:	dc400115 	stw	r17,4(sp)
1000b184:	84153a04 	addi	r16,r16,21736
1000b188:	2023883a 	mov	r17,r4
1000b18c:	2809883a 	mov	r4,r5
1000b190:	dfc00215 	stw	ra,8(sp)
1000b194:	80000015 	stw	zero,0(r16)
1000b198:	000ee480 	call	1000ee48 <isatty>
1000b19c:	00ffffc4 	movi	r3,-1
1000b1a0:	10c00526 	beq	r2,r3,1000b1b8 <_isatty_r+0x44>
1000b1a4:	dfc00217 	ldw	ra,8(sp)
1000b1a8:	dc400117 	ldw	r17,4(sp)
1000b1ac:	dc000017 	ldw	r16,0(sp)
1000b1b0:	dec00304 	addi	sp,sp,12
1000b1b4:	f800283a 	ret
1000b1b8:	80c00017 	ldw	r3,0(r16)
1000b1bc:	183ff926 	beq	r3,zero,1000b1a4 <__alt_data_end+0xf800b1a4>
1000b1c0:	88c00015 	stw	r3,0(r17)
1000b1c4:	003ff706 	br	1000b1a4 <__alt_data_end+0xf800b1a4>

1000b1c8 <_lseek_r>:
1000b1c8:	defffd04 	addi	sp,sp,-12
1000b1cc:	dc000015 	stw	r16,0(sp)
1000b1d0:	04040074 	movhi	r16,4097
1000b1d4:	dc400115 	stw	r17,4(sp)
1000b1d8:	84153a04 	addi	r16,r16,21736
1000b1dc:	2023883a 	mov	r17,r4
1000b1e0:	2809883a 	mov	r4,r5
1000b1e4:	300b883a 	mov	r5,r6
1000b1e8:	380d883a 	mov	r6,r7
1000b1ec:	dfc00215 	stw	ra,8(sp)
1000b1f0:	80000015 	stw	zero,0(r16)
1000b1f4:	000f0280 	call	1000f028 <lseek>
1000b1f8:	00ffffc4 	movi	r3,-1
1000b1fc:	10c00526 	beq	r2,r3,1000b214 <_lseek_r+0x4c>
1000b200:	dfc00217 	ldw	ra,8(sp)
1000b204:	dc400117 	ldw	r17,4(sp)
1000b208:	dc000017 	ldw	r16,0(sp)
1000b20c:	dec00304 	addi	sp,sp,12
1000b210:	f800283a 	ret
1000b214:	80c00017 	ldw	r3,0(r16)
1000b218:	183ff926 	beq	r3,zero,1000b200 <__alt_data_end+0xf800b200>
1000b21c:	88c00015 	stw	r3,0(r17)
1000b220:	003ff706 	br	1000b200 <__alt_data_end+0xf800b200>

1000b224 <_read_r>:
1000b224:	defffd04 	addi	sp,sp,-12
1000b228:	dc000015 	stw	r16,0(sp)
1000b22c:	04040074 	movhi	r16,4097
1000b230:	dc400115 	stw	r17,4(sp)
1000b234:	84153a04 	addi	r16,r16,21736
1000b238:	2023883a 	mov	r17,r4
1000b23c:	2809883a 	mov	r4,r5
1000b240:	300b883a 	mov	r5,r6
1000b244:	380d883a 	mov	r6,r7
1000b248:	dfc00215 	stw	ra,8(sp)
1000b24c:	80000015 	stw	zero,0(r16)
1000b250:	000f20c0 	call	1000f20c <read>
1000b254:	00ffffc4 	movi	r3,-1
1000b258:	10c00526 	beq	r2,r3,1000b270 <_read_r+0x4c>
1000b25c:	dfc00217 	ldw	ra,8(sp)
1000b260:	dc400117 	ldw	r17,4(sp)
1000b264:	dc000017 	ldw	r16,0(sp)
1000b268:	dec00304 	addi	sp,sp,12
1000b26c:	f800283a 	ret
1000b270:	80c00017 	ldw	r3,0(r16)
1000b274:	183ff926 	beq	r3,zero,1000b25c <__alt_data_end+0xf800b25c>
1000b278:	88c00015 	stw	r3,0(r17)
1000b27c:	003ff706 	br	1000b25c <__alt_data_end+0xf800b25c>

1000b280 <__swbuf_r>:
1000b280:	defffc04 	addi	sp,sp,-16
1000b284:	dc800215 	stw	r18,8(sp)
1000b288:	dc400115 	stw	r17,4(sp)
1000b28c:	dc000015 	stw	r16,0(sp)
1000b290:	dfc00315 	stw	ra,12(sp)
1000b294:	2025883a 	mov	r18,r4
1000b298:	2823883a 	mov	r17,r5
1000b29c:	3021883a 	mov	r16,r6
1000b2a0:	20000226 	beq	r4,zero,1000b2ac <__swbuf_r+0x2c>
1000b2a4:	20800e17 	ldw	r2,56(r4)
1000b2a8:	10004126 	beq	r2,zero,1000b3b0 <__swbuf_r+0x130>
1000b2ac:	80c00617 	ldw	r3,24(r16)
1000b2b0:	8180030b 	ldhu	r6,12(r16)
1000b2b4:	80c00215 	stw	r3,8(r16)
1000b2b8:	30c0020c 	andi	r3,r6,8
1000b2bc:	18003526 	beq	r3,zero,1000b394 <__swbuf_r+0x114>
1000b2c0:	80c00417 	ldw	r3,16(r16)
1000b2c4:	18003326 	beq	r3,zero,1000b394 <__swbuf_r+0x114>
1000b2c8:	3088000c 	andi	r2,r6,8192
1000b2cc:	8c403fcc 	andi	r17,r17,255
1000b2d0:	10001726 	beq	r2,zero,1000b330 <__swbuf_r+0xb0>
1000b2d4:	80800017 	ldw	r2,0(r16)
1000b2d8:	81000517 	ldw	r4,20(r16)
1000b2dc:	10c7c83a 	sub	r3,r2,r3
1000b2e0:	19001d0e 	bge	r3,r4,1000b358 <__swbuf_r+0xd8>
1000b2e4:	18c00044 	addi	r3,r3,1
1000b2e8:	81400217 	ldw	r5,8(r16)
1000b2ec:	11000044 	addi	r4,r2,1
1000b2f0:	81000015 	stw	r4,0(r16)
1000b2f4:	297fffc4 	addi	r5,r5,-1
1000b2f8:	81400215 	stw	r5,8(r16)
1000b2fc:	14400005 	stb	r17,0(r2)
1000b300:	80800517 	ldw	r2,20(r16)
1000b304:	10c01d26 	beq	r2,r3,1000b37c <__swbuf_r+0xfc>
1000b308:	8080030b 	ldhu	r2,12(r16)
1000b30c:	1080004c 	andi	r2,r2,1
1000b310:	1000181e 	bne	r2,zero,1000b374 <__swbuf_r+0xf4>
1000b314:	8805883a 	mov	r2,r17
1000b318:	dfc00317 	ldw	ra,12(sp)
1000b31c:	dc800217 	ldw	r18,8(sp)
1000b320:	dc400117 	ldw	r17,4(sp)
1000b324:	dc000017 	ldw	r16,0(sp)
1000b328:	dec00404 	addi	sp,sp,16
1000b32c:	f800283a 	ret
1000b330:	81001917 	ldw	r4,100(r16)
1000b334:	00b7ffc4 	movi	r2,-8193
1000b338:	31880014 	ori	r6,r6,8192
1000b33c:	2084703a 	and	r2,r4,r2
1000b340:	80801915 	stw	r2,100(r16)
1000b344:	80800017 	ldw	r2,0(r16)
1000b348:	81000517 	ldw	r4,20(r16)
1000b34c:	8180030d 	sth	r6,12(r16)
1000b350:	10c7c83a 	sub	r3,r2,r3
1000b354:	193fe316 	blt	r3,r4,1000b2e4 <__alt_data_end+0xf800b2e4>
1000b358:	9009883a 	mov	r4,r18
1000b35c:	800b883a 	mov	r5,r16
1000b360:	0005fa40 	call	10005fa4 <_fflush_r>
1000b364:	1000091e 	bne	r2,zero,1000b38c <__swbuf_r+0x10c>
1000b368:	80800017 	ldw	r2,0(r16)
1000b36c:	00c00044 	movi	r3,1
1000b370:	003fdd06 	br	1000b2e8 <__alt_data_end+0xf800b2e8>
1000b374:	00800284 	movi	r2,10
1000b378:	88bfe61e 	bne	r17,r2,1000b314 <__alt_data_end+0xf800b314>
1000b37c:	9009883a 	mov	r4,r18
1000b380:	800b883a 	mov	r5,r16
1000b384:	0005fa40 	call	10005fa4 <_fflush_r>
1000b388:	103fe226 	beq	r2,zero,1000b314 <__alt_data_end+0xf800b314>
1000b38c:	00bfffc4 	movi	r2,-1
1000b390:	003fe106 	br	1000b318 <__alt_data_end+0xf800b318>
1000b394:	9009883a 	mov	r4,r18
1000b398:	800b883a 	mov	r5,r16
1000b39c:	00045240 	call	10004524 <__swsetup_r>
1000b3a0:	1000051e 	bne	r2,zero,1000b3b8 <__swbuf_r+0x138>
1000b3a4:	8180030b 	ldhu	r6,12(r16)
1000b3a8:	80c00417 	ldw	r3,16(r16)
1000b3ac:	003fc606 	br	1000b2c8 <__alt_data_end+0xf800b2c8>
1000b3b0:	00065600 	call	10006560 <__sinit>
1000b3b4:	003fbd06 	br	1000b2ac <__alt_data_end+0xf800b2ac>
1000b3b8:	80c0030b 	ldhu	r3,12(r16)
1000b3bc:	00bfffc4 	movi	r2,-1
1000b3c0:	18c01014 	ori	r3,r3,64
1000b3c4:	80c0030d 	sth	r3,12(r16)
1000b3c8:	00c00244 	movi	r3,9
1000b3cc:	90c00015 	stw	r3,0(r18)
1000b3d0:	003fd106 	br	1000b318 <__alt_data_end+0xf800b318>

1000b3d4 <__swbuf>:
1000b3d4:	00c40074 	movhi	r3,4097
1000b3d8:	18ce6904 	addi	r3,r3,14756
1000b3dc:	2005883a 	mov	r2,r4
1000b3e0:	19000017 	ldw	r4,0(r3)
1000b3e4:	280d883a 	mov	r6,r5
1000b3e8:	100b883a 	mov	r5,r2
1000b3ec:	000b2801 	jmpi	1000b280 <__swbuf_r>

1000b3f0 <_wcrtomb_r>:
1000b3f0:	defff604 	addi	sp,sp,-40
1000b3f4:	00840074 	movhi	r2,4097
1000b3f8:	dc800815 	stw	r18,32(sp)
1000b3fc:	dc400715 	stw	r17,28(sp)
1000b400:	dc000615 	stw	r16,24(sp)
1000b404:	108e6d04 	addi	r2,r2,14772
1000b408:	dfc00915 	stw	ra,36(sp)
1000b40c:	2021883a 	mov	r16,r4
1000b410:	3823883a 	mov	r17,r7
1000b414:	14800017 	ldw	r18,0(r2)
1000b418:	28001426 	beq	r5,zero,1000b46c <_wcrtomb_r+0x7c>
1000b41c:	d9400415 	stw	r5,16(sp)
1000b420:	d9800515 	stw	r6,20(sp)
1000b424:	00070540 	call	10007054 <__locale_charset>
1000b428:	d9400417 	ldw	r5,16(sp)
1000b42c:	d9800517 	ldw	r6,20(sp)
1000b430:	8009883a 	mov	r4,r16
1000b434:	dc400015 	stw	r17,0(sp)
1000b438:	100f883a 	mov	r7,r2
1000b43c:	903ee83a 	callr	r18
1000b440:	00ffffc4 	movi	r3,-1
1000b444:	10c0031e 	bne	r2,r3,1000b454 <_wcrtomb_r+0x64>
1000b448:	88000015 	stw	zero,0(r17)
1000b44c:	00c02284 	movi	r3,138
1000b450:	80c00015 	stw	r3,0(r16)
1000b454:	dfc00917 	ldw	ra,36(sp)
1000b458:	dc800817 	ldw	r18,32(sp)
1000b45c:	dc400717 	ldw	r17,28(sp)
1000b460:	dc000617 	ldw	r16,24(sp)
1000b464:	dec00a04 	addi	sp,sp,40
1000b468:	f800283a 	ret
1000b46c:	00070540 	call	10007054 <__locale_charset>
1000b470:	8009883a 	mov	r4,r16
1000b474:	dc400015 	stw	r17,0(sp)
1000b478:	d9400104 	addi	r5,sp,4
1000b47c:	000d883a 	mov	r6,zero
1000b480:	100f883a 	mov	r7,r2
1000b484:	903ee83a 	callr	r18
1000b488:	003fed06 	br	1000b440 <__alt_data_end+0xf800b440>

1000b48c <wcrtomb>:
1000b48c:	defff504 	addi	sp,sp,-44
1000b490:	dc400515 	stw	r17,20(sp)
1000b494:	dc000415 	stw	r16,16(sp)
1000b498:	dfc00a15 	stw	ra,40(sp)
1000b49c:	dd400915 	stw	r21,36(sp)
1000b4a0:	dd000815 	stw	r20,32(sp)
1000b4a4:	dcc00715 	stw	r19,28(sp)
1000b4a8:	dc800615 	stw	r18,24(sp)
1000b4ac:	2021883a 	mov	r16,r4
1000b4b0:	3023883a 	mov	r17,r6
1000b4b4:	20001d26 	beq	r4,zero,1000b52c <wcrtomb+0xa0>
1000b4b8:	04840074 	movhi	r18,4097
1000b4bc:	948e6904 	addi	r18,r18,14756
1000b4c0:	00840074 	movhi	r2,4097
1000b4c4:	95400017 	ldw	r21,0(r18)
1000b4c8:	108e6d04 	addi	r2,r2,14772
1000b4cc:	15000017 	ldw	r20,0(r2)
1000b4d0:	2827883a 	mov	r19,r5
1000b4d4:	00070540 	call	10007054 <__locale_charset>
1000b4d8:	a809883a 	mov	r4,r21
1000b4dc:	dc400015 	stw	r17,0(sp)
1000b4e0:	800b883a 	mov	r5,r16
1000b4e4:	980d883a 	mov	r6,r19
1000b4e8:	100f883a 	mov	r7,r2
1000b4ec:	a03ee83a 	callr	r20
1000b4f0:	00ffffc4 	movi	r3,-1
1000b4f4:	10c0041e 	bne	r2,r3,1000b508 <wcrtomb+0x7c>
1000b4f8:	90c00017 	ldw	r3,0(r18)
1000b4fc:	01002284 	movi	r4,138
1000b500:	88000015 	stw	zero,0(r17)
1000b504:	19000015 	stw	r4,0(r3)
1000b508:	dfc00a17 	ldw	ra,40(sp)
1000b50c:	dd400917 	ldw	r21,36(sp)
1000b510:	dd000817 	ldw	r20,32(sp)
1000b514:	dcc00717 	ldw	r19,28(sp)
1000b518:	dc800617 	ldw	r18,24(sp)
1000b51c:	dc400517 	ldw	r17,20(sp)
1000b520:	dc000417 	ldw	r16,16(sp)
1000b524:	dec00b04 	addi	sp,sp,44
1000b528:	f800283a 	ret
1000b52c:	04840074 	movhi	r18,4097
1000b530:	948e6904 	addi	r18,r18,14756
1000b534:	00840074 	movhi	r2,4097
1000b538:	94c00017 	ldw	r19,0(r18)
1000b53c:	108e6d04 	addi	r2,r2,14772
1000b540:	14000017 	ldw	r16,0(r2)
1000b544:	00070540 	call	10007054 <__locale_charset>
1000b548:	9809883a 	mov	r4,r19
1000b54c:	dc400015 	stw	r17,0(sp)
1000b550:	d9400104 	addi	r5,sp,4
1000b554:	000d883a 	mov	r6,zero
1000b558:	100f883a 	mov	r7,r2
1000b55c:	803ee83a 	callr	r16
1000b560:	003fe306 	br	1000b4f0 <__alt_data_end+0xf800b4f0>

1000b564 <__ascii_wctomb>:
1000b564:	28000526 	beq	r5,zero,1000b57c <__ascii_wctomb+0x18>
1000b568:	00803fc4 	movi	r2,255
1000b56c:	11800536 	bltu	r2,r6,1000b584 <__ascii_wctomb+0x20>
1000b570:	29800005 	stb	r6,0(r5)
1000b574:	00800044 	movi	r2,1
1000b578:	f800283a 	ret
1000b57c:	0005883a 	mov	r2,zero
1000b580:	f800283a 	ret
1000b584:	00802284 	movi	r2,138
1000b588:	20800015 	stw	r2,0(r4)
1000b58c:	00bfffc4 	movi	r2,-1
1000b590:	f800283a 	ret

1000b594 <_wctomb_r>:
1000b594:	00840074 	movhi	r2,4097
1000b598:	defff904 	addi	sp,sp,-28
1000b59c:	108e6d04 	addi	r2,r2,14772
1000b5a0:	dfc00615 	stw	ra,24(sp)
1000b5a4:	dc400515 	stw	r17,20(sp)
1000b5a8:	dc000415 	stw	r16,16(sp)
1000b5ac:	3823883a 	mov	r17,r7
1000b5b0:	14000017 	ldw	r16,0(r2)
1000b5b4:	d9000115 	stw	r4,4(sp)
1000b5b8:	d9400215 	stw	r5,8(sp)
1000b5bc:	d9800315 	stw	r6,12(sp)
1000b5c0:	00070540 	call	10007054 <__locale_charset>
1000b5c4:	d9000117 	ldw	r4,4(sp)
1000b5c8:	d9400217 	ldw	r5,8(sp)
1000b5cc:	d9800317 	ldw	r6,12(sp)
1000b5d0:	dc400015 	stw	r17,0(sp)
1000b5d4:	100f883a 	mov	r7,r2
1000b5d8:	803ee83a 	callr	r16
1000b5dc:	dfc00617 	ldw	ra,24(sp)
1000b5e0:	dc400517 	ldw	r17,20(sp)
1000b5e4:	dc000417 	ldw	r16,16(sp)
1000b5e8:	dec00704 	addi	sp,sp,28
1000b5ec:	f800283a 	ret

1000b5f0 <__udivdi3>:
1000b5f0:	defff504 	addi	sp,sp,-44
1000b5f4:	dcc00415 	stw	r19,16(sp)
1000b5f8:	dc000115 	stw	r16,4(sp)
1000b5fc:	dfc00a15 	stw	ra,40(sp)
1000b600:	df000915 	stw	fp,36(sp)
1000b604:	ddc00815 	stw	r23,32(sp)
1000b608:	dd800715 	stw	r22,28(sp)
1000b60c:	dd400615 	stw	r21,24(sp)
1000b610:	dd000515 	stw	r20,20(sp)
1000b614:	dc800315 	stw	r18,12(sp)
1000b618:	dc400215 	stw	r17,8(sp)
1000b61c:	2027883a 	mov	r19,r4
1000b620:	2821883a 	mov	r16,r5
1000b624:	3800471e 	bne	r7,zero,1000b744 <__udivdi3+0x154>
1000b628:	3025883a 	mov	r18,r6
1000b62c:	2023883a 	mov	r17,r4
1000b630:	2980592e 	bgeu	r5,r6,1000b798 <__udivdi3+0x1a8>
1000b634:	00bfffd4 	movui	r2,65535
1000b638:	2829883a 	mov	r20,r5
1000b63c:	1180b236 	bltu	r2,r6,1000b908 <__udivdi3+0x318>
1000b640:	00803fc4 	movi	r2,255
1000b644:	1181622e 	bgeu	r2,r6,1000bbd0 <__udivdi3+0x5e0>
1000b648:	00800204 	movi	r2,8
1000b64c:	1007883a 	mov	r3,r2
1000b650:	3084d83a 	srl	r2,r6,r2
1000b654:	01040074 	movhi	r4,4097
1000b658:	21077004 	addi	r4,r4,7616
1000b65c:	2085883a 	add	r2,r4,r2
1000b660:	11000003 	ldbu	r4,0(r2)
1000b664:	20c9883a 	add	r4,r4,r3
1000b668:	00c00804 	movi	r3,32
1000b66c:	1907c83a 	sub	r3,r3,r4
1000b670:	18000526 	beq	r3,zero,1000b688 <__udivdi3+0x98>
1000b674:	80e0983a 	sll	r16,r16,r3
1000b678:	9908d83a 	srl	r4,r19,r4
1000b67c:	30e4983a 	sll	r18,r6,r3
1000b680:	98e2983a 	sll	r17,r19,r3
1000b684:	8128b03a 	or	r20,r16,r4
1000b688:	902ad43a 	srli	r21,r18,16
1000b68c:	a009883a 	mov	r4,r20
1000b690:	95bfffcc 	andi	r22,r18,65535
1000b694:	a80b883a 	mov	r5,r21
1000b698:	000c3700 	call	1000c370 <__umodsi3>
1000b69c:	a009883a 	mov	r4,r20
1000b6a0:	a80b883a 	mov	r5,r21
1000b6a4:	102f883a 	mov	r23,r2
1000b6a8:	000c3680 	call	1000c368 <__udivsi3>
1000b6ac:	1009883a 	mov	r4,r2
1000b6b0:	b00b883a 	mov	r5,r22
1000b6b4:	1021883a 	mov	r16,r2
1000b6b8:	000c3780 	call	1000c378 <__mulsi3>
1000b6bc:	b82e943a 	slli	r23,r23,16
1000b6c0:	8808d43a 	srli	r4,r17,16
1000b6c4:	b906b03a 	or	r3,r23,r4
1000b6c8:	1880052e 	bgeu	r3,r2,1000b6e0 <__udivdi3+0xf0>
1000b6cc:	1c87883a 	add	r3,r3,r18
1000b6d0:	813fffc4 	addi	r4,r16,-1
1000b6d4:	1c800136 	bltu	r3,r18,1000b6dc <__udivdi3+0xec>
1000b6d8:	18815236 	bltu	r3,r2,1000bc24 <__udivdi3+0x634>
1000b6dc:	2021883a 	mov	r16,r4
1000b6e0:	18a7c83a 	sub	r19,r3,r2
1000b6e4:	9809883a 	mov	r4,r19
1000b6e8:	a80b883a 	mov	r5,r21
1000b6ec:	000c3700 	call	1000c370 <__umodsi3>
1000b6f0:	1029883a 	mov	r20,r2
1000b6f4:	9809883a 	mov	r4,r19
1000b6f8:	a80b883a 	mov	r5,r21
1000b6fc:	a028943a 	slli	r20,r20,16
1000b700:	000c3680 	call	1000c368 <__udivsi3>
1000b704:	1009883a 	mov	r4,r2
1000b708:	b00b883a 	mov	r5,r22
1000b70c:	8c7fffcc 	andi	r17,r17,65535
1000b710:	1027883a 	mov	r19,r2
1000b714:	a462b03a 	or	r17,r20,r17
1000b718:	000c3780 	call	1000c378 <__mulsi3>
1000b71c:	8880052e 	bgeu	r17,r2,1000b734 <__udivdi3+0x144>
1000b720:	8ca3883a 	add	r17,r17,r18
1000b724:	98ffffc4 	addi	r3,r19,-1
1000b728:	8c811036 	bltu	r17,r18,1000bb6c <__udivdi3+0x57c>
1000b72c:	88810f2e 	bgeu	r17,r2,1000bb6c <__udivdi3+0x57c>
1000b730:	9cffff84 	addi	r19,r19,-2
1000b734:	8020943a 	slli	r16,r16,16
1000b738:	0007883a 	mov	r3,zero
1000b73c:	9c04b03a 	or	r2,r19,r16
1000b740:	00006006 	br	1000b8c4 <__udivdi3+0x2d4>
1000b744:	29c05d36 	bltu	r5,r7,1000b8bc <__udivdi3+0x2cc>
1000b748:	00bfffd4 	movui	r2,65535
1000b74c:	11c0692e 	bgeu	r2,r7,1000b8f4 <__udivdi3+0x304>
1000b750:	00804034 	movhi	r2,256
1000b754:	10bfffc4 	addi	r2,r2,-1
1000b758:	11c10e2e 	bgeu	r2,r7,1000bb94 <__udivdi3+0x5a4>
1000b75c:	01400604 	movi	r5,24
1000b760:	2811883a 	mov	r8,r5
1000b764:	394ad83a 	srl	r5,r7,r5
1000b768:	00840074 	movhi	r2,4097
1000b76c:	10877004 	addi	r2,r2,7616
1000b770:	114b883a 	add	r5,r2,r5
1000b774:	29400003 	ldbu	r5,0(r5)
1000b778:	00c00804 	movi	r3,32
1000b77c:	2a0b883a 	add	r5,r5,r8
1000b780:	196fc83a 	sub	r23,r3,r5
1000b784:	b8006b1e 	bne	r23,zero,1000b934 <__udivdi3+0x344>
1000b788:	3c011436 	bltu	r7,r16,1000bbdc <__udivdi3+0x5ec>
1000b78c:	9985403a 	cmpgeu	r2,r19,r6
1000b790:	0007883a 	mov	r3,zero
1000b794:	00004b06 	br	1000b8c4 <__udivdi3+0x2d4>
1000b798:	3000041e 	bne	r6,zero,1000b7ac <__udivdi3+0x1bc>
1000b79c:	01000044 	movi	r4,1
1000b7a0:	000b883a 	mov	r5,zero
1000b7a4:	000c3680 	call	1000c368 <__udivsi3>
1000b7a8:	1025883a 	mov	r18,r2
1000b7ac:	00bfffd4 	movui	r2,65535
1000b7b0:	14805b2e 	bgeu	r2,r18,1000b920 <__udivdi3+0x330>
1000b7b4:	00804034 	movhi	r2,256
1000b7b8:	10bfffc4 	addi	r2,r2,-1
1000b7bc:	1480fe2e 	bgeu	r2,r18,1000bbb8 <__udivdi3+0x5c8>
1000b7c0:	00800604 	movi	r2,24
1000b7c4:	1007883a 	mov	r3,r2
1000b7c8:	9084d83a 	srl	r2,r18,r2
1000b7cc:	01040074 	movhi	r4,4097
1000b7d0:	21077004 	addi	r4,r4,7616
1000b7d4:	2085883a 	add	r2,r4,r2
1000b7d8:	11800003 	ldbu	r6,0(r2)
1000b7dc:	01c00804 	movi	r7,32
1000b7e0:	30c7883a 	add	r3,r6,r3
1000b7e4:	38cfc83a 	sub	r7,r7,r3
1000b7e8:	3800a71e 	bne	r7,zero,1000ba88 <__udivdi3+0x498>
1000b7ec:	9028d43a 	srli	r20,r18,16
1000b7f0:	84a1c83a 	sub	r16,r16,r18
1000b7f4:	957fffcc 	andi	r21,r18,65535
1000b7f8:	00c00044 	movi	r3,1
1000b7fc:	8009883a 	mov	r4,r16
1000b800:	a00b883a 	mov	r5,r20
1000b804:	d8c00015 	stw	r3,0(sp)
1000b808:	000c3700 	call	1000c370 <__umodsi3>
1000b80c:	8009883a 	mov	r4,r16
1000b810:	a00b883a 	mov	r5,r20
1000b814:	102d883a 	mov	r22,r2
1000b818:	000c3680 	call	1000c368 <__udivsi3>
1000b81c:	1009883a 	mov	r4,r2
1000b820:	a80b883a 	mov	r5,r21
1000b824:	1021883a 	mov	r16,r2
1000b828:	000c3780 	call	1000c378 <__mulsi3>
1000b82c:	b02c943a 	slli	r22,r22,16
1000b830:	880ed43a 	srli	r7,r17,16
1000b834:	d8c00017 	ldw	r3,0(sp)
1000b838:	b1ccb03a 	or	r6,r22,r7
1000b83c:	3080052e 	bgeu	r6,r2,1000b854 <__udivdi3+0x264>
1000b840:	348d883a 	add	r6,r6,r18
1000b844:	813fffc4 	addi	r4,r16,-1
1000b848:	34800136 	bltu	r6,r18,1000b850 <__udivdi3+0x260>
1000b84c:	3080f236 	bltu	r6,r2,1000bc18 <__udivdi3+0x628>
1000b850:	2021883a 	mov	r16,r4
1000b854:	30a7c83a 	sub	r19,r6,r2
1000b858:	9809883a 	mov	r4,r19
1000b85c:	a00b883a 	mov	r5,r20
1000b860:	d8c00015 	stw	r3,0(sp)
1000b864:	000c3700 	call	1000c370 <__umodsi3>
1000b868:	102d883a 	mov	r22,r2
1000b86c:	9809883a 	mov	r4,r19
1000b870:	a00b883a 	mov	r5,r20
1000b874:	b02c943a 	slli	r22,r22,16
1000b878:	000c3680 	call	1000c368 <__udivsi3>
1000b87c:	1009883a 	mov	r4,r2
1000b880:	a80b883a 	mov	r5,r21
1000b884:	8c7fffcc 	andi	r17,r17,65535
1000b888:	1027883a 	mov	r19,r2
1000b88c:	b462b03a 	or	r17,r22,r17
1000b890:	000c3780 	call	1000c378 <__mulsi3>
1000b894:	d8c00017 	ldw	r3,0(sp)
1000b898:	8880052e 	bgeu	r17,r2,1000b8b0 <__udivdi3+0x2c0>
1000b89c:	8ca3883a 	add	r17,r17,r18
1000b8a0:	993fffc4 	addi	r4,r19,-1
1000b8a4:	8c80af36 	bltu	r17,r18,1000bb64 <__udivdi3+0x574>
1000b8a8:	8880ae2e 	bgeu	r17,r2,1000bb64 <__udivdi3+0x574>
1000b8ac:	9cffff84 	addi	r19,r19,-2
1000b8b0:	8020943a 	slli	r16,r16,16
1000b8b4:	9c04b03a 	or	r2,r19,r16
1000b8b8:	00000206 	br	1000b8c4 <__udivdi3+0x2d4>
1000b8bc:	0007883a 	mov	r3,zero
1000b8c0:	0005883a 	mov	r2,zero
1000b8c4:	dfc00a17 	ldw	ra,40(sp)
1000b8c8:	df000917 	ldw	fp,36(sp)
1000b8cc:	ddc00817 	ldw	r23,32(sp)
1000b8d0:	dd800717 	ldw	r22,28(sp)
1000b8d4:	dd400617 	ldw	r21,24(sp)
1000b8d8:	dd000517 	ldw	r20,20(sp)
1000b8dc:	dcc00417 	ldw	r19,16(sp)
1000b8e0:	dc800317 	ldw	r18,12(sp)
1000b8e4:	dc400217 	ldw	r17,8(sp)
1000b8e8:	dc000117 	ldw	r16,4(sp)
1000b8ec:	dec00b04 	addi	sp,sp,44
1000b8f0:	f800283a 	ret
1000b8f4:	00803fc4 	movi	r2,255
1000b8f8:	11c0a92e 	bgeu	r2,r7,1000bba0 <__udivdi3+0x5b0>
1000b8fc:	01400204 	movi	r5,8
1000b900:	2811883a 	mov	r8,r5
1000b904:	003f9706 	br	1000b764 <__alt_data_end+0xf800b764>
1000b908:	00804034 	movhi	r2,256
1000b90c:	10bfffc4 	addi	r2,r2,-1
1000b910:	1180a62e 	bgeu	r2,r6,1000bbac <__udivdi3+0x5bc>
1000b914:	00800604 	movi	r2,24
1000b918:	1007883a 	mov	r3,r2
1000b91c:	003f4c06 	br	1000b650 <__alt_data_end+0xf800b650>
1000b920:	00803fc4 	movi	r2,255
1000b924:	1480a72e 	bgeu	r2,r18,1000bbc4 <__udivdi3+0x5d4>
1000b928:	00800204 	movi	r2,8
1000b92c:	1007883a 	mov	r3,r2
1000b930:	003fa506 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000b934:	3178d83a 	srl	fp,r6,r5
1000b938:	3dce983a 	sll	r7,r7,r23
1000b93c:	8168d83a 	srl	r20,r16,r5
1000b940:	9950d83a 	srl	r8,r19,r5
1000b944:	3f38b03a 	or	fp,r7,fp
1000b948:	e024d43a 	srli	r18,fp,16
1000b94c:	85e0983a 	sll	r16,r16,r23
1000b950:	a009883a 	mov	r4,r20
1000b954:	900b883a 	mov	r5,r18
1000b958:	8220b03a 	or	r16,r16,r8
1000b95c:	35ea983a 	sll	r21,r6,r23
1000b960:	000c3700 	call	1000c370 <__umodsi3>
1000b964:	a009883a 	mov	r4,r20
1000b968:	900b883a 	mov	r5,r18
1000b96c:	1023883a 	mov	r17,r2
1000b970:	e5bfffcc 	andi	r22,fp,65535
1000b974:	000c3680 	call	1000c368 <__udivsi3>
1000b978:	1009883a 	mov	r4,r2
1000b97c:	b00b883a 	mov	r5,r22
1000b980:	1029883a 	mov	r20,r2
1000b984:	000c3780 	call	1000c378 <__mulsi3>
1000b988:	8806943a 	slli	r3,r17,16
1000b98c:	8014d43a 	srli	r10,r16,16
1000b990:	1a92b03a 	or	r9,r3,r10
1000b994:	4880042e 	bgeu	r9,r2,1000b9a8 <__udivdi3+0x3b8>
1000b998:	4f13883a 	add	r9,r9,fp
1000b99c:	a0ffffc4 	addi	r3,r20,-1
1000b9a0:	4f00952e 	bgeu	r9,fp,1000bbf8 <__udivdi3+0x608>
1000b9a4:	1829883a 	mov	r20,r3
1000b9a8:	48a3c83a 	sub	r17,r9,r2
1000b9ac:	8809883a 	mov	r4,r17
1000b9b0:	900b883a 	mov	r5,r18
1000b9b4:	000c3700 	call	1000c370 <__umodsi3>
1000b9b8:	8809883a 	mov	r4,r17
1000b9bc:	900b883a 	mov	r5,r18
1000b9c0:	d8800015 	stw	r2,0(sp)
1000b9c4:	000c3680 	call	1000c368 <__udivsi3>
1000b9c8:	1009883a 	mov	r4,r2
1000b9cc:	b00b883a 	mov	r5,r22
1000b9d0:	1023883a 	mov	r17,r2
1000b9d4:	000c3780 	call	1000c378 <__mulsi3>
1000b9d8:	d8c00017 	ldw	r3,0(sp)
1000b9dc:	823fffcc 	andi	r8,r16,65535
1000b9e0:	1806943a 	slli	r3,r3,16
1000b9e4:	1a20b03a 	or	r16,r3,r8
1000b9e8:	8080042e 	bgeu	r16,r2,1000b9fc <__udivdi3+0x40c>
1000b9ec:	8721883a 	add	r16,r16,fp
1000b9f0:	88ffffc4 	addi	r3,r17,-1
1000b9f4:	87007c2e 	bgeu	r16,fp,1000bbe8 <__udivdi3+0x5f8>
1000b9f8:	1823883a 	mov	r17,r3
1000b9fc:	a028943a 	slli	r20,r20,16
1000ba00:	acbfffcc 	andi	r18,r21,65535
1000ba04:	900b883a 	mov	r5,r18
1000ba08:	8d28b03a 	or	r20,r17,r20
1000ba0c:	a022d43a 	srli	r17,r20,16
1000ba10:	a5bfffcc 	andi	r22,r20,65535
1000ba14:	b009883a 	mov	r4,r22
1000ba18:	a82ad43a 	srli	r21,r21,16
1000ba1c:	80a1c83a 	sub	r16,r16,r2
1000ba20:	000c3780 	call	1000c378 <__mulsi3>
1000ba24:	8809883a 	mov	r4,r17
1000ba28:	900b883a 	mov	r5,r18
1000ba2c:	1039883a 	mov	fp,r2
1000ba30:	000c3780 	call	1000c378 <__mulsi3>
1000ba34:	8809883a 	mov	r4,r17
1000ba38:	a80b883a 	mov	r5,r21
1000ba3c:	1025883a 	mov	r18,r2
1000ba40:	000c3780 	call	1000c378 <__mulsi3>
1000ba44:	b009883a 	mov	r4,r22
1000ba48:	a80b883a 	mov	r5,r21
1000ba4c:	1023883a 	mov	r17,r2
1000ba50:	000c3780 	call	1000c378 <__mulsi3>
1000ba54:	e006d43a 	srli	r3,fp,16
1000ba58:	9085883a 	add	r2,r18,r2
1000ba5c:	10c7883a 	add	r3,r2,r3
1000ba60:	1c80022e 	bgeu	r3,r18,1000ba6c <__udivdi3+0x47c>
1000ba64:	00800074 	movhi	r2,1
1000ba68:	88a3883a 	add	r17,r17,r2
1000ba6c:	1808d43a 	srli	r4,r3,16
1000ba70:	8909883a 	add	r4,r17,r4
1000ba74:	81004436 	bltu	r16,r4,1000bb88 <__udivdi3+0x598>
1000ba78:	81003e26 	beq	r16,r4,1000bb74 <__udivdi3+0x584>
1000ba7c:	a005883a 	mov	r2,r20
1000ba80:	0007883a 	mov	r3,zero
1000ba84:	003f8f06 	br	1000b8c4 <__alt_data_end+0xf800b8c4>
1000ba88:	91e4983a 	sll	r18,r18,r7
1000ba8c:	80eed83a 	srl	r23,r16,r3
1000ba90:	81cc983a 	sll	r6,r16,r7
1000ba94:	9028d43a 	srli	r20,r18,16
1000ba98:	98c6d83a 	srl	r3,r19,r3
1000ba9c:	b809883a 	mov	r4,r23
1000baa0:	a00b883a 	mov	r5,r20
1000baa4:	30ecb03a 	or	r22,r6,r3
1000baa8:	99e2983a 	sll	r17,r19,r7
1000baac:	000c3700 	call	1000c370 <__umodsi3>
1000bab0:	b809883a 	mov	r4,r23
1000bab4:	a00b883a 	mov	r5,r20
1000bab8:	1021883a 	mov	r16,r2
1000babc:	957fffcc 	andi	r21,r18,65535
1000bac0:	000c3680 	call	1000c368 <__udivsi3>
1000bac4:	a80b883a 	mov	r5,r21
1000bac8:	1009883a 	mov	r4,r2
1000bacc:	102f883a 	mov	r23,r2
1000bad0:	000c3780 	call	1000c378 <__mulsi3>
1000bad4:	8020943a 	slli	r16,r16,16
1000bad8:	b00ad43a 	srli	r5,r22,16
1000badc:	814cb03a 	or	r6,r16,r5
1000bae0:	3080062e 	bgeu	r6,r2,1000bafc <__udivdi3+0x50c>
1000bae4:	348d883a 	add	r6,r6,r18
1000bae8:	b8ffffc4 	addi	r3,r23,-1
1000baec:	34804836 	bltu	r6,r18,1000bc10 <__udivdi3+0x620>
1000baf0:	3080472e 	bgeu	r6,r2,1000bc10 <__udivdi3+0x620>
1000baf4:	bdffff84 	addi	r23,r23,-2
1000baf8:	348d883a 	add	r6,r6,r18
1000bafc:	30a7c83a 	sub	r19,r6,r2
1000bb00:	9809883a 	mov	r4,r19
1000bb04:	a00b883a 	mov	r5,r20
1000bb08:	000c3700 	call	1000c370 <__umodsi3>
1000bb0c:	9809883a 	mov	r4,r19
1000bb10:	a00b883a 	mov	r5,r20
1000bb14:	1039883a 	mov	fp,r2
1000bb18:	000c3680 	call	1000c368 <__udivsi3>
1000bb1c:	1009883a 	mov	r4,r2
1000bb20:	a80b883a 	mov	r5,r21
1000bb24:	e038943a 	slli	fp,fp,16
1000bb28:	1027883a 	mov	r19,r2
1000bb2c:	000c3780 	call	1000c378 <__mulsi3>
1000bb30:	b1bfffcc 	andi	r6,r22,65535
1000bb34:	e18cb03a 	or	r6,fp,r6
1000bb38:	3080062e 	bgeu	r6,r2,1000bb54 <__udivdi3+0x564>
1000bb3c:	348d883a 	add	r6,r6,r18
1000bb40:	98ffffc4 	addi	r3,r19,-1
1000bb44:	34803036 	bltu	r6,r18,1000bc08 <__udivdi3+0x618>
1000bb48:	30802f2e 	bgeu	r6,r2,1000bc08 <__udivdi3+0x618>
1000bb4c:	9cffff84 	addi	r19,r19,-2
1000bb50:	348d883a 	add	r6,r6,r18
1000bb54:	b82e943a 	slli	r23,r23,16
1000bb58:	30a1c83a 	sub	r16,r6,r2
1000bb5c:	9dc6b03a 	or	r3,r19,r23
1000bb60:	003f2606 	br	1000b7fc <__alt_data_end+0xf800b7fc>
1000bb64:	2027883a 	mov	r19,r4
1000bb68:	003f5106 	br	1000b8b0 <__alt_data_end+0xf800b8b0>
1000bb6c:	1827883a 	mov	r19,r3
1000bb70:	003ef006 	br	1000b734 <__alt_data_end+0xf800b734>
1000bb74:	1808943a 	slli	r4,r3,16
1000bb78:	9dc6983a 	sll	r3,r19,r23
1000bb7c:	e73fffcc 	andi	fp,fp,65535
1000bb80:	2709883a 	add	r4,r4,fp
1000bb84:	193fbd2e 	bgeu	r3,r4,1000ba7c <__alt_data_end+0xf800ba7c>
1000bb88:	a0bfffc4 	addi	r2,r20,-1
1000bb8c:	0007883a 	mov	r3,zero
1000bb90:	003f4c06 	br	1000b8c4 <__alt_data_end+0xf800b8c4>
1000bb94:	01400404 	movi	r5,16
1000bb98:	2811883a 	mov	r8,r5
1000bb9c:	003ef106 	br	1000b764 <__alt_data_end+0xf800b764>
1000bba0:	000b883a 	mov	r5,zero
1000bba4:	0011883a 	mov	r8,zero
1000bba8:	003eee06 	br	1000b764 <__alt_data_end+0xf800b764>
1000bbac:	00800404 	movi	r2,16
1000bbb0:	1007883a 	mov	r3,r2
1000bbb4:	003ea606 	br	1000b650 <__alt_data_end+0xf800b650>
1000bbb8:	00800404 	movi	r2,16
1000bbbc:	1007883a 	mov	r3,r2
1000bbc0:	003f0106 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000bbc4:	0005883a 	mov	r2,zero
1000bbc8:	0007883a 	mov	r3,zero
1000bbcc:	003efe06 	br	1000b7c8 <__alt_data_end+0xf800b7c8>
1000bbd0:	0005883a 	mov	r2,zero
1000bbd4:	0007883a 	mov	r3,zero
1000bbd8:	003e9d06 	br	1000b650 <__alt_data_end+0xf800b650>
1000bbdc:	0007883a 	mov	r3,zero
1000bbe0:	00800044 	movi	r2,1
1000bbe4:	003f3706 	br	1000b8c4 <__alt_data_end+0xf800b8c4>
1000bbe8:	80bf832e 	bgeu	r16,r2,1000b9f8 <__alt_data_end+0xf800b9f8>
1000bbec:	8c7fff84 	addi	r17,r17,-2
1000bbf0:	8721883a 	add	r16,r16,fp
1000bbf4:	003f8106 	br	1000b9fc <__alt_data_end+0xf800b9fc>
1000bbf8:	48bf6a2e 	bgeu	r9,r2,1000b9a4 <__alt_data_end+0xf800b9a4>
1000bbfc:	a53fff84 	addi	r20,r20,-2
1000bc00:	4f13883a 	add	r9,r9,fp
1000bc04:	003f6806 	br	1000b9a8 <__alt_data_end+0xf800b9a8>
1000bc08:	1827883a 	mov	r19,r3
1000bc0c:	003fd106 	br	1000bb54 <__alt_data_end+0xf800bb54>
1000bc10:	182f883a 	mov	r23,r3
1000bc14:	003fb906 	br	1000bafc <__alt_data_end+0xf800bafc>
1000bc18:	843fff84 	addi	r16,r16,-2
1000bc1c:	348d883a 	add	r6,r6,r18
1000bc20:	003f0c06 	br	1000b854 <__alt_data_end+0xf800b854>
1000bc24:	843fff84 	addi	r16,r16,-2
1000bc28:	1c87883a 	add	r3,r3,r18
1000bc2c:	003eac06 	br	1000b6e0 <__alt_data_end+0xf800b6e0>

1000bc30 <__umoddi3>:
1000bc30:	defff404 	addi	sp,sp,-48
1000bc34:	dd800815 	stw	r22,32(sp)
1000bc38:	dc400315 	stw	r17,12(sp)
1000bc3c:	dc000215 	stw	r16,8(sp)
1000bc40:	dfc00b15 	stw	ra,44(sp)
1000bc44:	df000a15 	stw	fp,40(sp)
1000bc48:	ddc00915 	stw	r23,36(sp)
1000bc4c:	dd400715 	stw	r21,28(sp)
1000bc50:	dd000615 	stw	r20,24(sp)
1000bc54:	dcc00515 	stw	r19,20(sp)
1000bc58:	dc800415 	stw	r18,16(sp)
1000bc5c:	2021883a 	mov	r16,r4
1000bc60:	2823883a 	mov	r17,r5
1000bc64:	282d883a 	mov	r22,r5
1000bc68:	38003c1e 	bne	r7,zero,1000bd5c <__umoddi3+0x12c>
1000bc6c:	3027883a 	mov	r19,r6
1000bc70:	2029883a 	mov	r20,r4
1000bc74:	2980522e 	bgeu	r5,r6,1000bdc0 <__umoddi3+0x190>
1000bc78:	00bfffd4 	movui	r2,65535
1000bc7c:	1180a436 	bltu	r2,r6,1000bf10 <__umoddi3+0x2e0>
1000bc80:	00803fc4 	movi	r2,255
1000bc84:	11815e2e 	bgeu	r2,r6,1000c200 <__umoddi3+0x5d0>
1000bc88:	01400204 	movi	r5,8
1000bc8c:	2805883a 	mov	r2,r5
1000bc90:	314ad83a 	srl	r5,r6,r5
1000bc94:	00c40074 	movhi	r3,4097
1000bc98:	18c77004 	addi	r3,r3,7616
1000bc9c:	194b883a 	add	r5,r3,r5
1000bca0:	29000003 	ldbu	r4,0(r5)
1000bca4:	2089883a 	add	r4,r4,r2
1000bca8:	00800804 	movi	r2,32
1000bcac:	1105c83a 	sub	r2,r2,r4
1000bcb0:	10010c26 	beq	r2,zero,1000c0e4 <__umoddi3+0x4b4>
1000bcb4:	88a2983a 	sll	r17,r17,r2
1000bcb8:	8108d83a 	srl	r4,r16,r4
1000bcbc:	30a6983a 	sll	r19,r6,r2
1000bcc0:	80a8983a 	sll	r20,r16,r2
1000bcc4:	1025883a 	mov	r18,r2
1000bcc8:	892cb03a 	or	r22,r17,r4
1000bccc:	9822d43a 	srli	r17,r19,16
1000bcd0:	b009883a 	mov	r4,r22
1000bcd4:	9d7fffcc 	andi	r21,r19,65535
1000bcd8:	880b883a 	mov	r5,r17
1000bcdc:	000c3700 	call	1000c370 <__umodsi3>
1000bce0:	b009883a 	mov	r4,r22
1000bce4:	880b883a 	mov	r5,r17
1000bce8:	102f883a 	mov	r23,r2
1000bcec:	000c3680 	call	1000c368 <__udivsi3>
1000bcf0:	1009883a 	mov	r4,r2
1000bcf4:	a80b883a 	mov	r5,r21
1000bcf8:	000c3780 	call	1000c378 <__mulsi3>
1000bcfc:	b82e943a 	slli	r23,r23,16
1000bd00:	a008d43a 	srli	r4,r20,16
1000bd04:	b906b03a 	or	r3,r23,r4
1000bd08:	1880042e 	bgeu	r3,r2,1000bd1c <__umoddi3+0xec>
1000bd0c:	1cc7883a 	add	r3,r3,r19
1000bd10:	1cc00236 	bltu	r3,r19,1000bd1c <__umoddi3+0xec>
1000bd14:	1880012e 	bgeu	r3,r2,1000bd1c <__umoddi3+0xec>
1000bd18:	1cc7883a 	add	r3,r3,r19
1000bd1c:	18a1c83a 	sub	r16,r3,r2
1000bd20:	8009883a 	mov	r4,r16
1000bd24:	880b883a 	mov	r5,r17
1000bd28:	000c3700 	call	1000c370 <__umodsi3>
1000bd2c:	8009883a 	mov	r4,r16
1000bd30:	880b883a 	mov	r5,r17
1000bd34:	102d883a 	mov	r22,r2
1000bd38:	000c3680 	call	1000c368 <__udivsi3>
1000bd3c:	1009883a 	mov	r4,r2
1000bd40:	a80b883a 	mov	r5,r21
1000bd44:	b02c943a 	slli	r22,r22,16
1000bd48:	000c3780 	call	1000c378 <__mulsi3>
1000bd4c:	a13fffcc 	andi	r4,r20,65535
1000bd50:	b106b03a 	or	r3,r22,r4
1000bd54:	1880572e 	bgeu	r3,r2,1000beb4 <__umoddi3+0x284>
1000bd58:	00005206 	br	1000bea4 <__umoddi3+0x274>
1000bd5c:	29c05936 	bltu	r5,r7,1000bec4 <__umoddi3+0x294>
1000bd60:	00bfffd4 	movui	r2,65535
1000bd64:	11c0652e 	bgeu	r2,r7,1000befc <__umoddi3+0x2cc>
1000bd68:	00804034 	movhi	r2,256
1000bd6c:	10bfffc4 	addi	r2,r2,-1
1000bd70:	11c1172e 	bgeu	r2,r7,1000c1d0 <__umoddi3+0x5a0>
1000bd74:	01400604 	movi	r5,24
1000bd78:	282b883a 	mov	r21,r5
1000bd7c:	394ad83a 	srl	r5,r7,r5
1000bd80:	00c40074 	movhi	r3,4097
1000bd84:	18c77004 	addi	r3,r3,7616
1000bd88:	194b883a 	add	r5,r3,r5
1000bd8c:	28800003 	ldbu	r2,0(r5)
1000bd90:	00c00804 	movi	r3,32
1000bd94:	156b883a 	add	r21,r2,r21
1000bd98:	1d69c83a 	sub	r20,r3,r21
1000bd9c:	a000671e 	bne	r20,zero,1000bf3c <__umoddi3+0x30c>
1000bda0:	3c400136 	bltu	r7,r17,1000bda8 <__umoddi3+0x178>
1000bda4:	81812336 	bltu	r16,r6,1000c234 <__umoddi3+0x604>
1000bda8:	8185c83a 	sub	r2,r16,r6
1000bdac:	89e3c83a 	sub	r17,r17,r7
1000bdb0:	8087803a 	cmpltu	r3,r16,r2
1000bdb4:	88edc83a 	sub	r22,r17,r3
1000bdb8:	b007883a 	mov	r3,r22
1000bdbc:	00004306 	br	1000becc <__umoddi3+0x29c>
1000bdc0:	3000041e 	bne	r6,zero,1000bdd4 <__umoddi3+0x1a4>
1000bdc4:	01000044 	movi	r4,1
1000bdc8:	000b883a 	mov	r5,zero
1000bdcc:	000c3680 	call	1000c368 <__udivsi3>
1000bdd0:	1027883a 	mov	r19,r2
1000bdd4:	00bfffd4 	movui	r2,65535
1000bdd8:	14c0532e 	bgeu	r2,r19,1000bf28 <__umoddi3+0x2f8>
1000bddc:	00804034 	movhi	r2,256
1000bde0:	10bfffc4 	addi	r2,r2,-1
1000bde4:	14c1032e 	bgeu	r2,r19,1000c1f4 <__umoddi3+0x5c4>
1000bde8:	00800604 	movi	r2,24
1000bdec:	1007883a 	mov	r3,r2
1000bdf0:	9884d83a 	srl	r2,r19,r2
1000bdf4:	01040074 	movhi	r4,4097
1000bdf8:	21077004 	addi	r4,r4,7616
1000bdfc:	2085883a 	add	r2,r4,r2
1000be00:	11000003 	ldbu	r4,0(r2)
1000be04:	00800804 	movi	r2,32
1000be08:	20c7883a 	add	r3,r4,r3
1000be0c:	10c5c83a 	sub	r2,r2,r3
1000be10:	1000b61e 	bne	r2,zero,1000c0ec <__umoddi3+0x4bc>
1000be14:	982ad43a 	srli	r21,r19,16
1000be18:	8ce3c83a 	sub	r17,r17,r19
1000be1c:	9dbfffcc 	andi	r22,r19,65535
1000be20:	0025883a 	mov	r18,zero
1000be24:	8809883a 	mov	r4,r17
1000be28:	a80b883a 	mov	r5,r21
1000be2c:	000c3700 	call	1000c370 <__umodsi3>
1000be30:	8809883a 	mov	r4,r17
1000be34:	a80b883a 	mov	r5,r21
1000be38:	102f883a 	mov	r23,r2
1000be3c:	000c3680 	call	1000c368 <__udivsi3>
1000be40:	1009883a 	mov	r4,r2
1000be44:	b00b883a 	mov	r5,r22
1000be48:	000c3780 	call	1000c378 <__mulsi3>
1000be4c:	b82e943a 	slli	r23,r23,16
1000be50:	a008d43a 	srli	r4,r20,16
1000be54:	b906b03a 	or	r3,r23,r4
1000be58:	1880032e 	bgeu	r3,r2,1000be68 <__umoddi3+0x238>
1000be5c:	1cc7883a 	add	r3,r3,r19
1000be60:	1cc00136 	bltu	r3,r19,1000be68 <__umoddi3+0x238>
1000be64:	1880f136 	bltu	r3,r2,1000c22c <__umoddi3+0x5fc>
1000be68:	18a1c83a 	sub	r16,r3,r2
1000be6c:	8009883a 	mov	r4,r16
1000be70:	a80b883a 	mov	r5,r21
1000be74:	000c3700 	call	1000c370 <__umodsi3>
1000be78:	8009883a 	mov	r4,r16
1000be7c:	a80b883a 	mov	r5,r21
1000be80:	1023883a 	mov	r17,r2
1000be84:	000c3680 	call	1000c368 <__udivsi3>
1000be88:	1009883a 	mov	r4,r2
1000be8c:	b00b883a 	mov	r5,r22
1000be90:	8822943a 	slli	r17,r17,16
1000be94:	000c3780 	call	1000c378 <__mulsi3>
1000be98:	a13fffcc 	andi	r4,r20,65535
1000be9c:	8906b03a 	or	r3,r17,r4
1000bea0:	1880042e 	bgeu	r3,r2,1000beb4 <__umoddi3+0x284>
1000bea4:	1cc7883a 	add	r3,r3,r19
1000bea8:	1cc00236 	bltu	r3,r19,1000beb4 <__umoddi3+0x284>
1000beac:	1880012e 	bgeu	r3,r2,1000beb4 <__umoddi3+0x284>
1000beb0:	1cc7883a 	add	r3,r3,r19
1000beb4:	1887c83a 	sub	r3,r3,r2
1000beb8:	1c84d83a 	srl	r2,r3,r18
1000bebc:	0007883a 	mov	r3,zero
1000bec0:	00000206 	br	1000becc <__umoddi3+0x29c>
1000bec4:	2005883a 	mov	r2,r4
1000bec8:	2807883a 	mov	r3,r5
1000becc:	dfc00b17 	ldw	ra,44(sp)
1000bed0:	df000a17 	ldw	fp,40(sp)
1000bed4:	ddc00917 	ldw	r23,36(sp)
1000bed8:	dd800817 	ldw	r22,32(sp)
1000bedc:	dd400717 	ldw	r21,28(sp)
1000bee0:	dd000617 	ldw	r20,24(sp)
1000bee4:	dcc00517 	ldw	r19,20(sp)
1000bee8:	dc800417 	ldw	r18,16(sp)
1000beec:	dc400317 	ldw	r17,12(sp)
1000bef0:	dc000217 	ldw	r16,8(sp)
1000bef4:	dec00c04 	addi	sp,sp,48
1000bef8:	f800283a 	ret
1000befc:	00803fc4 	movi	r2,255
1000bf00:	11c0b02e 	bgeu	r2,r7,1000c1c4 <__umoddi3+0x594>
1000bf04:	01400204 	movi	r5,8
1000bf08:	282b883a 	mov	r21,r5
1000bf0c:	003f9b06 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000bf10:	00804034 	movhi	r2,256
1000bf14:	10bfffc4 	addi	r2,r2,-1
1000bf18:	1180b02e 	bgeu	r2,r6,1000c1dc <__umoddi3+0x5ac>
1000bf1c:	01400604 	movi	r5,24
1000bf20:	2805883a 	mov	r2,r5
1000bf24:	003f5a06 	br	1000bc90 <__alt_data_end+0xf800bc90>
1000bf28:	00803fc4 	movi	r2,255
1000bf2c:	14c0ae2e 	bgeu	r2,r19,1000c1e8 <__umoddi3+0x5b8>
1000bf30:	00800204 	movi	r2,8
1000bf34:	1007883a 	mov	r3,r2
1000bf38:	003fad06 	br	1000bdf0 <__alt_data_end+0xf800bdf0>
1000bf3c:	3d0a983a 	sll	r5,r7,r20
1000bf40:	356cd83a 	srl	r22,r6,r21
1000bf44:	8d78d83a 	srl	fp,r17,r21
1000bf48:	8d10983a 	sll	r8,r17,r20
1000bf4c:	2dacb03a 	or	r22,r5,r22
1000bf50:	b02ed43a 	srli	r23,r22,16
1000bf54:	8564d83a 	srl	r18,r16,r21
1000bf58:	e009883a 	mov	r4,fp
1000bf5c:	b80b883a 	mov	r5,r23
1000bf60:	44a4b03a 	or	r18,r8,r18
1000bf64:	3526983a 	sll	r19,r6,r20
1000bf68:	000c3700 	call	1000c370 <__umodsi3>
1000bf6c:	e009883a 	mov	r4,fp
1000bf70:	b80b883a 	mov	r5,r23
1000bf74:	b47fffcc 	andi	r17,r22,65535
1000bf78:	d8800015 	stw	r2,0(sp)
1000bf7c:	000c3680 	call	1000c368 <__udivsi3>
1000bf80:	1009883a 	mov	r4,r2
1000bf84:	880b883a 	mov	r5,r17
1000bf88:	1039883a 	mov	fp,r2
1000bf8c:	000c3780 	call	1000c378 <__mulsi3>
1000bf90:	d9800017 	ldw	r6,0(sp)
1000bf94:	9008d43a 	srli	r4,r18,16
1000bf98:	8520983a 	sll	r16,r16,r20
1000bf9c:	300c943a 	slli	r6,r6,16
1000bfa0:	3106b03a 	or	r3,r6,r4
1000bfa4:	1880042e 	bgeu	r3,r2,1000bfb8 <__umoddi3+0x388>
1000bfa8:	1d87883a 	add	r3,r3,r22
1000bfac:	e13fffc4 	addi	r4,fp,-1
1000bfb0:	1d809a2e 	bgeu	r3,r22,1000c21c <__umoddi3+0x5ec>
1000bfb4:	2039883a 	mov	fp,r4
1000bfb8:	1887c83a 	sub	r3,r3,r2
1000bfbc:	1809883a 	mov	r4,r3
1000bfc0:	b80b883a 	mov	r5,r23
1000bfc4:	d8c00115 	stw	r3,4(sp)
1000bfc8:	000c3700 	call	1000c370 <__umodsi3>
1000bfcc:	d8c00117 	ldw	r3,4(sp)
1000bfd0:	b80b883a 	mov	r5,r23
1000bfd4:	d8800015 	stw	r2,0(sp)
1000bfd8:	1809883a 	mov	r4,r3
1000bfdc:	000c3680 	call	1000c368 <__udivsi3>
1000bfe0:	880b883a 	mov	r5,r17
1000bfe4:	1009883a 	mov	r4,r2
1000bfe8:	102f883a 	mov	r23,r2
1000bfec:	000c3780 	call	1000c378 <__mulsi3>
1000bff0:	d9800017 	ldw	r6,0(sp)
1000bff4:	947fffcc 	andi	r17,r18,65535
1000bff8:	300c943a 	slli	r6,r6,16
1000bffc:	3464b03a 	or	r18,r6,r17
1000c000:	9080042e 	bgeu	r18,r2,1000c014 <__umoddi3+0x3e4>
1000c004:	95a5883a 	add	r18,r18,r22
1000c008:	b8ffffc4 	addi	r3,r23,-1
1000c00c:	95807f2e 	bgeu	r18,r22,1000c20c <__umoddi3+0x5dc>
1000c010:	182f883a 	mov	r23,r3
1000c014:	e038943a 	slli	fp,fp,16
1000c018:	980cd43a 	srli	r6,r19,16
1000c01c:	98ffffcc 	andi	r3,r19,65535
1000c020:	bf38b03a 	or	fp,r23,fp
1000c024:	e02ed43a 	srli	r23,fp,16
1000c028:	e73fffcc 	andi	fp,fp,65535
1000c02c:	180b883a 	mov	r5,r3
1000c030:	e009883a 	mov	r4,fp
1000c034:	d9800015 	stw	r6,0(sp)
1000c038:	d8c00115 	stw	r3,4(sp)
1000c03c:	90a5c83a 	sub	r18,r18,r2
1000c040:	000c3780 	call	1000c378 <__mulsi3>
1000c044:	d8c00117 	ldw	r3,4(sp)
1000c048:	b809883a 	mov	r4,r23
1000c04c:	1023883a 	mov	r17,r2
1000c050:	180b883a 	mov	r5,r3
1000c054:	000c3780 	call	1000c378 <__mulsi3>
1000c058:	d9800017 	ldw	r6,0(sp)
1000c05c:	b809883a 	mov	r4,r23
1000c060:	d8800115 	stw	r2,4(sp)
1000c064:	300b883a 	mov	r5,r6
1000c068:	302f883a 	mov	r23,r6
1000c06c:	000c3780 	call	1000c378 <__mulsi3>
1000c070:	e009883a 	mov	r4,fp
1000c074:	b80b883a 	mov	r5,r23
1000c078:	d8800015 	stw	r2,0(sp)
1000c07c:	000c3780 	call	1000c378 <__mulsi3>
1000c080:	d8c00117 	ldw	r3,4(sp)
1000c084:	880cd43a 	srli	r6,r17,16
1000c088:	d9c00017 	ldw	r7,0(sp)
1000c08c:	1885883a 	add	r2,r3,r2
1000c090:	118d883a 	add	r6,r2,r6
1000c094:	30c0022e 	bgeu	r6,r3,1000c0a0 <__umoddi3+0x470>
1000c098:	00800074 	movhi	r2,1
1000c09c:	388f883a 	add	r7,r7,r2
1000c0a0:	3006d43a 	srli	r3,r6,16
1000c0a4:	300c943a 	slli	r6,r6,16
1000c0a8:	8c7fffcc 	andi	r17,r17,65535
1000c0ac:	38c7883a 	add	r3,r7,r3
1000c0b0:	3463883a 	add	r17,r6,r17
1000c0b4:	90c03d36 	bltu	r18,r3,1000c1ac <__umoddi3+0x57c>
1000c0b8:	90c06026 	beq	r18,r3,1000c23c <__umoddi3+0x60c>
1000c0bc:	90c9c83a 	sub	r4,r18,r3
1000c0c0:	880f883a 	mov	r7,r17
1000c0c4:	81cfc83a 	sub	r7,r16,r7
1000c0c8:	81c7803a 	cmpltu	r3,r16,r7
1000c0cc:	20c7c83a 	sub	r3,r4,r3
1000c0d0:	1d44983a 	sll	r2,r3,r21
1000c0d4:	3d0ed83a 	srl	r7,r7,r20
1000c0d8:	1d06d83a 	srl	r3,r3,r20
1000c0dc:	11c4b03a 	or	r2,r2,r7
1000c0e0:	003f7a06 	br	1000becc <__alt_data_end+0xf800becc>
1000c0e4:	0025883a 	mov	r18,zero
1000c0e8:	003ef806 	br	1000bccc <__alt_data_end+0xf800bccc>
1000c0ec:	98a6983a 	sll	r19,r19,r2
1000c0f0:	88e8d83a 	srl	r20,r17,r3
1000c0f4:	80c6d83a 	srl	r3,r16,r3
1000c0f8:	982ad43a 	srli	r21,r19,16
1000c0fc:	88a2983a 	sll	r17,r17,r2
1000c100:	a009883a 	mov	r4,r20
1000c104:	a80b883a 	mov	r5,r21
1000c108:	88eeb03a 	or	r23,r17,r3
1000c10c:	1025883a 	mov	r18,r2
1000c110:	000c3700 	call	1000c370 <__umodsi3>
1000c114:	a009883a 	mov	r4,r20
1000c118:	a80b883a 	mov	r5,r21
1000c11c:	1023883a 	mov	r17,r2
1000c120:	9dbfffcc 	andi	r22,r19,65535
1000c124:	000c3680 	call	1000c368 <__udivsi3>
1000c128:	1009883a 	mov	r4,r2
1000c12c:	b00b883a 	mov	r5,r22
1000c130:	000c3780 	call	1000c378 <__mulsi3>
1000c134:	8822943a 	slli	r17,r17,16
1000c138:	b808d43a 	srli	r4,r23,16
1000c13c:	84a8983a 	sll	r20,r16,r18
1000c140:	8906b03a 	or	r3,r17,r4
1000c144:	1880042e 	bgeu	r3,r2,1000c158 <__umoddi3+0x528>
1000c148:	1cc7883a 	add	r3,r3,r19
1000c14c:	1cc00236 	bltu	r3,r19,1000c158 <__umoddi3+0x528>
1000c150:	1880012e 	bgeu	r3,r2,1000c158 <__umoddi3+0x528>
1000c154:	1cc7883a 	add	r3,r3,r19
1000c158:	18a1c83a 	sub	r16,r3,r2
1000c15c:	8009883a 	mov	r4,r16
1000c160:	a80b883a 	mov	r5,r21
1000c164:	000c3700 	call	1000c370 <__umodsi3>
1000c168:	8009883a 	mov	r4,r16
1000c16c:	a80b883a 	mov	r5,r21
1000c170:	1039883a 	mov	fp,r2
1000c174:	000c3680 	call	1000c368 <__udivsi3>
1000c178:	1009883a 	mov	r4,r2
1000c17c:	b00b883a 	mov	r5,r22
1000c180:	000c3780 	call	1000c378 <__mulsi3>
1000c184:	e006943a 	slli	r3,fp,16
1000c188:	b93fffcc 	andi	r4,r23,65535
1000c18c:	1906b03a 	or	r3,r3,r4
1000c190:	1880042e 	bgeu	r3,r2,1000c1a4 <__umoddi3+0x574>
1000c194:	1cc7883a 	add	r3,r3,r19
1000c198:	1cc00236 	bltu	r3,r19,1000c1a4 <__umoddi3+0x574>
1000c19c:	1880012e 	bgeu	r3,r2,1000c1a4 <__umoddi3+0x574>
1000c1a0:	1cc7883a 	add	r3,r3,r19
1000c1a4:	18a3c83a 	sub	r17,r3,r2
1000c1a8:	003f1e06 	br	1000be24 <__alt_data_end+0xf800be24>
1000c1ac:	8ccfc83a 	sub	r7,r17,r19
1000c1b0:	1d89c83a 	sub	r4,r3,r22
1000c1b4:	89e3803a 	cmpltu	r17,r17,r7
1000c1b8:	2463c83a 	sub	r17,r4,r17
1000c1bc:	9449c83a 	sub	r4,r18,r17
1000c1c0:	003fc006 	br	1000c0c4 <__alt_data_end+0xf800c0c4>
1000c1c4:	000b883a 	mov	r5,zero
1000c1c8:	002b883a 	mov	r21,zero
1000c1cc:	003eeb06 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000c1d0:	01400404 	movi	r5,16
1000c1d4:	282b883a 	mov	r21,r5
1000c1d8:	003ee806 	br	1000bd7c <__alt_data_end+0xf800bd7c>
1000c1dc:	01400404 	movi	r5,16
1000c1e0:	2805883a 	mov	r2,r5
1000c1e4:	003eaa06 	br	1000bc90 <__alt_data_end+0xf800bc90>
1000c1e8:	0005883a 	mov	r2,zero
1000c1ec:	0007883a 	mov	r3,zero
1000c1f0:	003eff06 	br	1000bdf0 <__alt_data_end+0xf800bdf0>
1000c1f4:	00800404 	movi	r2,16
1000c1f8:	1007883a 	mov	r3,r2
1000c1fc:	003efc06 	br	1000bdf0 <__alt_data_end+0xf800bdf0>
1000c200:	000b883a 	mov	r5,zero
1000c204:	0005883a 	mov	r2,zero
1000c208:	003ea106 	br	1000bc90 <__alt_data_end+0xf800bc90>
1000c20c:	90bf802e 	bgeu	r18,r2,1000c010 <__alt_data_end+0xf800c010>
1000c210:	bdffff84 	addi	r23,r23,-2
1000c214:	95a5883a 	add	r18,r18,r22
1000c218:	003f7e06 	br	1000c014 <__alt_data_end+0xf800c014>
1000c21c:	18bf652e 	bgeu	r3,r2,1000bfb4 <__alt_data_end+0xf800bfb4>
1000c220:	e73fff84 	addi	fp,fp,-2
1000c224:	1d87883a 	add	r3,r3,r22
1000c228:	003f6306 	br	1000bfb8 <__alt_data_end+0xf800bfb8>
1000c22c:	1cc7883a 	add	r3,r3,r19
1000c230:	003f0d06 	br	1000be68 <__alt_data_end+0xf800be68>
1000c234:	8005883a 	mov	r2,r16
1000c238:	003edf06 	br	1000bdb8 <__alt_data_end+0xf800bdb8>
1000c23c:	847fdb36 	bltu	r16,r17,1000c1ac <__alt_data_end+0xf800c1ac>
1000c240:	880f883a 	mov	r7,r17
1000c244:	0009883a 	mov	r4,zero
1000c248:	003f9e06 	br	1000c0c4 <__alt_data_end+0xf800c0c4>

1000c24c <udivmodsi4>:
1000c24c:	2900182e 	bgeu	r5,r4,1000c2b0 <udivmodsi4+0x64>
1000c250:	28001716 	blt	r5,zero,1000c2b0 <udivmodsi4+0x64>
1000c254:	00800804 	movi	r2,32
1000c258:	00c00044 	movi	r3,1
1000c25c:	00000206 	br	1000c268 <udivmodsi4+0x1c>
1000c260:	10001126 	beq	r2,zero,1000c2a8 <udivmodsi4+0x5c>
1000c264:	28000516 	blt	r5,zero,1000c27c <udivmodsi4+0x30>
1000c268:	294b883a 	add	r5,r5,r5
1000c26c:	10bfffc4 	addi	r2,r2,-1
1000c270:	18c7883a 	add	r3,r3,r3
1000c274:	293ffa36 	bltu	r5,r4,1000c260 <__alt_data_end+0xf800c260>
1000c278:	18000b26 	beq	r3,zero,1000c2a8 <udivmodsi4+0x5c>
1000c27c:	0005883a 	mov	r2,zero
1000c280:	21400236 	bltu	r4,r5,1000c28c <udivmodsi4+0x40>
1000c284:	2149c83a 	sub	r4,r4,r5
1000c288:	10c4b03a 	or	r2,r2,r3
1000c28c:	1806d07a 	srli	r3,r3,1
1000c290:	280ad07a 	srli	r5,r5,1
1000c294:	183ffa1e 	bne	r3,zero,1000c280 <__alt_data_end+0xf800c280>
1000c298:	3000011e 	bne	r6,zero,1000c2a0 <udivmodsi4+0x54>
1000c29c:	f800283a 	ret
1000c2a0:	2005883a 	mov	r2,r4
1000c2a4:	f800283a 	ret
1000c2a8:	0005883a 	mov	r2,zero
1000c2ac:	003ffa06 	br	1000c298 <__alt_data_end+0xf800c298>
1000c2b0:	00c00044 	movi	r3,1
1000c2b4:	003ff106 	br	1000c27c <__alt_data_end+0xf800c27c>

1000c2b8 <__divsi3>:
1000c2b8:	defffe04 	addi	sp,sp,-8
1000c2bc:	dfc00115 	stw	ra,4(sp)
1000c2c0:	dc000015 	stw	r16,0(sp)
1000c2c4:	20000b16 	blt	r4,zero,1000c2f4 <__divsi3+0x3c>
1000c2c8:	0021883a 	mov	r16,zero
1000c2cc:	28000c16 	blt	r5,zero,1000c300 <__divsi3+0x48>
1000c2d0:	000d883a 	mov	r6,zero
1000c2d4:	000c24c0 	call	1000c24c <udivmodsi4>
1000c2d8:	0407c83a 	sub	r3,zero,r16
1000c2dc:	1884f03a 	xor	r2,r3,r2
1000c2e0:	1405883a 	add	r2,r2,r16
1000c2e4:	dfc00117 	ldw	ra,4(sp)
1000c2e8:	dc000017 	ldw	r16,0(sp)
1000c2ec:	dec00204 	addi	sp,sp,8
1000c2f0:	f800283a 	ret
1000c2f4:	0109c83a 	sub	r4,zero,r4
1000c2f8:	04000044 	movi	r16,1
1000c2fc:	283ff40e 	bge	r5,zero,1000c2d0 <__alt_data_end+0xf800c2d0>
1000c300:	014bc83a 	sub	r5,zero,r5
1000c304:	8400005c 	xori	r16,r16,1
1000c308:	003ff106 	br	1000c2d0 <__alt_data_end+0xf800c2d0>

1000c30c <__modsi3>:
1000c30c:	defffd04 	addi	sp,sp,-12
1000c310:	dfc00215 	stw	ra,8(sp)
1000c314:	dc400115 	stw	r17,4(sp)
1000c318:	dc000015 	stw	r16,0(sp)
1000c31c:	20000c16 	blt	r4,zero,1000c350 <__modsi3+0x44>
1000c320:	0023883a 	mov	r17,zero
1000c324:	0021883a 	mov	r16,zero
1000c328:	28000d16 	blt	r5,zero,1000c360 <__modsi3+0x54>
1000c32c:	01800044 	movi	r6,1
1000c330:	000c24c0 	call	1000c24c <udivmodsi4>
1000c334:	1404f03a 	xor	r2,r2,r16
1000c338:	8885883a 	add	r2,r17,r2
1000c33c:	dfc00217 	ldw	ra,8(sp)
1000c340:	dc400117 	ldw	r17,4(sp)
1000c344:	dc000017 	ldw	r16,0(sp)
1000c348:	dec00304 	addi	sp,sp,12
1000c34c:	f800283a 	ret
1000c350:	0109c83a 	sub	r4,zero,r4
1000c354:	04400044 	movi	r17,1
1000c358:	043fffc4 	movi	r16,-1
1000c35c:	283ff30e 	bge	r5,zero,1000c32c <__alt_data_end+0xf800c32c>
1000c360:	014bc83a 	sub	r5,zero,r5
1000c364:	003ff106 	br	1000c32c <__alt_data_end+0xf800c32c>

1000c368 <__udivsi3>:
1000c368:	000d883a 	mov	r6,zero
1000c36c:	000c24c1 	jmpi	1000c24c <udivmodsi4>

1000c370 <__umodsi3>:
1000c370:	01800044 	movi	r6,1
1000c374:	000c24c1 	jmpi	1000c24c <udivmodsi4>

1000c378 <__mulsi3>:
1000c378:	0005883a 	mov	r2,zero
1000c37c:	20000726 	beq	r4,zero,1000c39c <__mulsi3+0x24>
1000c380:	20c0004c 	andi	r3,r4,1
1000c384:	2008d07a 	srli	r4,r4,1
1000c388:	18000126 	beq	r3,zero,1000c390 <__mulsi3+0x18>
1000c38c:	1145883a 	add	r2,r2,r5
1000c390:	294b883a 	add	r5,r5,r5
1000c394:	203ffa1e 	bne	r4,zero,1000c380 <__alt_data_end+0xf800c380>
1000c398:	f800283a 	ret
1000c39c:	f800283a 	ret

1000c3a0 <__adddf3>:
1000c3a0:	02000434 	movhi	r8,16
1000c3a4:	423fffc4 	addi	r8,r8,-1
1000c3a8:	defffb04 	addi	sp,sp,-20
1000c3ac:	2a12703a 	and	r9,r5,r8
1000c3b0:	2806d7fa 	srli	r3,r5,31
1000c3b4:	3a10703a 	and	r8,r7,r8
1000c3b8:	3804d53a 	srli	r2,r7,20
1000c3bc:	3014d77a 	srli	r10,r6,29
1000c3c0:	dc000015 	stw	r16,0(sp)
1000c3c4:	481290fa 	slli	r9,r9,3
1000c3c8:	2820d53a 	srli	r16,r5,20
1000c3cc:	401090fa 	slli	r8,r8,3
1000c3d0:	200ad77a 	srli	r5,r4,29
1000c3d4:	380ed7fa 	srli	r7,r7,31
1000c3d8:	dc800215 	stw	r18,8(sp)
1000c3dc:	dc400115 	stw	r17,4(sp)
1000c3e0:	dfc00415 	stw	ra,16(sp)
1000c3e4:	dcc00315 	stw	r19,12(sp)
1000c3e8:	1c803fcc 	andi	r18,r3,255
1000c3ec:	8401ffcc 	andi	r16,r16,2047
1000c3f0:	494ab03a 	or	r5,r9,r5
1000c3f4:	202290fa 	slli	r17,r4,3
1000c3f8:	1081ffcc 	andi	r2,r2,2047
1000c3fc:	4290b03a 	or	r8,r8,r10
1000c400:	300c90fa 	slli	r6,r6,3
1000c404:	91c07026 	beq	r18,r7,1000c5c8 <__adddf3+0x228>
1000c408:	8087c83a 	sub	r3,r16,r2
1000c40c:	00c0b30e 	bge	zero,r3,1000c6dc <__adddf3+0x33c>
1000c410:	10002a1e 	bne	r2,zero,1000c4bc <__adddf3+0x11c>
1000c414:	4184b03a 	or	r2,r8,r6
1000c418:	1000991e 	bne	r2,zero,1000c680 <__adddf3+0x2e0>
1000c41c:	888001cc 	andi	r2,r17,7
1000c420:	10005b26 	beq	r2,zero,1000c590 <__adddf3+0x1f0>
1000c424:	88c003cc 	andi	r3,r17,15
1000c428:	00800104 	movi	r2,4
1000c42c:	18805826 	beq	r3,r2,1000c590 <__adddf3+0x1f0>
1000c430:	89800104 	addi	r6,r17,4
1000c434:	3463803a 	cmpltu	r17,r6,r17
1000c438:	2c4b883a 	add	r5,r5,r17
1000c43c:	2880202c 	andhi	r2,r5,128
1000c440:	9007883a 	mov	r3,r18
1000c444:	3023883a 	mov	r17,r6
1000c448:	10005426 	beq	r2,zero,1000c59c <__adddf3+0x1fc>
1000c44c:	84000044 	addi	r16,r16,1
1000c450:	0081ffc4 	movi	r2,2047
1000c454:	8080c126 	beq	r16,r2,1000c75c <__adddf3+0x3bc>
1000c458:	013fe034 	movhi	r4,65408
1000c45c:	213fffc4 	addi	r4,r4,-1
1000c460:	290a703a 	and	r5,r5,r4
1000c464:	2804977a 	slli	r2,r5,29
1000c468:	280a927a 	slli	r5,r5,9
1000c46c:	8822d0fa 	srli	r17,r17,3
1000c470:	8401ffcc 	andi	r16,r16,2047
1000c474:	2808d33a 	srli	r4,r5,12
1000c478:	1444b03a 	or	r2,r2,r17
1000c47c:	8401ffcc 	andi	r16,r16,2047
1000c480:	800a953a 	slli	r5,r16,20
1000c484:	18c03fcc 	andi	r3,r3,255
1000c488:	04000434 	movhi	r16,16
1000c48c:	180697fa 	slli	r3,r3,31
1000c490:	843fffc4 	addi	r16,r16,-1
1000c494:	2420703a 	and	r16,r4,r16
1000c498:	8160b03a 	or	r16,r16,r5
1000c49c:	80c6b03a 	or	r3,r16,r3
1000c4a0:	dfc00417 	ldw	ra,16(sp)
1000c4a4:	dcc00317 	ldw	r19,12(sp)
1000c4a8:	dc800217 	ldw	r18,8(sp)
1000c4ac:	dc400117 	ldw	r17,4(sp)
1000c4b0:	dc000017 	ldw	r16,0(sp)
1000c4b4:	dec00504 	addi	sp,sp,20
1000c4b8:	f800283a 	ret
1000c4bc:	0081ffc4 	movi	r2,2047
1000c4c0:	80bfd626 	beq	r16,r2,1000c41c <__alt_data_end+0xf800c41c>
1000c4c4:	42002034 	orhi	r8,r8,128
1000c4c8:	00800e04 	movi	r2,56
1000c4cc:	10c0a616 	blt	r2,r3,1000c768 <__adddf3+0x3c8>
1000c4d0:	008007c4 	movi	r2,31
1000c4d4:	10c0c916 	blt	r2,r3,1000c7fc <__adddf3+0x45c>
1000c4d8:	00800804 	movi	r2,32
1000c4dc:	10c5c83a 	sub	r2,r2,r3
1000c4e0:	408e983a 	sll	r7,r8,r2
1000c4e4:	30c8d83a 	srl	r4,r6,r3
1000c4e8:	3084983a 	sll	r2,r6,r2
1000c4ec:	40c6d83a 	srl	r3,r8,r3
1000c4f0:	390cb03a 	or	r6,r7,r4
1000c4f4:	1004c03a 	cmpne	r2,r2,zero
1000c4f8:	308cb03a 	or	r6,r6,r2
1000c4fc:	898dc83a 	sub	r6,r17,r6
1000c500:	89a3803a 	cmpltu	r17,r17,r6
1000c504:	28cbc83a 	sub	r5,r5,r3
1000c508:	2c4bc83a 	sub	r5,r5,r17
1000c50c:	3023883a 	mov	r17,r6
1000c510:	2880202c 	andhi	r2,r5,128
1000c514:	10006d26 	beq	r2,zero,1000c6cc <__adddf3+0x32c>
1000c518:	04c02034 	movhi	r19,128
1000c51c:	9cffffc4 	addi	r19,r19,-1
1000c520:	2ce6703a 	and	r19,r5,r19
1000c524:	98007e26 	beq	r19,zero,1000c720 <__adddf3+0x380>
1000c528:	9809883a 	mov	r4,r19
1000c52c:	000eb380 	call	1000eb38 <__clzsi2>
1000c530:	10fffe04 	addi	r3,r2,-8
1000c534:	010007c4 	movi	r4,31
1000c538:	20c07f16 	blt	r4,r3,1000c738 <__adddf3+0x398>
1000c53c:	01400a04 	movi	r5,40
1000c540:	2885c83a 	sub	r2,r5,r2
1000c544:	888ad83a 	srl	r5,r17,r2
1000c548:	98e6983a 	sll	r19,r19,r3
1000c54c:	88e2983a 	sll	r17,r17,r3
1000c550:	2ce6b03a 	or	r19,r5,r19
1000c554:	1c007c16 	blt	r3,r16,1000c748 <__adddf3+0x3a8>
1000c558:	1c21c83a 	sub	r16,r3,r16
1000c55c:	81400044 	addi	r5,r16,1
1000c560:	00c007c4 	movi	r3,31
1000c564:	19409816 	blt	r3,r5,1000c7c8 <__adddf3+0x428>
1000c568:	1c21c83a 	sub	r16,r3,r16
1000c56c:	8c08983a 	sll	r4,r17,r16
1000c570:	8946d83a 	srl	r3,r17,r5
1000c574:	9c20983a 	sll	r16,r19,r16
1000c578:	2008c03a 	cmpne	r4,r4,zero
1000c57c:	994ad83a 	srl	r5,r19,r5
1000c580:	1c06b03a 	or	r3,r3,r16
1000c584:	1922b03a 	or	r17,r3,r4
1000c588:	0021883a 	mov	r16,zero
1000c58c:	003fa306 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c590:	2880202c 	andhi	r2,r5,128
1000c594:	9007883a 	mov	r3,r18
1000c598:	103fac1e 	bne	r2,zero,1000c44c <__alt_data_end+0xf800c44c>
1000c59c:	2804977a 	slli	r2,r5,29
1000c5a0:	8822d0fa 	srli	r17,r17,3
1000c5a4:	0101ffc4 	movi	r4,2047
1000c5a8:	280ad0fa 	srli	r5,r5,3
1000c5ac:	1444b03a 	or	r2,r2,r17
1000c5b0:	81002c26 	beq	r16,r4,1000c664 <__adddf3+0x2c4>
1000c5b4:	8120703a 	and	r16,r16,r4
1000c5b8:	01000434 	movhi	r4,16
1000c5bc:	213fffc4 	addi	r4,r4,-1
1000c5c0:	2908703a 	and	r4,r5,r4
1000c5c4:	003fad06 	br	1000c47c <__alt_data_end+0xf800c47c>
1000c5c8:	8089c83a 	sub	r4,r16,r2
1000c5cc:	01006a0e 	bge	zero,r4,1000c778 <__adddf3+0x3d8>
1000c5d0:	10003326 	beq	r2,zero,1000c6a0 <__adddf3+0x300>
1000c5d4:	0081ffc4 	movi	r2,2047
1000c5d8:	80bf9026 	beq	r16,r2,1000c41c <__alt_data_end+0xf800c41c>
1000c5dc:	42002034 	orhi	r8,r8,128
1000c5e0:	00800e04 	movi	r2,56
1000c5e4:	1100b116 	blt	r2,r4,1000c8ac <__adddf3+0x50c>
1000c5e8:	008007c4 	movi	r2,31
1000c5ec:	1100e216 	blt	r2,r4,1000c978 <__adddf3+0x5d8>
1000c5f0:	00800804 	movi	r2,32
1000c5f4:	1105c83a 	sub	r2,r2,r4
1000c5f8:	4092983a 	sll	r9,r8,r2
1000c5fc:	310ed83a 	srl	r7,r6,r4
1000c600:	3084983a 	sll	r2,r6,r2
1000c604:	4110d83a 	srl	r8,r8,r4
1000c608:	49ccb03a 	or	r6,r9,r7
1000c60c:	1004c03a 	cmpne	r2,r2,zero
1000c610:	308cb03a 	or	r6,r6,r2
1000c614:	344d883a 	add	r6,r6,r17
1000c618:	3463803a 	cmpltu	r17,r6,r17
1000c61c:	414b883a 	add	r5,r8,r5
1000c620:	2c4b883a 	add	r5,r5,r17
1000c624:	3023883a 	mov	r17,r6
1000c628:	2880202c 	andhi	r2,r5,128
1000c62c:	10002726 	beq	r2,zero,1000c6cc <__adddf3+0x32c>
1000c630:	84000044 	addi	r16,r16,1
1000c634:	0081ffc4 	movi	r2,2047
1000c638:	8080ae26 	beq	r16,r2,1000c8f4 <__adddf3+0x554>
1000c63c:	00bfe034 	movhi	r2,65408
1000c640:	10bfffc4 	addi	r2,r2,-1
1000c644:	288a703a 	and	r5,r5,r2
1000c648:	880cd07a 	srli	r6,r17,1
1000c64c:	280897fa 	slli	r4,r5,31
1000c650:	88c0004c 	andi	r3,r17,1
1000c654:	30e2b03a 	or	r17,r6,r3
1000c658:	280ad07a 	srli	r5,r5,1
1000c65c:	8922b03a 	or	r17,r17,r4
1000c660:	003f6e06 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c664:	1148b03a 	or	r4,r2,r5
1000c668:	20003c26 	beq	r4,zero,1000c75c <__adddf3+0x3bc>
1000c66c:	29000234 	orhi	r4,r5,8
1000c670:	01400434 	movhi	r5,16
1000c674:	297fffc4 	addi	r5,r5,-1
1000c678:	2148703a 	and	r4,r4,r5
1000c67c:	003f7f06 	br	1000c47c <__alt_data_end+0xf800c47c>
1000c680:	18ffffc4 	addi	r3,r3,-1
1000c684:	18004d1e 	bne	r3,zero,1000c7bc <__adddf3+0x41c>
1000c688:	898dc83a 	sub	r6,r17,r6
1000c68c:	89a3803a 	cmpltu	r17,r17,r6
1000c690:	2a0bc83a 	sub	r5,r5,r8
1000c694:	2c4bc83a 	sub	r5,r5,r17
1000c698:	3023883a 	mov	r17,r6
1000c69c:	003f9c06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c6a0:	4184b03a 	or	r2,r8,r6
1000c6a4:	103f5d26 	beq	r2,zero,1000c41c <__alt_data_end+0xf800c41c>
1000c6a8:	213fffc4 	addi	r4,r4,-1
1000c6ac:	203fd926 	beq	r4,zero,1000c614 <__alt_data_end+0xf800c614>
1000c6b0:	0081ffc4 	movi	r2,2047
1000c6b4:	80bfca1e 	bne	r16,r2,1000c5e0 <__alt_data_end+0xf800c5e0>
1000c6b8:	003f5806 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c6bc:	10c8b03a 	or	r4,r2,r3
1000c6c0:	20008b26 	beq	r4,zero,1000c8f0 <__adddf3+0x550>
1000c6c4:	100b883a 	mov	r5,r2
1000c6c8:	1823883a 	mov	r17,r3
1000c6cc:	888001cc 	andi	r2,r17,7
1000c6d0:	103f541e 	bne	r2,zero,1000c424 <__alt_data_end+0xf800c424>
1000c6d4:	9007883a 	mov	r3,r18
1000c6d8:	003fb006 	br	1000c59c <__alt_data_end+0xf800c59c>
1000c6dc:	1800531e 	bne	r3,zero,1000c82c <__adddf3+0x48c>
1000c6e0:	80800044 	addi	r2,r16,1
1000c6e4:	1081ffcc 	andi	r2,r2,2047
1000c6e8:	00c00044 	movi	r3,1
1000c6ec:	1880990e 	bge	r3,r2,1000c954 <__adddf3+0x5b4>
1000c6f0:	8985c83a 	sub	r2,r17,r6
1000c6f4:	8887803a 	cmpltu	r3,r17,r2
1000c6f8:	2a27c83a 	sub	r19,r5,r8
1000c6fc:	98e7c83a 	sub	r19,r19,r3
1000c700:	98c0202c 	andhi	r3,r19,128
1000c704:	18006226 	beq	r3,zero,1000c890 <__adddf3+0x4f0>
1000c708:	3463c83a 	sub	r17,r6,r17
1000c70c:	4151c83a 	sub	r8,r8,r5
1000c710:	344d803a 	cmpltu	r6,r6,r17
1000c714:	41a7c83a 	sub	r19,r8,r6
1000c718:	3825883a 	mov	r18,r7
1000c71c:	983f821e 	bne	r19,zero,1000c528 <__alt_data_end+0xf800c528>
1000c720:	8809883a 	mov	r4,r17
1000c724:	000eb380 	call	1000eb38 <__clzsi2>
1000c728:	10800804 	addi	r2,r2,32
1000c72c:	10fffe04 	addi	r3,r2,-8
1000c730:	010007c4 	movi	r4,31
1000c734:	20ff810e 	bge	r4,r3,1000c53c <__alt_data_end+0xf800c53c>
1000c738:	14fff604 	addi	r19,r2,-40
1000c73c:	8ce6983a 	sll	r19,r17,r19
1000c740:	0023883a 	mov	r17,zero
1000c744:	1c3f840e 	bge	r3,r16,1000c558 <__alt_data_end+0xf800c558>
1000c748:	017fe034 	movhi	r5,65408
1000c74c:	297fffc4 	addi	r5,r5,-1
1000c750:	80e1c83a 	sub	r16,r16,r3
1000c754:	994a703a 	and	r5,r19,r5
1000c758:	003f3006 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c75c:	0009883a 	mov	r4,zero
1000c760:	0005883a 	mov	r2,zero
1000c764:	003f4506 	br	1000c47c <__alt_data_end+0xf800c47c>
1000c768:	418cb03a 	or	r6,r8,r6
1000c76c:	300cc03a 	cmpne	r6,r6,zero
1000c770:	0007883a 	mov	r3,zero
1000c774:	003f6106 	br	1000c4fc <__alt_data_end+0xf800c4fc>
1000c778:	2000921e 	bne	r4,zero,1000c9c4 <__adddf3+0x624>
1000c77c:	80800044 	addi	r2,r16,1
1000c780:	11c1ffcc 	andi	r7,r2,2047
1000c784:	01000044 	movi	r4,1
1000c788:	21c0610e 	bge	r4,r7,1000c910 <__adddf3+0x570>
1000c78c:	0101ffc4 	movi	r4,2047
1000c790:	1100a326 	beq	r2,r4,1000ca20 <__adddf3+0x680>
1000c794:	344d883a 	add	r6,r6,r17
1000c798:	3463803a 	cmpltu	r17,r6,r17
1000c79c:	414b883a 	add	r5,r8,r5
1000c7a0:	2c4b883a 	add	r5,r5,r17
1000c7a4:	282297fa 	slli	r17,r5,31
1000c7a8:	300cd07a 	srli	r6,r6,1
1000c7ac:	280ad07a 	srli	r5,r5,1
1000c7b0:	1021883a 	mov	r16,r2
1000c7b4:	89a2b03a 	or	r17,r17,r6
1000c7b8:	003f1806 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c7bc:	0081ffc4 	movi	r2,2047
1000c7c0:	80bf411e 	bne	r16,r2,1000c4c8 <__alt_data_end+0xf800c4c8>
1000c7c4:	003f1506 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c7c8:	80bff844 	addi	r2,r16,-31
1000c7cc:	00c00804 	movi	r3,32
1000c7d0:	9884d83a 	srl	r2,r19,r2
1000c7d4:	28c04a26 	beq	r5,r3,1000c900 <__adddf3+0x560>
1000c7d8:	00c00fc4 	movi	r3,63
1000c7dc:	1c21c83a 	sub	r16,r3,r16
1000c7e0:	9c26983a 	sll	r19,r19,r16
1000c7e4:	9c62b03a 	or	r17,r19,r17
1000c7e8:	8822c03a 	cmpne	r17,r17,zero
1000c7ec:	88a2b03a 	or	r17,r17,r2
1000c7f0:	000b883a 	mov	r5,zero
1000c7f4:	0021883a 	mov	r16,zero
1000c7f8:	003fb406 	br	1000c6cc <__alt_data_end+0xf800c6cc>
1000c7fc:	18bff804 	addi	r2,r3,-32
1000c800:	01000804 	movi	r4,32
1000c804:	4084d83a 	srl	r2,r8,r2
1000c808:	19003f26 	beq	r3,r4,1000c908 <__adddf3+0x568>
1000c80c:	01001004 	movi	r4,64
1000c810:	20c7c83a 	sub	r3,r4,r3
1000c814:	40d0983a 	sll	r8,r8,r3
1000c818:	418cb03a 	or	r6,r8,r6
1000c81c:	300cc03a 	cmpne	r6,r6,zero
1000c820:	308cb03a 	or	r6,r6,r2
1000c824:	0007883a 	mov	r3,zero
1000c828:	003f3406 	br	1000c4fc <__alt_data_end+0xf800c4fc>
1000c82c:	80002326 	beq	r16,zero,1000c8bc <__adddf3+0x51c>
1000c830:	0101ffc4 	movi	r4,2047
1000c834:	11005e26 	beq	r2,r4,1000c9b0 <__adddf3+0x610>
1000c838:	00c7c83a 	sub	r3,zero,r3
1000c83c:	29402034 	orhi	r5,r5,128
1000c840:	01000e04 	movi	r4,56
1000c844:	20c07216 	blt	r4,r3,1000ca10 <__adddf3+0x670>
1000c848:	010007c4 	movi	r4,31
1000c84c:	20c0ce16 	blt	r4,r3,1000cb88 <__adddf3+0x7e8>
1000c850:	01000804 	movi	r4,32
1000c854:	20c9c83a 	sub	r4,r4,r3
1000c858:	2914983a 	sll	r10,r5,r4
1000c85c:	88d2d83a 	srl	r9,r17,r3
1000c860:	8908983a 	sll	r4,r17,r4
1000c864:	28c6d83a 	srl	r3,r5,r3
1000c868:	5262b03a 	or	r17,r10,r9
1000c86c:	2008c03a 	cmpne	r4,r4,zero
1000c870:	8922b03a 	or	r17,r17,r4
1000c874:	3463c83a 	sub	r17,r6,r17
1000c878:	40c7c83a 	sub	r3,r8,r3
1000c87c:	344d803a 	cmpltu	r6,r6,r17
1000c880:	198bc83a 	sub	r5,r3,r6
1000c884:	1021883a 	mov	r16,r2
1000c888:	3825883a 	mov	r18,r7
1000c88c:	003f2006 	br	1000c510 <__alt_data_end+0xf800c510>
1000c890:	9886b03a 	or	r3,r19,r2
1000c894:	1800141e 	bne	r3,zero,1000c8e8 <__adddf3+0x548>
1000c898:	0007883a 	mov	r3,zero
1000c89c:	000b883a 	mov	r5,zero
1000c8a0:	0023883a 	mov	r17,zero
1000c8a4:	0021883a 	mov	r16,zero
1000c8a8:	003f3c06 	br	1000c59c <__alt_data_end+0xf800c59c>
1000c8ac:	418cb03a 	or	r6,r8,r6
1000c8b0:	300cc03a 	cmpne	r6,r6,zero
1000c8b4:	0011883a 	mov	r8,zero
1000c8b8:	003f5606 	br	1000c614 <__alt_data_end+0xf800c614>
1000c8bc:	2c48b03a 	or	r4,r5,r17
1000c8c0:	20003b26 	beq	r4,zero,1000c9b0 <__adddf3+0x610>
1000c8c4:	00c6303a 	nor	r3,zero,r3
1000c8c8:	1800371e 	bne	r3,zero,1000c9a8 <__adddf3+0x608>
1000c8cc:	3463c83a 	sub	r17,r6,r17
1000c8d0:	414bc83a 	sub	r5,r8,r5
1000c8d4:	344d803a 	cmpltu	r6,r6,r17
1000c8d8:	298bc83a 	sub	r5,r5,r6
1000c8dc:	1021883a 	mov	r16,r2
1000c8e0:	3825883a 	mov	r18,r7
1000c8e4:	003f0a06 	br	1000c510 <__alt_data_end+0xf800c510>
1000c8e8:	1023883a 	mov	r17,r2
1000c8ec:	003f0d06 	br	1000c524 <__alt_data_end+0xf800c524>
1000c8f0:	0007883a 	mov	r3,zero
1000c8f4:	000b883a 	mov	r5,zero
1000c8f8:	0023883a 	mov	r17,zero
1000c8fc:	003f2706 	br	1000c59c <__alt_data_end+0xf800c59c>
1000c900:	0027883a 	mov	r19,zero
1000c904:	003fb706 	br	1000c7e4 <__alt_data_end+0xf800c7e4>
1000c908:	0011883a 	mov	r8,zero
1000c90c:	003fc206 	br	1000c818 <__alt_data_end+0xf800c818>
1000c910:	2c44b03a 	or	r2,r5,r17
1000c914:	8000871e 	bne	r16,zero,1000cb34 <__adddf3+0x794>
1000c918:	1000b126 	beq	r2,zero,1000cbe0 <__adddf3+0x840>
1000c91c:	4184b03a 	or	r2,r8,r6
1000c920:	103ebe26 	beq	r2,zero,1000c41c <__alt_data_end+0xf800c41c>
1000c924:	3445883a 	add	r2,r6,r17
1000c928:	1463803a 	cmpltu	r17,r2,r17
1000c92c:	414b883a 	add	r5,r8,r5
1000c930:	2c4b883a 	add	r5,r5,r17
1000c934:	28c0202c 	andhi	r3,r5,128
1000c938:	1023883a 	mov	r17,r2
1000c93c:	183f6326 	beq	r3,zero,1000c6cc <__alt_data_end+0xf800c6cc>
1000c940:	00bfe034 	movhi	r2,65408
1000c944:	10bfffc4 	addi	r2,r2,-1
1000c948:	2021883a 	mov	r16,r4
1000c94c:	288a703a 	and	r5,r5,r2
1000c950:	003eb206 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c954:	2c44b03a 	or	r2,r5,r17
1000c958:	8000251e 	bne	r16,zero,1000c9f0 <__adddf3+0x650>
1000c95c:	10004b1e 	bne	r2,zero,1000ca8c <__adddf3+0x6ec>
1000c960:	4184b03a 	or	r2,r8,r6
1000c964:	103fe226 	beq	r2,zero,1000c8f0 <__alt_data_end+0xf800c8f0>
1000c968:	400b883a 	mov	r5,r8
1000c96c:	3023883a 	mov	r17,r6
1000c970:	3825883a 	mov	r18,r7
1000c974:	003ea906 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c978:	20bff804 	addi	r2,r4,-32
1000c97c:	01c00804 	movi	r7,32
1000c980:	4084d83a 	srl	r2,r8,r2
1000c984:	21c07e26 	beq	r4,r7,1000cb80 <__adddf3+0x7e0>
1000c988:	01c01004 	movi	r7,64
1000c98c:	3909c83a 	sub	r4,r7,r4
1000c990:	4110983a 	sll	r8,r8,r4
1000c994:	418cb03a 	or	r6,r8,r6
1000c998:	300cc03a 	cmpne	r6,r6,zero
1000c99c:	308cb03a 	or	r6,r6,r2
1000c9a0:	0011883a 	mov	r8,zero
1000c9a4:	003f1b06 	br	1000c614 <__alt_data_end+0xf800c614>
1000c9a8:	0101ffc4 	movi	r4,2047
1000c9ac:	113fa41e 	bne	r2,r4,1000c840 <__alt_data_end+0xf800c840>
1000c9b0:	400b883a 	mov	r5,r8
1000c9b4:	3023883a 	mov	r17,r6
1000c9b8:	1021883a 	mov	r16,r2
1000c9bc:	3825883a 	mov	r18,r7
1000c9c0:	003e9606 	br	1000c41c <__alt_data_end+0xf800c41c>
1000c9c4:	80001a1e 	bne	r16,zero,1000ca30 <__adddf3+0x690>
1000c9c8:	2c4eb03a 	or	r7,r5,r17
1000c9cc:	38005526 	beq	r7,zero,1000cb24 <__adddf3+0x784>
1000c9d0:	0108303a 	nor	r4,zero,r4
1000c9d4:	2000511e 	bne	r4,zero,1000cb1c <__adddf3+0x77c>
1000c9d8:	89a3883a 	add	r17,r17,r6
1000c9dc:	414b883a 	add	r5,r8,r5
1000c9e0:	898d803a 	cmpltu	r6,r17,r6
1000c9e4:	298b883a 	add	r5,r5,r6
1000c9e8:	1021883a 	mov	r16,r2
1000c9ec:	003f0e06 	br	1000c628 <__alt_data_end+0xf800c628>
1000c9f0:	1000341e 	bne	r2,zero,1000cac4 <__adddf3+0x724>
1000c9f4:	4184b03a 	or	r2,r8,r6
1000c9f8:	10006f26 	beq	r2,zero,1000cbb8 <__adddf3+0x818>
1000c9fc:	400b883a 	mov	r5,r8
1000ca00:	3023883a 	mov	r17,r6
1000ca04:	3825883a 	mov	r18,r7
1000ca08:	0401ffc4 	movi	r16,2047
1000ca0c:	003e8306 	br	1000c41c <__alt_data_end+0xf800c41c>
1000ca10:	2c62b03a 	or	r17,r5,r17
1000ca14:	8822c03a 	cmpne	r17,r17,zero
1000ca18:	0007883a 	mov	r3,zero
1000ca1c:	003f9506 	br	1000c874 <__alt_data_end+0xf800c874>
1000ca20:	1021883a 	mov	r16,r2
1000ca24:	000b883a 	mov	r5,zero
1000ca28:	0023883a 	mov	r17,zero
1000ca2c:	003edb06 	br	1000c59c <__alt_data_end+0xf800c59c>
1000ca30:	01c1ffc4 	movi	r7,2047
1000ca34:	11c03b26 	beq	r2,r7,1000cb24 <__adddf3+0x784>
1000ca38:	0109c83a 	sub	r4,zero,r4
1000ca3c:	29402034 	orhi	r5,r5,128
1000ca40:	01c00e04 	movi	r7,56
1000ca44:	39006216 	blt	r7,r4,1000cbd0 <__adddf3+0x830>
1000ca48:	01c007c4 	movi	r7,31
1000ca4c:	39006b16 	blt	r7,r4,1000cbfc <__adddf3+0x85c>
1000ca50:	01c00804 	movi	r7,32
1000ca54:	390fc83a 	sub	r7,r7,r4
1000ca58:	29d4983a 	sll	r10,r5,r7
1000ca5c:	8912d83a 	srl	r9,r17,r4
1000ca60:	89ce983a 	sll	r7,r17,r7
1000ca64:	2908d83a 	srl	r4,r5,r4
1000ca68:	5262b03a 	or	r17,r10,r9
1000ca6c:	380ac03a 	cmpne	r5,r7,zero
1000ca70:	8962b03a 	or	r17,r17,r5
1000ca74:	89a3883a 	add	r17,r17,r6
1000ca78:	2211883a 	add	r8,r4,r8
1000ca7c:	898d803a 	cmpltu	r6,r17,r6
1000ca80:	418b883a 	add	r5,r8,r6
1000ca84:	1021883a 	mov	r16,r2
1000ca88:	003ee706 	br	1000c628 <__alt_data_end+0xf800c628>
1000ca8c:	4184b03a 	or	r2,r8,r6
1000ca90:	103e6226 	beq	r2,zero,1000c41c <__alt_data_end+0xf800c41c>
1000ca94:	8987c83a 	sub	r3,r17,r6
1000ca98:	88c9803a 	cmpltu	r4,r17,r3
1000ca9c:	2a05c83a 	sub	r2,r5,r8
1000caa0:	1105c83a 	sub	r2,r2,r4
1000caa4:	1100202c 	andhi	r4,r2,128
1000caa8:	203f0426 	beq	r4,zero,1000c6bc <__alt_data_end+0xf800c6bc>
1000caac:	3463c83a 	sub	r17,r6,r17
1000cab0:	414bc83a 	sub	r5,r8,r5
1000cab4:	344d803a 	cmpltu	r6,r6,r17
1000cab8:	298bc83a 	sub	r5,r5,r6
1000cabc:	3825883a 	mov	r18,r7
1000cac0:	003e5606 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cac4:	4184b03a 	or	r2,r8,r6
1000cac8:	10002b26 	beq	r2,zero,1000cb78 <__adddf3+0x7d8>
1000cacc:	2804d0fa 	srli	r2,r5,3
1000cad0:	8822d0fa 	srli	r17,r17,3
1000cad4:	280a977a 	slli	r5,r5,29
1000cad8:	10c0022c 	andhi	r3,r2,8
1000cadc:	2c62b03a 	or	r17,r5,r17
1000cae0:	18000826 	beq	r3,zero,1000cb04 <__adddf3+0x764>
1000cae4:	4008d0fa 	srli	r4,r8,3
1000cae8:	20c0022c 	andhi	r3,r4,8
1000caec:	1800051e 	bne	r3,zero,1000cb04 <__adddf3+0x764>
1000caf0:	300cd0fa 	srli	r6,r6,3
1000caf4:	4010977a 	slli	r8,r8,29
1000caf8:	2005883a 	mov	r2,r4
1000cafc:	3825883a 	mov	r18,r7
1000cb00:	41a2b03a 	or	r17,r8,r6
1000cb04:	880ad77a 	srli	r5,r17,29
1000cb08:	100490fa 	slli	r2,r2,3
1000cb0c:	882290fa 	slli	r17,r17,3
1000cb10:	0401ffc4 	movi	r16,2047
1000cb14:	288ab03a 	or	r5,r5,r2
1000cb18:	003e4006 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cb1c:	01c1ffc4 	movi	r7,2047
1000cb20:	11ffc71e 	bne	r2,r7,1000ca40 <__alt_data_end+0xf800ca40>
1000cb24:	400b883a 	mov	r5,r8
1000cb28:	3023883a 	mov	r17,r6
1000cb2c:	1021883a 	mov	r16,r2
1000cb30:	003e3a06 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cb34:	10002d26 	beq	r2,zero,1000cbec <__adddf3+0x84c>
1000cb38:	4184b03a 	or	r2,r8,r6
1000cb3c:	10000e26 	beq	r2,zero,1000cb78 <__adddf3+0x7d8>
1000cb40:	2804d0fa 	srli	r2,r5,3
1000cb44:	8822d0fa 	srli	r17,r17,3
1000cb48:	280a977a 	slli	r5,r5,29
1000cb4c:	10c0022c 	andhi	r3,r2,8
1000cb50:	2c62b03a 	or	r17,r5,r17
1000cb54:	183feb26 	beq	r3,zero,1000cb04 <__alt_data_end+0xf800cb04>
1000cb58:	4008d0fa 	srli	r4,r8,3
1000cb5c:	20c0022c 	andhi	r3,r4,8
1000cb60:	183fe81e 	bne	r3,zero,1000cb04 <__alt_data_end+0xf800cb04>
1000cb64:	300cd0fa 	srli	r6,r6,3
1000cb68:	4010977a 	slli	r8,r8,29
1000cb6c:	2005883a 	mov	r2,r4
1000cb70:	41a2b03a 	or	r17,r8,r6
1000cb74:	003fe306 	br	1000cb04 <__alt_data_end+0xf800cb04>
1000cb78:	0401ffc4 	movi	r16,2047
1000cb7c:	003e2706 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cb80:	0011883a 	mov	r8,zero
1000cb84:	003f8306 	br	1000c994 <__alt_data_end+0xf800c994>
1000cb88:	193ff804 	addi	r4,r3,-32
1000cb8c:	02400804 	movi	r9,32
1000cb90:	2908d83a 	srl	r4,r5,r4
1000cb94:	1a402526 	beq	r3,r9,1000cc2c <__adddf3+0x88c>
1000cb98:	02401004 	movi	r9,64
1000cb9c:	48c7c83a 	sub	r3,r9,r3
1000cba0:	28ca983a 	sll	r5,r5,r3
1000cba4:	2c62b03a 	or	r17,r5,r17
1000cba8:	8822c03a 	cmpne	r17,r17,zero
1000cbac:	8922b03a 	or	r17,r17,r4
1000cbb0:	0007883a 	mov	r3,zero
1000cbb4:	003f2f06 	br	1000c874 <__alt_data_end+0xf800c874>
1000cbb8:	01402034 	movhi	r5,128
1000cbbc:	0007883a 	mov	r3,zero
1000cbc0:	297fffc4 	addi	r5,r5,-1
1000cbc4:	047ffe04 	movi	r17,-8
1000cbc8:	0401ffc4 	movi	r16,2047
1000cbcc:	003e7306 	br	1000c59c <__alt_data_end+0xf800c59c>
1000cbd0:	2c62b03a 	or	r17,r5,r17
1000cbd4:	8822c03a 	cmpne	r17,r17,zero
1000cbd8:	0009883a 	mov	r4,zero
1000cbdc:	003fa506 	br	1000ca74 <__alt_data_end+0xf800ca74>
1000cbe0:	400b883a 	mov	r5,r8
1000cbe4:	3023883a 	mov	r17,r6
1000cbe8:	003e0c06 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cbec:	400b883a 	mov	r5,r8
1000cbf0:	3023883a 	mov	r17,r6
1000cbf4:	0401ffc4 	movi	r16,2047
1000cbf8:	003e0806 	br	1000c41c <__alt_data_end+0xf800c41c>
1000cbfc:	21fff804 	addi	r7,r4,-32
1000cc00:	02400804 	movi	r9,32
1000cc04:	29ced83a 	srl	r7,r5,r7
1000cc08:	22400a26 	beq	r4,r9,1000cc34 <__adddf3+0x894>
1000cc0c:	02401004 	movi	r9,64
1000cc10:	4909c83a 	sub	r4,r9,r4
1000cc14:	290a983a 	sll	r5,r5,r4
1000cc18:	2c62b03a 	or	r17,r5,r17
1000cc1c:	8822c03a 	cmpne	r17,r17,zero
1000cc20:	89e2b03a 	or	r17,r17,r7
1000cc24:	0009883a 	mov	r4,zero
1000cc28:	003f9206 	br	1000ca74 <__alt_data_end+0xf800ca74>
1000cc2c:	000b883a 	mov	r5,zero
1000cc30:	003fdc06 	br	1000cba4 <__alt_data_end+0xf800cba4>
1000cc34:	000b883a 	mov	r5,zero
1000cc38:	003ff706 	br	1000cc18 <__alt_data_end+0xf800cc18>

1000cc3c <__divdf3>:
1000cc3c:	defff004 	addi	sp,sp,-64
1000cc40:	dc800815 	stw	r18,32(sp)
1000cc44:	2824d53a 	srli	r18,r5,20
1000cc48:	dd800c15 	stw	r22,48(sp)
1000cc4c:	282cd7fa 	srli	r22,r5,31
1000cc50:	dc000615 	stw	r16,24(sp)
1000cc54:	04000434 	movhi	r16,16
1000cc58:	df000e15 	stw	fp,56(sp)
1000cc5c:	dd000a15 	stw	r20,40(sp)
1000cc60:	dcc00915 	stw	r19,36(sp)
1000cc64:	dc400715 	stw	r17,28(sp)
1000cc68:	843fffc4 	addi	r16,r16,-1
1000cc6c:	dfc00f15 	stw	ra,60(sp)
1000cc70:	ddc00d15 	stw	r23,52(sp)
1000cc74:	dd400b15 	stw	r21,44(sp)
1000cc78:	9481ffcc 	andi	r18,r18,2047
1000cc7c:	2029883a 	mov	r20,r4
1000cc80:	2027883a 	mov	r19,r4
1000cc84:	2c22703a 	and	r17,r5,r16
1000cc88:	b7003fcc 	andi	fp,r22,255
1000cc8c:	90005e26 	beq	r18,zero,1000ce08 <__divdf3+0x1cc>
1000cc90:	0081ffc4 	movi	r2,2047
1000cc94:	90803526 	beq	r18,r2,1000cd6c <__divdf3+0x130>
1000cc98:	8c000434 	orhi	r16,r17,16
1000cc9c:	2004d77a 	srli	r2,r4,29
1000cca0:	802090fa 	slli	r16,r16,3
1000cca4:	202690fa 	slli	r19,r4,3
1000cca8:	94bf0044 	addi	r18,r18,-1023
1000ccac:	80a2b03a 	or	r17,r16,r2
1000ccb0:	0029883a 	mov	r20,zero
1000ccb4:	0011883a 	mov	r8,zero
1000ccb8:	380ad53a 	srli	r5,r7,20
1000ccbc:	382ed7fa 	srli	r23,r7,31
1000ccc0:	04000434 	movhi	r16,16
1000ccc4:	843fffc4 	addi	r16,r16,-1
1000ccc8:	2941ffcc 	andi	r5,r5,2047
1000cccc:	302b883a 	mov	r21,r6
1000ccd0:	3c20703a 	and	r16,r7,r16
1000ccd4:	ba403fcc 	andi	r9,r23,255
1000ccd8:	28006726 	beq	r5,zero,1000ce78 <__divdf3+0x23c>
1000ccdc:	0081ffc4 	movi	r2,2047
1000cce0:	28805f26 	beq	r5,r2,1000ce60 <__divdf3+0x224>
1000cce4:	84000434 	orhi	r16,r16,16
1000cce8:	3004d77a 	srli	r2,r6,29
1000ccec:	802090fa 	slli	r16,r16,3
1000ccf0:	302a90fa 	slli	r21,r6,3
1000ccf4:	297f0044 	addi	r5,r5,-1023
1000ccf8:	80a0b03a 	or	r16,r16,r2
1000ccfc:	000f883a 	mov	r7,zero
1000cd00:	3d06b03a 	or	r3,r7,r20
1000cd04:	180690ba 	slli	r3,r3,2
1000cd08:	00840074 	movhi	r2,4097
1000cd0c:	10b34b04 	addi	r2,r2,-13012
1000cd10:	1885883a 	add	r2,r3,r2
1000cd14:	10800017 	ldw	r2,0(r2)
1000cd18:	b5c8f03a 	xor	r4,r22,r23
1000cd1c:	200d883a 	mov	r6,r4
1000cd20:	25003fcc 	andi	r20,r4,255
1000cd24:	9165c83a 	sub	r18,r18,r5
1000cd28:	1000683a 	jmp	r2
1000cd2c:	1000cf74 	orhi	zero,r2,829
1000cd30:	1000cda4 	muli	zero,r2,822
1000cd34:	1000cf38 	rdprs	zero,r2,828
1000cd38:	1000cd88 	cmpgei	zero,r2,822
1000cd3c:	1000cf38 	rdprs	zero,r2,828
1000cd40:	1000cf0c 	andi	zero,r2,828
1000cd44:	1000cf38 	rdprs	zero,r2,828
1000cd48:	1000cd88 	cmpgei	zero,r2,822
1000cd4c:	1000cda4 	muli	zero,r2,822
1000cd50:	1000cda4 	muli	zero,r2,822
1000cd54:	1000cf0c 	andi	zero,r2,828
1000cd58:	1000cd88 	cmpgei	zero,r2,822
1000cd5c:	1000cd98 	cmpnei	zero,r2,822
1000cd60:	1000cd98 	cmpnei	zero,r2,822
1000cd64:	1000cd98 	cmpnei	zero,r2,822
1000cd68:	1000cf48 	cmpgei	zero,r2,829
1000cd6c:	8904b03a 	or	r2,r17,r4
1000cd70:	1000631e 	bne	r2,zero,1000cf00 <__divdf3+0x2c4>
1000cd74:	05000204 	movi	r20,8
1000cd78:	0023883a 	mov	r17,zero
1000cd7c:	0027883a 	mov	r19,zero
1000cd80:	02000084 	movi	r8,2
1000cd84:	003fcc06 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000cd88:	8023883a 	mov	r17,r16
1000cd8c:	a827883a 	mov	r19,r21
1000cd90:	4839883a 	mov	fp,r9
1000cd94:	3811883a 	mov	r8,r7
1000cd98:	00800084 	movi	r2,2
1000cd9c:	4081531e 	bne	r8,r2,1000d2ec <__divdf3+0x6b0>
1000cda0:	e029883a 	mov	r20,fp
1000cda4:	a180004c 	andi	r6,r20,1
1000cda8:	0201ffc4 	movi	r8,2047
1000cdac:	000b883a 	mov	r5,zero
1000cdb0:	0027883a 	mov	r19,zero
1000cdb4:	4010953a 	slli	r8,r8,20
1000cdb8:	30c03fcc 	andi	r3,r6,255
1000cdbc:	04000434 	movhi	r16,16
1000cdc0:	180697fa 	slli	r3,r3,31
1000cdc4:	843fffc4 	addi	r16,r16,-1
1000cdc8:	2c20703a 	and	r16,r5,r16
1000cdcc:	8220b03a 	or	r16,r16,r8
1000cdd0:	80c6b03a 	or	r3,r16,r3
1000cdd4:	9805883a 	mov	r2,r19
1000cdd8:	dfc00f17 	ldw	ra,60(sp)
1000cddc:	df000e17 	ldw	fp,56(sp)
1000cde0:	ddc00d17 	ldw	r23,52(sp)
1000cde4:	dd800c17 	ldw	r22,48(sp)
1000cde8:	dd400b17 	ldw	r21,44(sp)
1000cdec:	dd000a17 	ldw	r20,40(sp)
1000cdf0:	dcc00917 	ldw	r19,36(sp)
1000cdf4:	dc800817 	ldw	r18,32(sp)
1000cdf8:	dc400717 	ldw	r17,28(sp)
1000cdfc:	dc000617 	ldw	r16,24(sp)
1000ce00:	dec01004 	addi	sp,sp,64
1000ce04:	f800283a 	ret
1000ce08:	8904b03a 	or	r2,r17,r4
1000ce0c:	10003726 	beq	r2,zero,1000ceec <__divdf3+0x2b0>
1000ce10:	88014d26 	beq	r17,zero,1000d348 <__divdf3+0x70c>
1000ce14:	8809883a 	mov	r4,r17
1000ce18:	d9800215 	stw	r6,8(sp)
1000ce1c:	d9c00515 	stw	r7,20(sp)
1000ce20:	000eb380 	call	1000eb38 <__clzsi2>
1000ce24:	d9800217 	ldw	r6,8(sp)
1000ce28:	d9c00517 	ldw	r7,20(sp)
1000ce2c:	1007883a 	mov	r3,r2
1000ce30:	01000a04 	movi	r4,40
1000ce34:	1cfffe04 	addi	r19,r3,-8
1000ce38:	20c9c83a 	sub	r4,r4,r3
1000ce3c:	8cca983a 	sll	r5,r17,r19
1000ce40:	a108d83a 	srl	r4,r20,r4
1000ce44:	a4e6983a 	sll	r19,r20,r19
1000ce48:	2162b03a 	or	r17,r4,r5
1000ce4c:	04bf0344 	movi	r18,-1011
1000ce50:	90e5c83a 	sub	r18,r18,r3
1000ce54:	0029883a 	mov	r20,zero
1000ce58:	0011883a 	mov	r8,zero
1000ce5c:	003f9606 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000ce60:	8184b03a 	or	r2,r16,r6
1000ce64:	10001f1e 	bne	r2,zero,1000cee4 <__divdf3+0x2a8>
1000ce68:	0021883a 	mov	r16,zero
1000ce6c:	002b883a 	mov	r21,zero
1000ce70:	01c00084 	movi	r7,2
1000ce74:	003fa206 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ce78:	8184b03a 	or	r2,r16,r6
1000ce7c:	10001526 	beq	r2,zero,1000ced4 <__divdf3+0x298>
1000ce80:	80013d26 	beq	r16,zero,1000d378 <__divdf3+0x73c>
1000ce84:	8009883a 	mov	r4,r16
1000ce88:	d9800215 	stw	r6,8(sp)
1000ce8c:	da000315 	stw	r8,12(sp)
1000ce90:	da400415 	stw	r9,16(sp)
1000ce94:	000eb380 	call	1000eb38 <__clzsi2>
1000ce98:	d9800217 	ldw	r6,8(sp)
1000ce9c:	da000317 	ldw	r8,12(sp)
1000cea0:	da400417 	ldw	r9,16(sp)
1000cea4:	1007883a 	mov	r3,r2
1000cea8:	01000a04 	movi	r4,40
1000ceac:	1d7ffe04 	addi	r21,r3,-8
1000ceb0:	20c9c83a 	sub	r4,r4,r3
1000ceb4:	8560983a 	sll	r16,r16,r21
1000ceb8:	3108d83a 	srl	r4,r6,r4
1000cebc:	356a983a 	sll	r21,r6,r21
1000cec0:	2420b03a 	or	r16,r4,r16
1000cec4:	017f0344 	movi	r5,-1011
1000cec8:	28cbc83a 	sub	r5,r5,r3
1000cecc:	000f883a 	mov	r7,zero
1000ced0:	003f8b06 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ced4:	0021883a 	mov	r16,zero
1000ced8:	002b883a 	mov	r21,zero
1000cedc:	01c00044 	movi	r7,1
1000cee0:	003f8706 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000cee4:	01c000c4 	movi	r7,3
1000cee8:	003f8506 	br	1000cd00 <__alt_data_end+0xf800cd00>
1000ceec:	05000104 	movi	r20,4
1000cef0:	0023883a 	mov	r17,zero
1000cef4:	0027883a 	mov	r19,zero
1000cef8:	02000044 	movi	r8,1
1000cefc:	003f6e06 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000cf00:	05000304 	movi	r20,12
1000cf04:	020000c4 	movi	r8,3
1000cf08:	003f6b06 	br	1000ccb8 <__alt_data_end+0xf800ccb8>
1000cf0c:	01400434 	movhi	r5,16
1000cf10:	000d883a 	mov	r6,zero
1000cf14:	297fffc4 	addi	r5,r5,-1
1000cf18:	04ffffc4 	movi	r19,-1
1000cf1c:	0201ffc4 	movi	r8,2047
1000cf20:	003fa406 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000cf24:	043f0084 	movi	r16,-1022
1000cf28:	84a1c83a 	sub	r16,r16,r18
1000cf2c:	00800e04 	movi	r2,56
1000cf30:	14014d0e 	bge	r2,r16,1000d468 <__divdf3+0x82c>
1000cf34:	a180004c 	andi	r6,r20,1
1000cf38:	0011883a 	mov	r8,zero
1000cf3c:	000b883a 	mov	r5,zero
1000cf40:	0027883a 	mov	r19,zero
1000cf44:	003f9b06 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000cf48:	8880022c 	andhi	r2,r17,8
1000cf4c:	1000f026 	beq	r2,zero,1000d310 <__divdf3+0x6d4>
1000cf50:	8080022c 	andhi	r2,r16,8
1000cf54:	1000ee1e 	bne	r2,zero,1000d310 <__divdf3+0x6d4>
1000cf58:	00800434 	movhi	r2,16
1000cf5c:	81400234 	orhi	r5,r16,8
1000cf60:	10bfffc4 	addi	r2,r2,-1
1000cf64:	b80d883a 	mov	r6,r23
1000cf68:	288a703a 	and	r5,r5,r2
1000cf6c:	a827883a 	mov	r19,r21
1000cf70:	003fea06 	br	1000cf1c <__alt_data_end+0xf800cf1c>
1000cf74:	84411c36 	bltu	r16,r17,1000d3e8 <__divdf3+0x7ac>
1000cf78:	8c011a26 	beq	r17,r16,1000d3e4 <__divdf3+0x7a8>
1000cf7c:	94bfffc4 	addi	r18,r18,-1
1000cf80:	dcc00015 	stw	r19,0(sp)
1000cf84:	8811883a 	mov	r8,r17
1000cf88:	002d883a 	mov	r22,zero
1000cf8c:	a80cd63a 	srli	r6,r21,24
1000cf90:	8020923a 	slli	r16,r16,8
1000cf94:	a82a923a 	slli	r21,r21,8
1000cf98:	4009883a 	mov	r4,r8
1000cf9c:	342eb03a 	or	r23,r6,r16
1000cfa0:	dd400115 	stw	r21,4(sp)
1000cfa4:	b82ad43a 	srli	r21,r23,16
1000cfa8:	da000315 	stw	r8,12(sp)
1000cfac:	bcffffcc 	andi	r19,r23,65535
1000cfb0:	a80b883a 	mov	r5,r21
1000cfb4:	000c3680 	call	1000c368 <__udivsi3>
1000cfb8:	1009883a 	mov	r4,r2
1000cfbc:	980b883a 	mov	r5,r19
1000cfc0:	1023883a 	mov	r17,r2
1000cfc4:	000c3780 	call	1000c378 <__mulsi3>
1000cfc8:	da000317 	ldw	r8,12(sp)
1000cfcc:	a80b883a 	mov	r5,r21
1000cfd0:	1039883a 	mov	fp,r2
1000cfd4:	4009883a 	mov	r4,r8
1000cfd8:	000c3700 	call	1000c370 <__umodsi3>
1000cfdc:	d8c00017 	ldw	r3,0(sp)
1000cfe0:	1004943a 	slli	r2,r2,16
1000cfe4:	1810d43a 	srli	r8,r3,16
1000cfe8:	120eb03a 	or	r7,r2,r8
1000cfec:	3f00062e 	bgeu	r7,fp,1000d008 <__divdf3+0x3cc>
1000cff0:	3dcf883a 	add	r7,r7,r23
1000cff4:	88bfffc4 	addi	r2,r17,-1
1000cff8:	3dc10a36 	bltu	r7,r23,1000d424 <__divdf3+0x7e8>
1000cffc:	3f01092e 	bgeu	r7,fp,1000d424 <__divdf3+0x7e8>
1000d000:	8c7fff84 	addi	r17,r17,-2
1000d004:	3dcf883a 	add	r7,r7,r23
1000d008:	3f39c83a 	sub	fp,r7,fp
1000d00c:	e009883a 	mov	r4,fp
1000d010:	a80b883a 	mov	r5,r21
1000d014:	000c3680 	call	1000c368 <__udivsi3>
1000d018:	1009883a 	mov	r4,r2
1000d01c:	980b883a 	mov	r5,r19
1000d020:	1021883a 	mov	r16,r2
1000d024:	000c3780 	call	1000c378 <__mulsi3>
1000d028:	e009883a 	mov	r4,fp
1000d02c:	a80b883a 	mov	r5,r21
1000d030:	d8800315 	stw	r2,12(sp)
1000d034:	000c3700 	call	1000c370 <__umodsi3>
1000d038:	d9000017 	ldw	r4,0(sp)
1000d03c:	1004943a 	slli	r2,r2,16
1000d040:	da000317 	ldw	r8,12(sp)
1000d044:	20ffffcc 	andi	r3,r4,65535
1000d048:	10ceb03a 	or	r7,r2,r3
1000d04c:	3a00062e 	bgeu	r7,r8,1000d068 <__divdf3+0x42c>
1000d050:	3dcf883a 	add	r7,r7,r23
1000d054:	80bfffc4 	addi	r2,r16,-1
1000d058:	3dc0f036 	bltu	r7,r23,1000d41c <__divdf3+0x7e0>
1000d05c:	3a00ef2e 	bgeu	r7,r8,1000d41c <__divdf3+0x7e0>
1000d060:	843fff84 	addi	r16,r16,-2
1000d064:	3dcf883a 	add	r7,r7,r23
1000d068:	d8c00117 	ldw	r3,4(sp)
1000d06c:	8822943a 	slli	r17,r17,16
1000d070:	3a0fc83a 	sub	r7,r7,r8
1000d074:	1806d43a 	srli	r3,r3,16
1000d078:	8462b03a 	or	r17,r16,r17
1000d07c:	8affffcc 	andi	r11,r17,65535
1000d080:	d8c00015 	stw	r3,0(sp)
1000d084:	d8c00117 	ldw	r3,4(sp)
1000d088:	8820d43a 	srli	r16,r17,16
1000d08c:	5809883a 	mov	r4,r11
1000d090:	1f3fffcc 	andi	fp,r3,65535
1000d094:	e00b883a 	mov	r5,fp
1000d098:	d9c00515 	stw	r7,20(sp)
1000d09c:	dac00215 	stw	r11,8(sp)
1000d0a0:	000c3780 	call	1000c378 <__mulsi3>
1000d0a4:	8009883a 	mov	r4,r16
1000d0a8:	e00b883a 	mov	r5,fp
1000d0ac:	d8800415 	stw	r2,16(sp)
1000d0b0:	000c3780 	call	1000c378 <__mulsi3>
1000d0b4:	d9400017 	ldw	r5,0(sp)
1000d0b8:	8009883a 	mov	r4,r16
1000d0bc:	d8800315 	stw	r2,12(sp)
1000d0c0:	000c3780 	call	1000c378 <__mulsi3>
1000d0c4:	dac00217 	ldw	r11,8(sp)
1000d0c8:	d9400017 	ldw	r5,0(sp)
1000d0cc:	d8800215 	stw	r2,8(sp)
1000d0d0:	5809883a 	mov	r4,r11
1000d0d4:	000c3780 	call	1000c378 <__mulsi3>
1000d0d8:	da400417 	ldw	r9,16(sp)
1000d0dc:	da800317 	ldw	r10,12(sp)
1000d0e0:	d9c00517 	ldw	r7,20(sp)
1000d0e4:	480ad43a 	srli	r5,r9,16
1000d0e8:	5085883a 	add	r2,r10,r2
1000d0ec:	db000217 	ldw	r12,8(sp)
1000d0f0:	1151883a 	add	r8,r2,r5
1000d0f4:	4280022e 	bgeu	r8,r10,1000d100 <__divdf3+0x4c4>
1000d0f8:	00800074 	movhi	r2,1
1000d0fc:	6099883a 	add	r12,r12,r2
1000d100:	400ad43a 	srli	r5,r8,16
1000d104:	4010943a 	slli	r8,r8,16
1000d108:	4c3fffcc 	andi	r16,r9,65535
1000d10c:	6149883a 	add	r4,r12,r5
1000d110:	4411883a 	add	r8,r8,r16
1000d114:	3900a736 	bltu	r7,r4,1000d3b4 <__divdf3+0x778>
1000d118:	3900c426 	beq	r7,r4,1000d42c <__divdf3+0x7f0>
1000d11c:	3909c83a 	sub	r4,r7,r4
1000d120:	b221c83a 	sub	r16,r22,r8
1000d124:	b42d803a 	cmpltu	r22,r22,r16
1000d128:	25adc83a 	sub	r22,r4,r22
1000d12c:	b5c0c626 	beq	r22,r23,1000d448 <__divdf3+0x80c>
1000d130:	b009883a 	mov	r4,r22
1000d134:	a80b883a 	mov	r5,r21
1000d138:	000c3680 	call	1000c368 <__udivsi3>
1000d13c:	1009883a 	mov	r4,r2
1000d140:	980b883a 	mov	r5,r19
1000d144:	d8800315 	stw	r2,12(sp)
1000d148:	000c3780 	call	1000c378 <__mulsi3>
1000d14c:	a80b883a 	mov	r5,r21
1000d150:	b009883a 	mov	r4,r22
1000d154:	d8800415 	stw	r2,16(sp)
1000d158:	000c3700 	call	1000c370 <__umodsi3>
1000d15c:	1004943a 	slli	r2,r2,16
1000d160:	800ed43a 	srli	r7,r16,16
1000d164:	da400417 	ldw	r9,16(sp)
1000d168:	da000317 	ldw	r8,12(sp)
1000d16c:	11cab03a 	or	r5,r2,r7
1000d170:	2a40062e 	bgeu	r5,r9,1000d18c <__divdf3+0x550>
1000d174:	2dcb883a 	add	r5,r5,r23
1000d178:	40bfffc4 	addi	r2,r8,-1
1000d17c:	2dc0b436 	bltu	r5,r23,1000d450 <__divdf3+0x814>
1000d180:	2a40b32e 	bgeu	r5,r9,1000d450 <__divdf3+0x814>
1000d184:	423fff84 	addi	r8,r8,-2
1000d188:	2dcb883a 	add	r5,r5,r23
1000d18c:	2a6dc83a 	sub	r22,r5,r9
1000d190:	b009883a 	mov	r4,r22
1000d194:	a80b883a 	mov	r5,r21
1000d198:	da000315 	stw	r8,12(sp)
1000d19c:	000c3680 	call	1000c368 <__udivsi3>
1000d1a0:	980b883a 	mov	r5,r19
1000d1a4:	1009883a 	mov	r4,r2
1000d1a8:	d8800415 	stw	r2,16(sp)
1000d1ac:	000c3780 	call	1000c378 <__mulsi3>
1000d1b0:	b009883a 	mov	r4,r22
1000d1b4:	a80b883a 	mov	r5,r21
1000d1b8:	1027883a 	mov	r19,r2
1000d1bc:	000c3700 	call	1000c370 <__umodsi3>
1000d1c0:	1004943a 	slli	r2,r2,16
1000d1c4:	843fffcc 	andi	r16,r16,65535
1000d1c8:	da000317 	ldw	r8,12(sp)
1000d1cc:	140eb03a 	or	r7,r2,r16
1000d1d0:	da400417 	ldw	r9,16(sp)
1000d1d4:	3cc0062e 	bgeu	r7,r19,1000d1f0 <__divdf3+0x5b4>
1000d1d8:	3dcf883a 	add	r7,r7,r23
1000d1dc:	48bfffc4 	addi	r2,r9,-1
1000d1e0:	3dc09d36 	bltu	r7,r23,1000d458 <__divdf3+0x81c>
1000d1e4:	3cc09c2e 	bgeu	r7,r19,1000d458 <__divdf3+0x81c>
1000d1e8:	4a7fff84 	addi	r9,r9,-2
1000d1ec:	3dcf883a 	add	r7,r7,r23
1000d1f0:	4010943a 	slli	r8,r8,16
1000d1f4:	3cebc83a 	sub	r21,r7,r19
1000d1f8:	e00b883a 	mov	r5,fp
1000d1fc:	4a26b03a 	or	r19,r9,r8
1000d200:	99ffffcc 	andi	r7,r19,65535
1000d204:	9820d43a 	srli	r16,r19,16
1000d208:	3809883a 	mov	r4,r7
1000d20c:	d9c00515 	stw	r7,20(sp)
1000d210:	000c3780 	call	1000c378 <__mulsi3>
1000d214:	8009883a 	mov	r4,r16
1000d218:	e00b883a 	mov	r5,fp
1000d21c:	102d883a 	mov	r22,r2
1000d220:	000c3780 	call	1000c378 <__mulsi3>
1000d224:	d9400017 	ldw	r5,0(sp)
1000d228:	8009883a 	mov	r4,r16
1000d22c:	1039883a 	mov	fp,r2
1000d230:	000c3780 	call	1000c378 <__mulsi3>
1000d234:	d9c00517 	ldw	r7,20(sp)
1000d238:	d9400017 	ldw	r5,0(sp)
1000d23c:	1021883a 	mov	r16,r2
1000d240:	3809883a 	mov	r4,r7
1000d244:	000c3780 	call	1000c378 <__mulsi3>
1000d248:	b008d43a 	srli	r4,r22,16
1000d24c:	e085883a 	add	r2,fp,r2
1000d250:	1109883a 	add	r4,r2,r4
1000d254:	2700022e 	bgeu	r4,fp,1000d260 <__divdf3+0x624>
1000d258:	00800074 	movhi	r2,1
1000d25c:	80a1883a 	add	r16,r16,r2
1000d260:	200ad43a 	srli	r5,r4,16
1000d264:	2008943a 	slli	r4,r4,16
1000d268:	b5bfffcc 	andi	r22,r22,65535
1000d26c:	8145883a 	add	r2,r16,r5
1000d270:	2589883a 	add	r4,r4,r22
1000d274:	a8802c36 	bltu	r21,r2,1000d328 <__divdf3+0x6ec>
1000d278:	a880a426 	beq	r21,r2,1000d50c <__divdf3+0x8d0>
1000d27c:	9cc00054 	ori	r19,r19,1
1000d280:	9200ffc4 	addi	r8,r18,1023
1000d284:	023f270e 	bge	zero,r8,1000cf24 <__alt_data_end+0xf800cf24>
1000d288:	988001cc 	andi	r2,r19,7
1000d28c:	10000726 	beq	r2,zero,1000d2ac <__divdf3+0x670>
1000d290:	990003cc 	andi	r4,r19,15
1000d294:	00800104 	movi	r2,4
1000d298:	20800426 	beq	r4,r2,1000d2ac <__divdf3+0x670>
1000d29c:	9885883a 	add	r2,r19,r2
1000d2a0:	14e7803a 	cmpltu	r19,r2,r19
1000d2a4:	8ce3883a 	add	r17,r17,r19
1000d2a8:	1027883a 	mov	r19,r2
1000d2ac:	8880402c 	andhi	r2,r17,256
1000d2b0:	10000426 	beq	r2,zero,1000d2c4 <__divdf3+0x688>
1000d2b4:	00bfc034 	movhi	r2,65280
1000d2b8:	10bfffc4 	addi	r2,r2,-1
1000d2bc:	92010004 	addi	r8,r18,1024
1000d2c0:	88a2703a 	and	r17,r17,r2
1000d2c4:	0081ff84 	movi	r2,2046
1000d2c8:	123eb616 	blt	r2,r8,1000cda4 <__alt_data_end+0xf800cda4>
1000d2cc:	9826d0fa 	srli	r19,r19,3
1000d2d0:	8804977a 	slli	r2,r17,29
1000d2d4:	8820927a 	slli	r16,r17,9
1000d2d8:	4201ffcc 	andi	r8,r8,2047
1000d2dc:	14e6b03a 	or	r19,r2,r19
1000d2e0:	800ad33a 	srli	r5,r16,12
1000d2e4:	a180004c 	andi	r6,r20,1
1000d2e8:	003eb206 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d2ec:	008000c4 	movi	r2,3
1000d2f0:	4080ac26 	beq	r8,r2,1000d5a4 <__divdf3+0x968>
1000d2f4:	00800044 	movi	r2,1
1000d2f8:	4080591e 	bne	r8,r2,1000d460 <__divdf3+0x824>
1000d2fc:	e00d883a 	mov	r6,fp
1000d300:	0011883a 	mov	r8,zero
1000d304:	000b883a 	mov	r5,zero
1000d308:	0027883a 	mov	r19,zero
1000d30c:	003ea906 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d310:	00800434 	movhi	r2,16
1000d314:	89400234 	orhi	r5,r17,8
1000d318:	10bfffc4 	addi	r2,r2,-1
1000d31c:	b00d883a 	mov	r6,r22
1000d320:	288a703a 	and	r5,r5,r2
1000d324:	003efd06 	br	1000cf1c <__alt_data_end+0xf800cf1c>
1000d328:	adcf883a 	add	r7,r21,r23
1000d32c:	997fffc4 	addi	r5,r19,-1
1000d330:	3dc0412e 	bgeu	r7,r23,1000d438 <__divdf3+0x7fc>
1000d334:	2827883a 	mov	r19,r5
1000d338:	38bfd01e 	bne	r7,r2,1000d27c <__alt_data_end+0xf800d27c>
1000d33c:	d8c00117 	ldw	r3,4(sp)
1000d340:	193fce1e 	bne	r3,r4,1000d27c <__alt_data_end+0xf800d27c>
1000d344:	003fce06 	br	1000d280 <__alt_data_end+0xf800d280>
1000d348:	d9800215 	stw	r6,8(sp)
1000d34c:	d9c00515 	stw	r7,20(sp)
1000d350:	000eb380 	call	1000eb38 <__clzsi2>
1000d354:	10c00804 	addi	r3,r2,32
1000d358:	010009c4 	movi	r4,39
1000d35c:	d9800217 	ldw	r6,8(sp)
1000d360:	d9c00517 	ldw	r7,20(sp)
1000d364:	20feb20e 	bge	r4,r3,1000ce30 <__alt_data_end+0xf800ce30>
1000d368:	117ffe04 	addi	r5,r2,-8
1000d36c:	a162983a 	sll	r17,r20,r5
1000d370:	0027883a 	mov	r19,zero
1000d374:	003eb506 	br	1000ce4c <__alt_data_end+0xf800ce4c>
1000d378:	3009883a 	mov	r4,r6
1000d37c:	d9800215 	stw	r6,8(sp)
1000d380:	da000315 	stw	r8,12(sp)
1000d384:	da400415 	stw	r9,16(sp)
1000d388:	000eb380 	call	1000eb38 <__clzsi2>
1000d38c:	10c00804 	addi	r3,r2,32
1000d390:	010009c4 	movi	r4,39
1000d394:	d9800217 	ldw	r6,8(sp)
1000d398:	da000317 	ldw	r8,12(sp)
1000d39c:	da400417 	ldw	r9,16(sp)
1000d3a0:	20fec10e 	bge	r4,r3,1000cea8 <__alt_data_end+0xf800cea8>
1000d3a4:	10bffe04 	addi	r2,r2,-8
1000d3a8:	a8a0983a 	sll	r16,r21,r2
1000d3ac:	002b883a 	mov	r21,zero
1000d3b0:	003ec406 	br	1000cec4 <__alt_data_end+0xf800cec4>
1000d3b4:	d8c00117 	ldw	r3,4(sp)
1000d3b8:	b0ed883a 	add	r22,r22,r3
1000d3bc:	b0c5803a 	cmpltu	r2,r22,r3
1000d3c0:	15c5883a 	add	r2,r2,r23
1000d3c4:	11cf883a 	add	r7,r2,r7
1000d3c8:	88bfffc4 	addi	r2,r17,-1
1000d3cc:	b9c00d2e 	bgeu	r23,r7,1000d404 <__divdf3+0x7c8>
1000d3d0:	39003f36 	bltu	r7,r4,1000d4d0 <__divdf3+0x894>
1000d3d4:	21c06a26 	beq	r4,r7,1000d580 <__divdf3+0x944>
1000d3d8:	3909c83a 	sub	r4,r7,r4
1000d3dc:	1023883a 	mov	r17,r2
1000d3e0:	003f4f06 	br	1000d120 <__alt_data_end+0xf800d120>
1000d3e4:	9d7ee536 	bltu	r19,r21,1000cf7c <__alt_data_end+0xf800cf7c>
1000d3e8:	982ed07a 	srli	r23,r19,1
1000d3ec:	880497fa 	slli	r2,r17,31
1000d3f0:	8810d07a 	srli	r8,r17,1
1000d3f4:	982c97fa 	slli	r22,r19,31
1000d3f8:	b884b03a 	or	r2,r23,r2
1000d3fc:	d8800015 	stw	r2,0(sp)
1000d400:	003ee206 	br	1000cf8c <__alt_data_end+0xf800cf8c>
1000d404:	3dfff41e 	bne	r7,r23,1000d3d8 <__alt_data_end+0xf800d3d8>
1000d408:	d8c00117 	ldw	r3,4(sp)
1000d40c:	b0fff02e 	bgeu	r22,r3,1000d3d0 <__alt_data_end+0xf800d3d0>
1000d410:	b909c83a 	sub	r4,r23,r4
1000d414:	1023883a 	mov	r17,r2
1000d418:	003f4106 	br	1000d120 <__alt_data_end+0xf800d120>
1000d41c:	1021883a 	mov	r16,r2
1000d420:	003f1106 	br	1000d068 <__alt_data_end+0xf800d068>
1000d424:	1023883a 	mov	r17,r2
1000d428:	003ef706 	br	1000d008 <__alt_data_end+0xf800d008>
1000d42c:	b23fe136 	bltu	r22,r8,1000d3b4 <__alt_data_end+0xf800d3b4>
1000d430:	0009883a 	mov	r4,zero
1000d434:	003f3a06 	br	1000d120 <__alt_data_end+0xf800d120>
1000d438:	38802c36 	bltu	r7,r2,1000d4ec <__divdf3+0x8b0>
1000d43c:	11c05326 	beq	r2,r7,1000d58c <__divdf3+0x950>
1000d440:	2827883a 	mov	r19,r5
1000d444:	003f8d06 	br	1000d27c <__alt_data_end+0xf800d27c>
1000d448:	04ffffc4 	movi	r19,-1
1000d44c:	003f8c06 	br	1000d280 <__alt_data_end+0xf800d280>
1000d450:	1011883a 	mov	r8,r2
1000d454:	003f4d06 	br	1000d18c <__alt_data_end+0xf800d18c>
1000d458:	1013883a 	mov	r9,r2
1000d45c:	003f6406 	br	1000d1f0 <__alt_data_end+0xf800d1f0>
1000d460:	e029883a 	mov	r20,fp
1000d464:	003f8606 	br	1000d280 <__alt_data_end+0xf800d280>
1000d468:	008007c4 	movi	r2,31
1000d46c:	14002a16 	blt	r2,r16,1000d518 <__divdf3+0x8dc>
1000d470:	91410784 	addi	r5,r18,1054
1000d474:	9c0cd83a 	srl	r6,r19,r16
1000d478:	8948983a 	sll	r4,r17,r5
1000d47c:	9944983a 	sll	r2,r19,r5
1000d480:	8c20d83a 	srl	r16,r17,r16
1000d484:	3108b03a 	or	r4,r6,r4
1000d488:	1004c03a 	cmpne	r2,r2,zero
1000d48c:	2084b03a 	or	r2,r4,r2
1000d490:	110001cc 	andi	r4,r2,7
1000d494:	20000726 	beq	r4,zero,1000d4b4 <__divdf3+0x878>
1000d498:	114003cc 	andi	r5,r2,15
1000d49c:	01000104 	movi	r4,4
1000d4a0:	29000426 	beq	r5,r4,1000d4b4 <__divdf3+0x878>
1000d4a4:	11000104 	addi	r4,r2,4
1000d4a8:	2085803a 	cmpltu	r2,r4,r2
1000d4ac:	80a1883a 	add	r16,r16,r2
1000d4b0:	2005883a 	mov	r2,r4
1000d4b4:	8100202c 	andhi	r4,r16,128
1000d4b8:	20002d26 	beq	r4,zero,1000d570 <__divdf3+0x934>
1000d4bc:	a180004c 	andi	r6,r20,1
1000d4c0:	02000044 	movi	r8,1
1000d4c4:	000b883a 	mov	r5,zero
1000d4c8:	0027883a 	mov	r19,zero
1000d4cc:	003e3906 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d4d0:	d8c00117 	ldw	r3,4(sp)
1000d4d4:	8c7fff84 	addi	r17,r17,-2
1000d4d8:	b0ed883a 	add	r22,r22,r3
1000d4dc:	b0c5803a 	cmpltu	r2,r22,r3
1000d4e0:	15c5883a 	add	r2,r2,r23
1000d4e4:	11cf883a 	add	r7,r2,r7
1000d4e8:	003f0c06 	br	1000d11c <__alt_data_end+0xf800d11c>
1000d4ec:	d8c00117 	ldw	r3,4(sp)
1000d4f0:	997fff84 	addi	r5,r19,-2
1000d4f4:	18d1883a 	add	r8,r3,r3
1000d4f8:	40c7803a 	cmpltu	r3,r8,r3
1000d4fc:	1dcd883a 	add	r6,r3,r23
1000d500:	398f883a 	add	r7,r7,r6
1000d504:	da000115 	stw	r8,4(sp)
1000d508:	003f8a06 	br	1000d334 <__alt_data_end+0xf800d334>
1000d50c:	203f861e 	bne	r4,zero,1000d328 <__alt_data_end+0xf800d328>
1000d510:	d8000115 	stw	zero,4(sp)
1000d514:	003f8906 	br	1000d33c <__alt_data_end+0xf800d33c>
1000d518:	00bef884 	movi	r2,-1054
1000d51c:	1485c83a 	sub	r2,r2,r18
1000d520:	01000804 	movi	r4,32
1000d524:	8884d83a 	srl	r2,r17,r2
1000d528:	81001c26 	beq	r16,r4,1000d59c <__divdf3+0x960>
1000d52c:	91010f84 	addi	r4,r18,1086
1000d530:	8908983a 	sll	r4,r17,r4
1000d534:	24c8b03a 	or	r4,r4,r19
1000d538:	2008c03a 	cmpne	r4,r4,zero
1000d53c:	2084b03a 	or	r2,r4,r2
1000d540:	140001cc 	andi	r16,r2,7
1000d544:	8000061e 	bne	r16,zero,1000d560 <__divdf3+0x924>
1000d548:	000b883a 	mov	r5,zero
1000d54c:	1004d0fa 	srli	r2,r2,3
1000d550:	a180004c 	andi	r6,r20,1
1000d554:	0011883a 	mov	r8,zero
1000d558:	1426b03a 	or	r19,r2,r16
1000d55c:	003e1506 	br	1000cdb4 <__alt_data_end+0xf800cdb4>
1000d560:	114003cc 	andi	r5,r2,15
1000d564:	01000104 	movi	r4,4
1000d568:	0021883a 	mov	r16,zero
1000d56c:	293fcd1e 	bne	r5,r4,1000d4a4 <__alt_data_end+0xf800d4a4>
1000d570:	800a927a 	slli	r5,r16,9
1000d574:	8020977a 	slli	r16,r16,29
1000d578:	280ad33a 	srli	r5,r5,12
1000d57c:	003ff306 	br	1000d54c <__alt_data_end+0xf800d54c>
1000d580:	b23fd336 	bltu	r22,r8,1000d4d0 <__alt_data_end+0xf800d4d0>
1000d584:	1023883a 	mov	r17,r2
1000d588:	003fa906 	br	1000d430 <__alt_data_end+0xf800d430>
1000d58c:	d8c00117 	ldw	r3,4(sp)
1000d590:	193fd636 	bltu	r3,r4,1000d4ec <__alt_data_end+0xf800d4ec>
1000d594:	2827883a 	mov	r19,r5
1000d598:	003f6806 	br	1000d33c <__alt_data_end+0xf800d33c>
1000d59c:	0009883a 	mov	r4,zero
1000d5a0:	003fe406 	br	1000d534 <__alt_data_end+0xf800d534>
1000d5a4:	00800434 	movhi	r2,16
1000d5a8:	89400234 	orhi	r5,r17,8
1000d5ac:	10bfffc4 	addi	r2,r2,-1
1000d5b0:	e00d883a 	mov	r6,fp
1000d5b4:	288a703a 	and	r5,r5,r2
1000d5b8:	003e5806 	br	1000cf1c <__alt_data_end+0xf800cf1c>

1000d5bc <__eqdf2>:
1000d5bc:	2804d53a 	srli	r2,r5,20
1000d5c0:	3806d53a 	srli	r3,r7,20
1000d5c4:	02000434 	movhi	r8,16
1000d5c8:	423fffc4 	addi	r8,r8,-1
1000d5cc:	1081ffcc 	andi	r2,r2,2047
1000d5d0:	0241ffc4 	movi	r9,2047
1000d5d4:	2a14703a 	and	r10,r5,r8
1000d5d8:	18c1ffcc 	andi	r3,r3,2047
1000d5dc:	3a10703a 	and	r8,r7,r8
1000d5e0:	280ad7fa 	srli	r5,r5,31
1000d5e4:	380ed7fa 	srli	r7,r7,31
1000d5e8:	12400f26 	beq	r2,r9,1000d628 <__eqdf2+0x6c>
1000d5ec:	0241ffc4 	movi	r9,2047
1000d5f0:	1a400326 	beq	r3,r9,1000d600 <__eqdf2+0x44>
1000d5f4:	10c00526 	beq	r2,r3,1000d60c <__eqdf2+0x50>
1000d5f8:	00800044 	movi	r2,1
1000d5fc:	f800283a 	ret
1000d600:	4192b03a 	or	r9,r8,r6
1000d604:	483ffc1e 	bne	r9,zero,1000d5f8 <__alt_data_end+0xf800d5f8>
1000d608:	10fffb1e 	bne	r2,r3,1000d5f8 <__alt_data_end+0xf800d5f8>
1000d60c:	523ffa1e 	bne	r10,r8,1000d5f8 <__alt_data_end+0xf800d5f8>
1000d610:	21bff91e 	bne	r4,r6,1000d5f8 <__alt_data_end+0xf800d5f8>
1000d614:	29c00826 	beq	r5,r7,1000d638 <__eqdf2+0x7c>
1000d618:	103ff71e 	bne	r2,zero,1000d5f8 <__alt_data_end+0xf800d5f8>
1000d61c:	5104b03a 	or	r2,r10,r4
1000d620:	1004c03a 	cmpne	r2,r2,zero
1000d624:	f800283a 	ret
1000d628:	5112b03a 	or	r9,r10,r4
1000d62c:	483fef26 	beq	r9,zero,1000d5ec <__alt_data_end+0xf800d5ec>
1000d630:	00800044 	movi	r2,1
1000d634:	f800283a 	ret
1000d638:	0005883a 	mov	r2,zero
1000d63c:	f800283a 	ret

1000d640 <__gedf2>:
1000d640:	2804d53a 	srli	r2,r5,20
1000d644:	3806d53a 	srli	r3,r7,20
1000d648:	02000434 	movhi	r8,16
1000d64c:	423fffc4 	addi	r8,r8,-1
1000d650:	0241ffc4 	movi	r9,2047
1000d654:	1081ffcc 	andi	r2,r2,2047
1000d658:	2a14703a 	and	r10,r5,r8
1000d65c:	1a46703a 	and	r3,r3,r9
1000d660:	3a10703a 	and	r8,r7,r8
1000d664:	280ad7fa 	srli	r5,r5,31
1000d668:	380ed7fa 	srli	r7,r7,31
1000d66c:	12400b26 	beq	r2,r9,1000d69c <__gedf2+0x5c>
1000d670:	1a401626 	beq	r3,r9,1000d6cc <__gedf2+0x8c>
1000d674:	10000c1e 	bne	r2,zero,1000d6a8 <__gedf2+0x68>
1000d678:	5112b03a 	or	r9,r10,r4
1000d67c:	4813003a 	cmpeq	r9,r9,zero
1000d680:	4817883a 	mov	r11,r9
1000d684:	18000c1e 	bne	r3,zero,1000d6b8 <__gedf2+0x78>
1000d688:	4198b03a 	or	r12,r8,r6
1000d68c:	60000a1e 	bne	r12,zero,1000d6b8 <__gedf2+0x78>
1000d690:	48001326 	beq	r9,zero,1000d6e0 <__gedf2+0xa0>
1000d694:	0005883a 	mov	r2,zero
1000d698:	f800283a 	ret
1000d69c:	5112b03a 	or	r9,r10,r4
1000d6a0:	4800191e 	bne	r9,zero,1000d708 <__gedf2+0xc8>
1000d6a4:	18800926 	beq	r3,r2,1000d6cc <__gedf2+0x8c>
1000d6a8:	18000b1e 	bne	r3,zero,1000d6d8 <__gedf2+0x98>
1000d6ac:	4192b03a 	or	r9,r8,r6
1000d6b0:	0017883a 	mov	r11,zero
1000d6b4:	48000a26 	beq	r9,zero,1000d6e0 <__gedf2+0xa0>
1000d6b8:	39c03fcc 	andi	r7,r7,255
1000d6bc:	58000726 	beq	r11,zero,1000d6dc <__gedf2+0x9c>
1000d6c0:	3800081e 	bne	r7,zero,1000d6e4 <__gedf2+0xa4>
1000d6c4:	00bfffc4 	movi	r2,-1
1000d6c8:	f800283a 	ret
1000d6cc:	4192b03a 	or	r9,r8,r6
1000d6d0:	48000d1e 	bne	r9,zero,1000d708 <__gedf2+0xc8>
1000d6d4:	103fe826 	beq	r2,zero,1000d678 <__alt_data_end+0xf800d678>
1000d6d8:	39c03fcc 	andi	r7,r7,255
1000d6dc:	29c00326 	beq	r5,r7,1000d6ec <__gedf2+0xac>
1000d6e0:	283ff81e 	bne	r5,zero,1000d6c4 <__alt_data_end+0xf800d6c4>
1000d6e4:	00800044 	movi	r2,1
1000d6e8:	f800283a 	ret
1000d6ec:	18bffc16 	blt	r3,r2,1000d6e0 <__alt_data_end+0xf800d6e0>
1000d6f0:	10c00316 	blt	r2,r3,1000d700 <__gedf2+0xc0>
1000d6f4:	42bffa36 	bltu	r8,r10,1000d6e0 <__alt_data_end+0xf800d6e0>
1000d6f8:	52000526 	beq	r10,r8,1000d710 <__gedf2+0xd0>
1000d6fc:	523fe52e 	bgeu	r10,r8,1000d694 <__alt_data_end+0xf800d694>
1000d700:	283ff026 	beq	r5,zero,1000d6c4 <__alt_data_end+0xf800d6c4>
1000d704:	003ff706 	br	1000d6e4 <__alt_data_end+0xf800d6e4>
1000d708:	00bfff84 	movi	r2,-2
1000d70c:	f800283a 	ret
1000d710:	313ff336 	bltu	r6,r4,1000d6e0 <__alt_data_end+0xf800d6e0>
1000d714:	21bfdf2e 	bgeu	r4,r6,1000d694 <__alt_data_end+0xf800d694>
1000d718:	283fea26 	beq	r5,zero,1000d6c4 <__alt_data_end+0xf800d6c4>
1000d71c:	003ff106 	br	1000d6e4 <__alt_data_end+0xf800d6e4>

1000d720 <__ledf2>:
1000d720:	2804d53a 	srli	r2,r5,20
1000d724:	3810d53a 	srli	r8,r7,20
1000d728:	00c00434 	movhi	r3,16
1000d72c:	18ffffc4 	addi	r3,r3,-1
1000d730:	0241ffc4 	movi	r9,2047
1000d734:	1081ffcc 	andi	r2,r2,2047
1000d738:	28d4703a 	and	r10,r5,r3
1000d73c:	4250703a 	and	r8,r8,r9
1000d740:	38c6703a 	and	r3,r7,r3
1000d744:	280ad7fa 	srli	r5,r5,31
1000d748:	380ed7fa 	srli	r7,r7,31
1000d74c:	12400b26 	beq	r2,r9,1000d77c <__ledf2+0x5c>
1000d750:	42401926 	beq	r8,r9,1000d7b8 <__ledf2+0x98>
1000d754:	10000c1e 	bne	r2,zero,1000d788 <__ledf2+0x68>
1000d758:	5112b03a 	or	r9,r10,r4
1000d75c:	4813003a 	cmpeq	r9,r9,zero
1000d760:	4817883a 	mov	r11,r9
1000d764:	40000f26 	beq	r8,zero,1000d7a4 <__ledf2+0x84>
1000d768:	39c03fcc 	andi	r7,r7,255
1000d76c:	58001826 	beq	r11,zero,1000d7d0 <__ledf2+0xb0>
1000d770:	38000a1e 	bne	r7,zero,1000d79c <__ledf2+0x7c>
1000d774:	00bfffc4 	movi	r2,-1
1000d778:	f800283a 	ret
1000d77c:	5112b03a 	or	r9,r10,r4
1000d780:	48000f1e 	bne	r9,zero,1000d7c0 <__ledf2+0xa0>
1000d784:	40800c26 	beq	r8,r2,1000d7b8 <__ledf2+0x98>
1000d788:	4000101e 	bne	r8,zero,1000d7cc <__ledf2+0xac>
1000d78c:	1992b03a 	or	r9,r3,r6
1000d790:	0017883a 	mov	r11,zero
1000d794:	483ff41e 	bne	r9,zero,1000d768 <__alt_data_end+0xf800d768>
1000d798:	283ff61e 	bne	r5,zero,1000d774 <__alt_data_end+0xf800d774>
1000d79c:	00800044 	movi	r2,1
1000d7a0:	f800283a 	ret
1000d7a4:	1998b03a 	or	r12,r3,r6
1000d7a8:	603fef1e 	bne	r12,zero,1000d768 <__alt_data_end+0xf800d768>
1000d7ac:	483ffa26 	beq	r9,zero,1000d798 <__alt_data_end+0xf800d798>
1000d7b0:	0005883a 	mov	r2,zero
1000d7b4:	f800283a 	ret
1000d7b8:	1992b03a 	or	r9,r3,r6
1000d7bc:	48000226 	beq	r9,zero,1000d7c8 <__ledf2+0xa8>
1000d7c0:	00800084 	movi	r2,2
1000d7c4:	f800283a 	ret
1000d7c8:	103fe326 	beq	r2,zero,1000d758 <__alt_data_end+0xf800d758>
1000d7cc:	39c03fcc 	andi	r7,r7,255
1000d7d0:	29fff11e 	bne	r5,r7,1000d798 <__alt_data_end+0xf800d798>
1000d7d4:	40bff016 	blt	r8,r2,1000d798 <__alt_data_end+0xf800d798>
1000d7d8:	12000316 	blt	r2,r8,1000d7e8 <__ledf2+0xc8>
1000d7dc:	1abfee36 	bltu	r3,r10,1000d798 <__alt_data_end+0xf800d798>
1000d7e0:	50c00326 	beq	r10,r3,1000d7f0 <__ledf2+0xd0>
1000d7e4:	50fff22e 	bgeu	r10,r3,1000d7b0 <__alt_data_end+0xf800d7b0>
1000d7e8:	283fe226 	beq	r5,zero,1000d774 <__alt_data_end+0xf800d774>
1000d7ec:	003feb06 	br	1000d79c <__alt_data_end+0xf800d79c>
1000d7f0:	313fe936 	bltu	r6,r4,1000d798 <__alt_data_end+0xf800d798>
1000d7f4:	21bfee2e 	bgeu	r4,r6,1000d7b0 <__alt_data_end+0xf800d7b0>
1000d7f8:	283fde26 	beq	r5,zero,1000d774 <__alt_data_end+0xf800d774>
1000d7fc:	003fe706 	br	1000d79c <__alt_data_end+0xf800d79c>

1000d800 <__muldf3>:
1000d800:	deffee04 	addi	sp,sp,-72
1000d804:	dd000c15 	stw	r20,48(sp)
1000d808:	2828d53a 	srli	r20,r5,20
1000d80c:	dd400d15 	stw	r21,52(sp)
1000d810:	282ad7fa 	srli	r21,r5,31
1000d814:	dc000815 	stw	r16,32(sp)
1000d818:	04000434 	movhi	r16,16
1000d81c:	ddc00f15 	stw	r23,60(sp)
1000d820:	dcc00b15 	stw	r19,44(sp)
1000d824:	dc800a15 	stw	r18,40(sp)
1000d828:	843fffc4 	addi	r16,r16,-1
1000d82c:	dfc01115 	stw	ra,68(sp)
1000d830:	df001015 	stw	fp,64(sp)
1000d834:	dd800e15 	stw	r22,56(sp)
1000d838:	dc400915 	stw	r17,36(sp)
1000d83c:	a501ffcc 	andi	r20,r20,2047
1000d840:	2025883a 	mov	r18,r4
1000d844:	202f883a 	mov	r23,r4
1000d848:	2c20703a 	and	r16,r5,r16
1000d84c:	a827883a 	mov	r19,r21
1000d850:	aa403fcc 	andi	r9,r21,255
1000d854:	a0005926 	beq	r20,zero,1000d9bc <__muldf3+0x1bc>
1000d858:	0081ffc4 	movi	r2,2047
1000d85c:	a0803426 	beq	r20,r2,1000d930 <__muldf3+0x130>
1000d860:	84000434 	orhi	r16,r16,16
1000d864:	2004d77a 	srli	r2,r4,29
1000d868:	802090fa 	slli	r16,r16,3
1000d86c:	202e90fa 	slli	r23,r4,3
1000d870:	a53f0044 	addi	r20,r20,-1023
1000d874:	80a0b03a 	or	r16,r16,r2
1000d878:	000b883a 	mov	r5,zero
1000d87c:	0039883a 	mov	fp,zero
1000d880:	3806d53a 	srli	r3,r7,20
1000d884:	382cd7fa 	srli	r22,r7,31
1000d888:	00800434 	movhi	r2,16
1000d88c:	10bfffc4 	addi	r2,r2,-1
1000d890:	18c1ffcc 	andi	r3,r3,2047
1000d894:	3025883a 	mov	r18,r6
1000d898:	38a2703a 	and	r17,r7,r2
1000d89c:	b2803fcc 	andi	r10,r22,255
1000d8a0:	18006426 	beq	r3,zero,1000da34 <__muldf3+0x234>
1000d8a4:	0081ffc4 	movi	r2,2047
1000d8a8:	18805c26 	beq	r3,r2,1000da1c <__muldf3+0x21c>
1000d8ac:	8c400434 	orhi	r17,r17,16
1000d8b0:	3004d77a 	srli	r2,r6,29
1000d8b4:	882290fa 	slli	r17,r17,3
1000d8b8:	302490fa 	slli	r18,r6,3
1000d8bc:	18ff0044 	addi	r3,r3,-1023
1000d8c0:	88a2b03a 	or	r17,r17,r2
1000d8c4:	000f883a 	mov	r7,zero
1000d8c8:	394ab03a 	or	r5,r7,r5
1000d8cc:	280a90ba 	slli	r5,r5,2
1000d8d0:	00840074 	movhi	r2,4097
1000d8d4:	10b63c04 	addi	r2,r2,-10000
1000d8d8:	288b883a 	add	r5,r5,r2
1000d8dc:	28800017 	ldw	r2,0(r5)
1000d8e0:	a0c7883a 	add	r3,r20,r3
1000d8e4:	b54cf03a 	xor	r6,r22,r21
1000d8e8:	1a000044 	addi	r8,r3,1
1000d8ec:	1000683a 	jmp	r2
1000d8f0:	1000db34 	orhi	zero,r2,876
1000d8f4:	1000db20 	cmpeqi	zero,r2,876
1000d8f8:	1000db20 	cmpeqi	zero,r2,876
1000d8fc:	1000db0c 	andi	zero,r2,876
1000d900:	1000d94c 	andi	zero,r2,869
1000d904:	1000d94c 	andi	zero,r2,869
1000d908:	1000daf4 	orhi	zero,r2,875
1000d90c:	1000db0c 	andi	zero,r2,876
1000d910:	1000d94c 	andi	zero,r2,869
1000d914:	1000daf4 	orhi	zero,r2,875
1000d918:	1000d94c 	andi	zero,r2,869
1000d91c:	1000db0c 	andi	zero,r2,876
1000d920:	1000d950 	cmplti	zero,r2,869
1000d924:	1000d950 	cmplti	zero,r2,869
1000d928:	1000d950 	cmplti	zero,r2,869
1000d92c:	1000de70 	cmpltui	zero,r2,889
1000d930:	8104b03a 	or	r2,r16,r4
1000d934:	10006c1e 	bne	r2,zero,1000dae8 <__muldf3+0x2e8>
1000d938:	01400204 	movi	r5,8
1000d93c:	0021883a 	mov	r16,zero
1000d940:	002f883a 	mov	r23,zero
1000d944:	07000084 	movi	fp,2
1000d948:	003fcd06 	br	1000d880 <__alt_data_end+0xf800d880>
1000d94c:	3013883a 	mov	r9,r6
1000d950:	00800084 	movi	r2,2
1000d954:	e080501e 	bne	fp,r2,1000da98 <__muldf3+0x298>
1000d958:	4cc0004c 	andi	r19,r9,1
1000d95c:	0101ffc4 	movi	r4,2047
1000d960:	0021883a 	mov	r16,zero
1000d964:	002f883a 	mov	r23,zero
1000d968:	2008953a 	slli	r4,r4,20
1000d96c:	98c03fcc 	andi	r3,r19,255
1000d970:	04400434 	movhi	r17,16
1000d974:	8c7fffc4 	addi	r17,r17,-1
1000d978:	180697fa 	slli	r3,r3,31
1000d97c:	8460703a 	and	r16,r16,r17
1000d980:	8120b03a 	or	r16,r16,r4
1000d984:	80c6b03a 	or	r3,r16,r3
1000d988:	b805883a 	mov	r2,r23
1000d98c:	dfc01117 	ldw	ra,68(sp)
1000d990:	df001017 	ldw	fp,64(sp)
1000d994:	ddc00f17 	ldw	r23,60(sp)
1000d998:	dd800e17 	ldw	r22,56(sp)
1000d99c:	dd400d17 	ldw	r21,52(sp)
1000d9a0:	dd000c17 	ldw	r20,48(sp)
1000d9a4:	dcc00b17 	ldw	r19,44(sp)
1000d9a8:	dc800a17 	ldw	r18,40(sp)
1000d9ac:	dc400917 	ldw	r17,36(sp)
1000d9b0:	dc000817 	ldw	r16,32(sp)
1000d9b4:	dec01204 	addi	sp,sp,72
1000d9b8:	f800283a 	ret
1000d9bc:	8104b03a 	or	r2,r16,r4
1000d9c0:	10004426 	beq	r2,zero,1000dad4 <__muldf3+0x2d4>
1000d9c4:	80014b26 	beq	r16,zero,1000def4 <__muldf3+0x6f4>
1000d9c8:	8009883a 	mov	r4,r16
1000d9cc:	d9800715 	stw	r6,28(sp)
1000d9d0:	d9c00215 	stw	r7,8(sp)
1000d9d4:	da400415 	stw	r9,16(sp)
1000d9d8:	000eb380 	call	1000eb38 <__clzsi2>
1000d9dc:	d9800717 	ldw	r6,28(sp)
1000d9e0:	d9c00217 	ldw	r7,8(sp)
1000d9e4:	da400417 	ldw	r9,16(sp)
1000d9e8:	1007883a 	mov	r3,r2
1000d9ec:	01000a04 	movi	r4,40
1000d9f0:	1dfffe04 	addi	r23,r3,-8
1000d9f4:	20c9c83a 	sub	r4,r4,r3
1000d9f8:	85e0983a 	sll	r16,r16,r23
1000d9fc:	9108d83a 	srl	r4,r18,r4
1000da00:	95ee983a 	sll	r23,r18,r23
1000da04:	2420b03a 	or	r16,r4,r16
1000da08:	053f0344 	movi	r20,-1011
1000da0c:	a0e9c83a 	sub	r20,r20,r3
1000da10:	000b883a 	mov	r5,zero
1000da14:	0039883a 	mov	fp,zero
1000da18:	003f9906 	br	1000d880 <__alt_data_end+0xf800d880>
1000da1c:	8984b03a 	or	r2,r17,r6
1000da20:	10002a1e 	bne	r2,zero,1000dacc <__muldf3+0x2cc>
1000da24:	0023883a 	mov	r17,zero
1000da28:	0025883a 	mov	r18,zero
1000da2c:	01c00084 	movi	r7,2
1000da30:	003fa506 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000da34:	8984b03a 	or	r2,r17,r6
1000da38:	10002026 	beq	r2,zero,1000dabc <__muldf3+0x2bc>
1000da3c:	88011c26 	beq	r17,zero,1000deb0 <__muldf3+0x6b0>
1000da40:	8809883a 	mov	r4,r17
1000da44:	d9400215 	stw	r5,8(sp)
1000da48:	d9800715 	stw	r6,28(sp)
1000da4c:	da400415 	stw	r9,16(sp)
1000da50:	da800315 	stw	r10,12(sp)
1000da54:	000eb380 	call	1000eb38 <__clzsi2>
1000da58:	d9400217 	ldw	r5,8(sp)
1000da5c:	d9800717 	ldw	r6,28(sp)
1000da60:	da400417 	ldw	r9,16(sp)
1000da64:	da800317 	ldw	r10,12(sp)
1000da68:	1007883a 	mov	r3,r2
1000da6c:	01000a04 	movi	r4,40
1000da70:	1cbffe04 	addi	r18,r3,-8
1000da74:	20c9c83a 	sub	r4,r4,r3
1000da78:	8ca2983a 	sll	r17,r17,r18
1000da7c:	3108d83a 	srl	r4,r6,r4
1000da80:	34a4983a 	sll	r18,r6,r18
1000da84:	2462b03a 	or	r17,r4,r17
1000da88:	00bf0344 	movi	r2,-1011
1000da8c:	10c7c83a 	sub	r3,r2,r3
1000da90:	000f883a 	mov	r7,zero
1000da94:	003f8c06 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000da98:	008000c4 	movi	r2,3
1000da9c:	e0816d26 	beq	fp,r2,1000e054 <__muldf3+0x854>
1000daa0:	00800044 	movi	r2,1
1000daa4:	e081321e 	bne	fp,r2,1000df70 <__muldf3+0x770>
1000daa8:	48a6703a 	and	r19,r9,r2
1000daac:	0009883a 	mov	r4,zero
1000dab0:	0021883a 	mov	r16,zero
1000dab4:	002f883a 	mov	r23,zero
1000dab8:	003fab06 	br	1000d968 <__alt_data_end+0xf800d968>
1000dabc:	0023883a 	mov	r17,zero
1000dac0:	0025883a 	mov	r18,zero
1000dac4:	01c00044 	movi	r7,1
1000dac8:	003f7f06 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000dacc:	01c000c4 	movi	r7,3
1000dad0:	003f7d06 	br	1000d8c8 <__alt_data_end+0xf800d8c8>
1000dad4:	01400104 	movi	r5,4
1000dad8:	0021883a 	mov	r16,zero
1000dadc:	002f883a 	mov	r23,zero
1000dae0:	07000044 	movi	fp,1
1000dae4:	003f6606 	br	1000d880 <__alt_data_end+0xf800d880>
1000dae8:	01400304 	movi	r5,12
1000daec:	070000c4 	movi	fp,3
1000daf0:	003f6306 	br	1000d880 <__alt_data_end+0xf800d880>
1000daf4:	04000434 	movhi	r16,16
1000daf8:	0027883a 	mov	r19,zero
1000dafc:	843fffc4 	addi	r16,r16,-1
1000db00:	05ffffc4 	movi	r23,-1
1000db04:	0101ffc4 	movi	r4,2047
1000db08:	003f9706 	br	1000d968 <__alt_data_end+0xf800d968>
1000db0c:	8821883a 	mov	r16,r17
1000db10:	902f883a 	mov	r23,r18
1000db14:	5013883a 	mov	r9,r10
1000db18:	3839883a 	mov	fp,r7
1000db1c:	003f8c06 	br	1000d950 <__alt_data_end+0xf800d950>
1000db20:	8821883a 	mov	r16,r17
1000db24:	902f883a 	mov	r23,r18
1000db28:	3013883a 	mov	r9,r6
1000db2c:	3839883a 	mov	fp,r7
1000db30:	003f8706 	br	1000d950 <__alt_data_end+0xf800d950>
1000db34:	b82ad43a 	srli	r21,r23,16
1000db38:	9038d43a 	srli	fp,r18,16
1000db3c:	bdffffcc 	andi	r23,r23,65535
1000db40:	94bfffcc 	andi	r18,r18,65535
1000db44:	9009883a 	mov	r4,r18
1000db48:	b80b883a 	mov	r5,r23
1000db4c:	d8c00515 	stw	r3,20(sp)
1000db50:	d9800715 	stw	r6,28(sp)
1000db54:	da000615 	stw	r8,24(sp)
1000db58:	000c3780 	call	1000c378 <__mulsi3>
1000db5c:	9009883a 	mov	r4,r18
1000db60:	a80b883a 	mov	r5,r21
1000db64:	1029883a 	mov	r20,r2
1000db68:	000c3780 	call	1000c378 <__mulsi3>
1000db6c:	e009883a 	mov	r4,fp
1000db70:	a80b883a 	mov	r5,r21
1000db74:	102d883a 	mov	r22,r2
1000db78:	000c3780 	call	1000c378 <__mulsi3>
1000db7c:	e009883a 	mov	r4,fp
1000db80:	b80b883a 	mov	r5,r23
1000db84:	1027883a 	mov	r19,r2
1000db88:	000c3780 	call	1000c378 <__mulsi3>
1000db8c:	a008d43a 	srli	r4,r20,16
1000db90:	b085883a 	add	r2,r22,r2
1000db94:	d8c00517 	ldw	r3,20(sp)
1000db98:	110f883a 	add	r7,r2,r4
1000db9c:	d9800717 	ldw	r6,28(sp)
1000dba0:	da000617 	ldw	r8,24(sp)
1000dba4:	3d80022e 	bgeu	r7,r22,1000dbb0 <__muldf3+0x3b0>
1000dba8:	00800074 	movhi	r2,1
1000dbac:	98a7883a 	add	r19,r19,r2
1000dbb0:	3804943a 	slli	r2,r7,16
1000dbb4:	380ed43a 	srli	r7,r7,16
1000dbb8:	882cd43a 	srli	r22,r17,16
1000dbbc:	a53fffcc 	andi	r20,r20,65535
1000dbc0:	8c7fffcc 	andi	r17,r17,65535
1000dbc4:	1529883a 	add	r20,r2,r20
1000dbc8:	8809883a 	mov	r4,r17
1000dbcc:	b80b883a 	mov	r5,r23
1000dbd0:	d8c00515 	stw	r3,20(sp)
1000dbd4:	d9800715 	stw	r6,28(sp)
1000dbd8:	da000615 	stw	r8,24(sp)
1000dbdc:	d9c00015 	stw	r7,0(sp)
1000dbe0:	dd000115 	stw	r20,4(sp)
1000dbe4:	000c3780 	call	1000c378 <__mulsi3>
1000dbe8:	a80b883a 	mov	r5,r21
1000dbec:	8809883a 	mov	r4,r17
1000dbf0:	d8800415 	stw	r2,16(sp)
1000dbf4:	000c3780 	call	1000c378 <__mulsi3>
1000dbf8:	a80b883a 	mov	r5,r21
1000dbfc:	b009883a 	mov	r4,r22
1000dc00:	1029883a 	mov	r20,r2
1000dc04:	000c3780 	call	1000c378 <__mulsi3>
1000dc08:	b009883a 	mov	r4,r22
1000dc0c:	b80b883a 	mov	r5,r23
1000dc10:	102b883a 	mov	r21,r2
1000dc14:	000c3780 	call	1000c378 <__mulsi3>
1000dc18:	da400417 	ldw	r9,16(sp)
1000dc1c:	a085883a 	add	r2,r20,r2
1000dc20:	d8c00517 	ldw	r3,20(sp)
1000dc24:	4808d43a 	srli	r4,r9,16
1000dc28:	d9800717 	ldw	r6,28(sp)
1000dc2c:	da000617 	ldw	r8,24(sp)
1000dc30:	1109883a 	add	r4,r2,r4
1000dc34:	2500022e 	bgeu	r4,r20,1000dc40 <__muldf3+0x440>
1000dc38:	00800074 	movhi	r2,1
1000dc3c:	a8ab883a 	add	r21,r21,r2
1000dc40:	200e943a 	slli	r7,r4,16
1000dc44:	2004d43a 	srli	r2,r4,16
1000dc48:	802ed43a 	srli	r23,r16,16
1000dc4c:	843fffcc 	andi	r16,r16,65535
1000dc50:	4d3fffcc 	andi	r20,r9,65535
1000dc54:	9009883a 	mov	r4,r18
1000dc58:	800b883a 	mov	r5,r16
1000dc5c:	3d29883a 	add	r20,r7,r20
1000dc60:	d8c00515 	stw	r3,20(sp)
1000dc64:	d9800715 	stw	r6,28(sp)
1000dc68:	da000615 	stw	r8,24(sp)
1000dc6c:	a8ab883a 	add	r21,r21,r2
1000dc70:	000c3780 	call	1000c378 <__mulsi3>
1000dc74:	9009883a 	mov	r4,r18
1000dc78:	b80b883a 	mov	r5,r23
1000dc7c:	d8800315 	stw	r2,12(sp)
1000dc80:	000c3780 	call	1000c378 <__mulsi3>
1000dc84:	e009883a 	mov	r4,fp
1000dc88:	b80b883a 	mov	r5,r23
1000dc8c:	1025883a 	mov	r18,r2
1000dc90:	000c3780 	call	1000c378 <__mulsi3>
1000dc94:	e009883a 	mov	r4,fp
1000dc98:	800b883a 	mov	r5,r16
1000dc9c:	d8800215 	stw	r2,8(sp)
1000dca0:	000c3780 	call	1000c378 <__mulsi3>
1000dca4:	da800317 	ldw	r10,12(sp)
1000dca8:	d9400017 	ldw	r5,0(sp)
1000dcac:	9085883a 	add	r2,r18,r2
1000dcb0:	5008d43a 	srli	r4,r10,16
1000dcb4:	a153883a 	add	r9,r20,r5
1000dcb8:	d8c00517 	ldw	r3,20(sp)
1000dcbc:	1109883a 	add	r4,r2,r4
1000dcc0:	d9800717 	ldw	r6,28(sp)
1000dcc4:	da000617 	ldw	r8,24(sp)
1000dcc8:	dac00217 	ldw	r11,8(sp)
1000dccc:	2480022e 	bgeu	r4,r18,1000dcd8 <__muldf3+0x4d8>
1000dcd0:	00800074 	movhi	r2,1
1000dcd4:	5897883a 	add	r11,r11,r2
1000dcd8:	200e943a 	slli	r7,r4,16
1000dcdc:	2038d43a 	srli	fp,r4,16
1000dce0:	52bfffcc 	andi	r10,r10,65535
1000dce4:	3a8f883a 	add	r7,r7,r10
1000dce8:	8809883a 	mov	r4,r17
1000dcec:	800b883a 	mov	r5,r16
1000dcf0:	d8c00515 	stw	r3,20(sp)
1000dcf4:	d9800715 	stw	r6,28(sp)
1000dcf8:	d9c00215 	stw	r7,8(sp)
1000dcfc:	da000615 	stw	r8,24(sp)
1000dd00:	da400415 	stw	r9,16(sp)
1000dd04:	5f39883a 	add	fp,r11,fp
1000dd08:	000c3780 	call	1000c378 <__mulsi3>
1000dd0c:	8809883a 	mov	r4,r17
1000dd10:	b80b883a 	mov	r5,r23
1000dd14:	1025883a 	mov	r18,r2
1000dd18:	000c3780 	call	1000c378 <__mulsi3>
1000dd1c:	b009883a 	mov	r4,r22
1000dd20:	b80b883a 	mov	r5,r23
1000dd24:	d8800315 	stw	r2,12(sp)
1000dd28:	000c3780 	call	1000c378 <__mulsi3>
1000dd2c:	b009883a 	mov	r4,r22
1000dd30:	800b883a 	mov	r5,r16
1000dd34:	1023883a 	mov	r17,r2
1000dd38:	000c3780 	call	1000c378 <__mulsi3>
1000dd3c:	da800317 	ldw	r10,12(sp)
1000dd40:	9008d43a 	srli	r4,r18,16
1000dd44:	d8c00517 	ldw	r3,20(sp)
1000dd48:	5085883a 	add	r2,r10,r2
1000dd4c:	1109883a 	add	r4,r2,r4
1000dd50:	d9800717 	ldw	r6,28(sp)
1000dd54:	d9c00217 	ldw	r7,8(sp)
1000dd58:	da000617 	ldw	r8,24(sp)
1000dd5c:	da400417 	ldw	r9,16(sp)
1000dd60:	2280022e 	bgeu	r4,r10,1000dd6c <__muldf3+0x56c>
1000dd64:	00800074 	movhi	r2,1
1000dd68:	88a3883a 	add	r17,r17,r2
1000dd6c:	2004943a 	slli	r2,r4,16
1000dd70:	94bfffcc 	andi	r18,r18,65535
1000dd74:	4ce7883a 	add	r19,r9,r19
1000dd78:	14a5883a 	add	r18,r2,r18
1000dd7c:	9d29803a 	cmpltu	r20,r19,r20
1000dd80:	9565883a 	add	r18,r18,r21
1000dd84:	9505883a 	add	r2,r18,r20
1000dd88:	99e7883a 	add	r19,r19,r7
1000dd8c:	99cf803a 	cmpltu	r7,r19,r7
1000dd90:	e08b883a 	add	r5,fp,r2
1000dd94:	2008d43a 	srli	r4,r4,16
1000dd98:	29ef883a 	add	r23,r5,r7
1000dd9c:	1529803a 	cmpltu	r20,r2,r20
1000dda0:	956b803a 	cmpltu	r21,r18,r21
1000dda4:	b9cf803a 	cmpltu	r7,r23,r7
1000dda8:	a564b03a 	or	r18,r20,r21
1000ddac:	2f39803a 	cmpltu	fp,r5,fp
1000ddb0:	9125883a 	add	r18,r18,r4
1000ddb4:	3f38b03a 	or	fp,r7,fp
1000ddb8:	9725883a 	add	r18,r18,fp
1000ddbc:	9804927a 	slli	r2,r19,9
1000ddc0:	9463883a 	add	r17,r18,r17
1000ddc4:	d9000117 	ldw	r4,4(sp)
1000ddc8:	b820d5fa 	srli	r16,r23,23
1000ddcc:	8822927a 	slli	r17,r17,9
1000ddd0:	9826d5fa 	srli	r19,r19,23
1000ddd4:	1104b03a 	or	r2,r2,r4
1000ddd8:	b82e927a 	slli	r23,r23,9
1000dddc:	1004c03a 	cmpne	r2,r2,zero
1000dde0:	8c20b03a 	or	r16,r17,r16
1000dde4:	14e6b03a 	or	r19,r2,r19
1000dde8:	8080402c 	andhi	r2,r16,256
1000ddec:	9deeb03a 	or	r23,r19,r23
1000ddf0:	10000726 	beq	r2,zero,1000de10 <__muldf3+0x610>
1000ddf4:	b804d07a 	srli	r2,r23,1
1000ddf8:	800697fa 	slli	r3,r16,31
1000ddfc:	bdc0004c 	andi	r23,r23,1
1000de00:	8020d07a 	srli	r16,r16,1
1000de04:	b8aeb03a 	or	r23,r23,r2
1000de08:	b8eeb03a 	or	r23,r23,r3
1000de0c:	4007883a 	mov	r3,r8
1000de10:	1900ffc4 	addi	r4,r3,1023
1000de14:	01004d0e 	bge	zero,r4,1000df4c <__muldf3+0x74c>
1000de18:	b88001cc 	andi	r2,r23,7
1000de1c:	10000726 	beq	r2,zero,1000de3c <__muldf3+0x63c>
1000de20:	b94003cc 	andi	r5,r23,15
1000de24:	00800104 	movi	r2,4
1000de28:	28800426 	beq	r5,r2,1000de3c <__muldf3+0x63c>
1000de2c:	b885883a 	add	r2,r23,r2
1000de30:	15ef803a 	cmpltu	r23,r2,r23
1000de34:	85e1883a 	add	r16,r16,r23
1000de38:	102f883a 	mov	r23,r2
1000de3c:	8080402c 	andhi	r2,r16,256
1000de40:	10000426 	beq	r2,zero,1000de54 <__muldf3+0x654>
1000de44:	00bfc034 	movhi	r2,65280
1000de48:	10bfffc4 	addi	r2,r2,-1
1000de4c:	19010004 	addi	r4,r3,1024
1000de50:	80a0703a 	and	r16,r16,r2
1000de54:	0081ff84 	movi	r2,2046
1000de58:	1100340e 	bge	r2,r4,1000df2c <__muldf3+0x72c>
1000de5c:	34c0004c 	andi	r19,r6,1
1000de60:	0101ffc4 	movi	r4,2047
1000de64:	0021883a 	mov	r16,zero
1000de68:	002f883a 	mov	r23,zero
1000de6c:	003ebe06 	br	1000d968 <__alt_data_end+0xf800d968>
1000de70:	8080022c 	andhi	r2,r16,8
1000de74:	10000926 	beq	r2,zero,1000de9c <__muldf3+0x69c>
1000de78:	8880022c 	andhi	r2,r17,8
1000de7c:	1000071e 	bne	r2,zero,1000de9c <__muldf3+0x69c>
1000de80:	00800434 	movhi	r2,16
1000de84:	8c000234 	orhi	r16,r17,8
1000de88:	10bfffc4 	addi	r2,r2,-1
1000de8c:	b027883a 	mov	r19,r22
1000de90:	80a0703a 	and	r16,r16,r2
1000de94:	902f883a 	mov	r23,r18
1000de98:	003f1a06 	br	1000db04 <__alt_data_end+0xf800db04>
1000de9c:	00800434 	movhi	r2,16
1000dea0:	84000234 	orhi	r16,r16,8
1000dea4:	10bfffc4 	addi	r2,r2,-1
1000dea8:	80a0703a 	and	r16,r16,r2
1000deac:	003f1506 	br	1000db04 <__alt_data_end+0xf800db04>
1000deb0:	3009883a 	mov	r4,r6
1000deb4:	d9400215 	stw	r5,8(sp)
1000deb8:	d9800715 	stw	r6,28(sp)
1000debc:	da400415 	stw	r9,16(sp)
1000dec0:	da800315 	stw	r10,12(sp)
1000dec4:	000eb380 	call	1000eb38 <__clzsi2>
1000dec8:	10c00804 	addi	r3,r2,32
1000decc:	010009c4 	movi	r4,39
1000ded0:	d9400217 	ldw	r5,8(sp)
1000ded4:	d9800717 	ldw	r6,28(sp)
1000ded8:	da400417 	ldw	r9,16(sp)
1000dedc:	da800317 	ldw	r10,12(sp)
1000dee0:	20fee20e 	bge	r4,r3,1000da6c <__alt_data_end+0xf800da6c>
1000dee4:	147ffe04 	addi	r17,r2,-8
1000dee8:	9462983a 	sll	r17,r18,r17
1000deec:	0025883a 	mov	r18,zero
1000def0:	003ee506 	br	1000da88 <__alt_data_end+0xf800da88>
1000def4:	d9800715 	stw	r6,28(sp)
1000def8:	d9c00215 	stw	r7,8(sp)
1000defc:	da400415 	stw	r9,16(sp)
1000df00:	000eb380 	call	1000eb38 <__clzsi2>
1000df04:	10c00804 	addi	r3,r2,32
1000df08:	010009c4 	movi	r4,39
1000df0c:	d9800717 	ldw	r6,28(sp)
1000df10:	d9c00217 	ldw	r7,8(sp)
1000df14:	da400417 	ldw	r9,16(sp)
1000df18:	20feb40e 	bge	r4,r3,1000d9ec <__alt_data_end+0xf800d9ec>
1000df1c:	143ffe04 	addi	r16,r2,-8
1000df20:	9420983a 	sll	r16,r18,r16
1000df24:	002f883a 	mov	r23,zero
1000df28:	003eb706 	br	1000da08 <__alt_data_end+0xf800da08>
1000df2c:	8004977a 	slli	r2,r16,29
1000df30:	b82ed0fa 	srli	r23,r23,3
1000df34:	8020927a 	slli	r16,r16,9
1000df38:	2101ffcc 	andi	r4,r4,2047
1000df3c:	15eeb03a 	or	r23,r2,r23
1000df40:	8020d33a 	srli	r16,r16,12
1000df44:	34c0004c 	andi	r19,r6,1
1000df48:	003e8706 	br	1000d968 <__alt_data_end+0xf800d968>
1000df4c:	00bf0084 	movi	r2,-1022
1000df50:	10c5c83a 	sub	r2,r2,r3
1000df54:	01000e04 	movi	r4,56
1000df58:	2080080e 	bge	r4,r2,1000df7c <__muldf3+0x77c>
1000df5c:	34c0004c 	andi	r19,r6,1
1000df60:	0009883a 	mov	r4,zero
1000df64:	0021883a 	mov	r16,zero
1000df68:	002f883a 	mov	r23,zero
1000df6c:	003e7e06 	br	1000d968 <__alt_data_end+0xf800d968>
1000df70:	4007883a 	mov	r3,r8
1000df74:	480d883a 	mov	r6,r9
1000df78:	003fa506 	br	1000de10 <__alt_data_end+0xf800de10>
1000df7c:	010007c4 	movi	r4,31
1000df80:	20801816 	blt	r4,r2,1000dfe4 <__muldf3+0x7e4>
1000df84:	18c10784 	addi	r3,r3,1054
1000df88:	80c8983a 	sll	r4,r16,r3
1000df8c:	b88ad83a 	srl	r5,r23,r2
1000df90:	b8c6983a 	sll	r3,r23,r3
1000df94:	80a0d83a 	srl	r16,r16,r2
1000df98:	2908b03a 	or	r4,r5,r4
1000df9c:	1804c03a 	cmpne	r2,r3,zero
1000dfa0:	2088b03a 	or	r4,r4,r2
1000dfa4:	208001cc 	andi	r2,r4,7
1000dfa8:	10000726 	beq	r2,zero,1000dfc8 <__muldf3+0x7c8>
1000dfac:	20c003cc 	andi	r3,r4,15
1000dfb0:	00800104 	movi	r2,4
1000dfb4:	18800426 	beq	r3,r2,1000dfc8 <__muldf3+0x7c8>
1000dfb8:	20c00104 	addi	r3,r4,4
1000dfbc:	1905803a 	cmpltu	r2,r3,r4
1000dfc0:	80a1883a 	add	r16,r16,r2
1000dfc4:	1809883a 	mov	r4,r3
1000dfc8:	8080202c 	andhi	r2,r16,128
1000dfcc:	10001b26 	beq	r2,zero,1000e03c <__muldf3+0x83c>
1000dfd0:	34c0004c 	andi	r19,r6,1
1000dfd4:	01000044 	movi	r4,1
1000dfd8:	0021883a 	mov	r16,zero
1000dfdc:	002f883a 	mov	r23,zero
1000dfe0:	003e6106 	br	1000d968 <__alt_data_end+0xf800d968>
1000dfe4:	013ef884 	movi	r4,-1054
1000dfe8:	20c9c83a 	sub	r4,r4,r3
1000dfec:	01400804 	movi	r5,32
1000dff0:	8108d83a 	srl	r4,r16,r4
1000dff4:	11401526 	beq	r2,r5,1000e04c <__muldf3+0x84c>
1000dff8:	18c10f84 	addi	r3,r3,1086
1000dffc:	80e0983a 	sll	r16,r16,r3
1000e000:	85eeb03a 	or	r23,r16,r23
1000e004:	b804c03a 	cmpne	r2,r23,zero
1000e008:	1108b03a 	or	r4,r2,r4
1000e00c:	20c001cc 	andi	r3,r4,7
1000e010:	1800061e 	bne	r3,zero,1000e02c <__muldf3+0x82c>
1000e014:	0021883a 	mov	r16,zero
1000e018:	202ed0fa 	srli	r23,r4,3
1000e01c:	34c0004c 	andi	r19,r6,1
1000e020:	0009883a 	mov	r4,zero
1000e024:	b8eeb03a 	or	r23,r23,r3
1000e028:	003e4f06 	br	1000d968 <__alt_data_end+0xf800d968>
1000e02c:	20c003cc 	andi	r3,r4,15
1000e030:	00800104 	movi	r2,4
1000e034:	0021883a 	mov	r16,zero
1000e038:	18bfdf1e 	bne	r3,r2,1000dfb8 <__alt_data_end+0xf800dfb8>
1000e03c:	8004927a 	slli	r2,r16,9
1000e040:	8006977a 	slli	r3,r16,29
1000e044:	1020d33a 	srli	r16,r2,12
1000e048:	003ff306 	br	1000e018 <__alt_data_end+0xf800e018>
1000e04c:	0021883a 	mov	r16,zero
1000e050:	003feb06 	br	1000e000 <__alt_data_end+0xf800e000>
1000e054:	00800434 	movhi	r2,16
1000e058:	84000234 	orhi	r16,r16,8
1000e05c:	10bfffc4 	addi	r2,r2,-1
1000e060:	4cc0004c 	andi	r19,r9,1
1000e064:	80a0703a 	and	r16,r16,r2
1000e068:	003ea606 	br	1000db04 <__alt_data_end+0xf800db04>

1000e06c <__subdf3>:
1000e06c:	00c00434 	movhi	r3,16
1000e070:	18ffffc4 	addi	r3,r3,-1
1000e074:	defffb04 	addi	sp,sp,-20
1000e078:	28d2703a 	and	r9,r5,r3
1000e07c:	3814d53a 	srli	r10,r7,20
1000e080:	38c6703a 	and	r3,r7,r3
1000e084:	3004d77a 	srli	r2,r6,29
1000e088:	dc800215 	stw	r18,8(sp)
1000e08c:	dc000015 	stw	r16,0(sp)
1000e090:	2824d7fa 	srli	r18,r5,31
1000e094:	2820d53a 	srli	r16,r5,20
1000e098:	481290fa 	slli	r9,r9,3
1000e09c:	200ad77a 	srli	r5,r4,29
1000e0a0:	180690fa 	slli	r3,r3,3
1000e0a4:	dc400115 	stw	r17,4(sp)
1000e0a8:	dfc00415 	stw	ra,16(sp)
1000e0ac:	202290fa 	slli	r17,r4,3
1000e0b0:	dcc00315 	stw	r19,12(sp)
1000e0b4:	5281ffcc 	andi	r10,r10,2047
1000e0b8:	0101ffc4 	movi	r4,2047
1000e0bc:	9011883a 	mov	r8,r18
1000e0c0:	8401ffcc 	andi	r16,r16,2047
1000e0c4:	94803fcc 	andi	r18,r18,255
1000e0c8:	494ab03a 	or	r5,r9,r5
1000e0cc:	380ed7fa 	srli	r7,r7,31
1000e0d0:	1886b03a 	or	r3,r3,r2
1000e0d4:	300c90fa 	slli	r6,r6,3
1000e0d8:	51009026 	beq	r10,r4,1000e31c <__subdf3+0x2b0>
1000e0dc:	39c0005c 	xori	r7,r7,1
1000e0e0:	8285c83a 	sub	r2,r16,r10
1000e0e4:	91c06f26 	beq	r18,r7,1000e2a4 <__subdf3+0x238>
1000e0e8:	0080b10e 	bge	zero,r2,1000e3b0 <__subdf3+0x344>
1000e0ec:	50002a1e 	bne	r10,zero,1000e198 <__subdf3+0x12c>
1000e0f0:	1988b03a 	or	r4,r3,r6
1000e0f4:	2000941e 	bne	r4,zero,1000e348 <__subdf3+0x2dc>
1000e0f8:	888001cc 	andi	r2,r17,7
1000e0fc:	10005b26 	beq	r2,zero,1000e26c <__subdf3+0x200>
1000e100:	88c003cc 	andi	r3,r17,15
1000e104:	00800104 	movi	r2,4
1000e108:	18805826 	beq	r3,r2,1000e26c <__subdf3+0x200>
1000e10c:	88c00104 	addi	r3,r17,4
1000e110:	1c63803a 	cmpltu	r17,r3,r17
1000e114:	2c4b883a 	add	r5,r5,r17
1000e118:	2880202c 	andhi	r2,r5,128
1000e11c:	9200004c 	andi	r8,r18,1
1000e120:	1823883a 	mov	r17,r3
1000e124:	10005426 	beq	r2,zero,1000e278 <__subdf3+0x20c>
1000e128:	84000044 	addi	r16,r16,1
1000e12c:	0081ffc4 	movi	r2,2047
1000e130:	8080bf26 	beq	r16,r2,1000e430 <__subdf3+0x3c4>
1000e134:	013fe034 	movhi	r4,65408
1000e138:	213fffc4 	addi	r4,r4,-1
1000e13c:	290a703a 	and	r5,r5,r4
1000e140:	2804977a 	slli	r2,r5,29
1000e144:	280a927a 	slli	r5,r5,9
1000e148:	8822d0fa 	srli	r17,r17,3
1000e14c:	8401ffcc 	andi	r16,r16,2047
1000e150:	2808d33a 	srli	r4,r5,12
1000e154:	1444b03a 	or	r2,r2,r17
1000e158:	8401ffcc 	andi	r16,r16,2047
1000e15c:	800a953a 	slli	r5,r16,20
1000e160:	40c03fcc 	andi	r3,r8,255
1000e164:	04000434 	movhi	r16,16
1000e168:	180697fa 	slli	r3,r3,31
1000e16c:	843fffc4 	addi	r16,r16,-1
1000e170:	2420703a 	and	r16,r4,r16
1000e174:	8160b03a 	or	r16,r16,r5
1000e178:	80c6b03a 	or	r3,r16,r3
1000e17c:	dfc00417 	ldw	ra,16(sp)
1000e180:	dcc00317 	ldw	r19,12(sp)
1000e184:	dc800217 	ldw	r18,8(sp)
1000e188:	dc400117 	ldw	r17,4(sp)
1000e18c:	dc000017 	ldw	r16,0(sp)
1000e190:	dec00504 	addi	sp,sp,20
1000e194:	f800283a 	ret
1000e198:	0101ffc4 	movi	r4,2047
1000e19c:	813fd626 	beq	r16,r4,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e1a0:	18c02034 	orhi	r3,r3,128
1000e1a4:	01000e04 	movi	r4,56
1000e1a8:	2080a416 	blt	r4,r2,1000e43c <__subdf3+0x3d0>
1000e1ac:	010007c4 	movi	r4,31
1000e1b0:	2080c716 	blt	r4,r2,1000e4d0 <__subdf3+0x464>
1000e1b4:	01000804 	movi	r4,32
1000e1b8:	2089c83a 	sub	r4,r4,r2
1000e1bc:	1910983a 	sll	r8,r3,r4
1000e1c0:	308ed83a 	srl	r7,r6,r2
1000e1c4:	3108983a 	sll	r4,r6,r4
1000e1c8:	1884d83a 	srl	r2,r3,r2
1000e1cc:	41ccb03a 	or	r6,r8,r7
1000e1d0:	2008c03a 	cmpne	r4,r4,zero
1000e1d4:	310cb03a 	or	r6,r6,r4
1000e1d8:	898dc83a 	sub	r6,r17,r6
1000e1dc:	89a3803a 	cmpltu	r17,r17,r6
1000e1e0:	288bc83a 	sub	r5,r5,r2
1000e1e4:	2c4bc83a 	sub	r5,r5,r17
1000e1e8:	3023883a 	mov	r17,r6
1000e1ec:	2880202c 	andhi	r2,r5,128
1000e1f0:	10006b26 	beq	r2,zero,1000e3a0 <__subdf3+0x334>
1000e1f4:	04c02034 	movhi	r19,128
1000e1f8:	9cffffc4 	addi	r19,r19,-1
1000e1fc:	2ce6703a 	and	r19,r5,r19
1000e200:	98007c26 	beq	r19,zero,1000e3f4 <__subdf3+0x388>
1000e204:	9809883a 	mov	r4,r19
1000e208:	000eb380 	call	1000eb38 <__clzsi2>
1000e20c:	10fffe04 	addi	r3,r2,-8
1000e210:	010007c4 	movi	r4,31
1000e214:	20c07d16 	blt	r4,r3,1000e40c <__subdf3+0x3a0>
1000e218:	01400a04 	movi	r5,40
1000e21c:	2885c83a 	sub	r2,r5,r2
1000e220:	888ad83a 	srl	r5,r17,r2
1000e224:	98e6983a 	sll	r19,r19,r3
1000e228:	88e2983a 	sll	r17,r17,r3
1000e22c:	2ce6b03a 	or	r19,r5,r19
1000e230:	1c007a16 	blt	r3,r16,1000e41c <__subdf3+0x3b0>
1000e234:	1c21c83a 	sub	r16,r3,r16
1000e238:	81400044 	addi	r5,r16,1
1000e23c:	00c007c4 	movi	r3,31
1000e240:	19409616 	blt	r3,r5,1000e49c <__subdf3+0x430>
1000e244:	1c21c83a 	sub	r16,r3,r16
1000e248:	8c08983a 	sll	r4,r17,r16
1000e24c:	8946d83a 	srl	r3,r17,r5
1000e250:	9c20983a 	sll	r16,r19,r16
1000e254:	2008c03a 	cmpne	r4,r4,zero
1000e258:	994ad83a 	srl	r5,r19,r5
1000e25c:	1c06b03a 	or	r3,r3,r16
1000e260:	1922b03a 	or	r17,r3,r4
1000e264:	0021883a 	mov	r16,zero
1000e268:	003fa306 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e26c:	2880202c 	andhi	r2,r5,128
1000e270:	9200004c 	andi	r8,r18,1
1000e274:	103fac1e 	bne	r2,zero,1000e128 <__alt_data_end+0xf800e128>
1000e278:	2804977a 	slli	r2,r5,29
1000e27c:	8822d0fa 	srli	r17,r17,3
1000e280:	00c1ffc4 	movi	r3,2047
1000e284:	280ad0fa 	srli	r5,r5,3
1000e288:	1444b03a 	or	r2,r2,r17
1000e28c:	80c02726 	beq	r16,r3,1000e32c <__subdf3+0x2c0>
1000e290:	01000434 	movhi	r4,16
1000e294:	213fffc4 	addi	r4,r4,-1
1000e298:	80e0703a 	and	r16,r16,r3
1000e29c:	2908703a 	and	r4,r5,r4
1000e2a0:	003fad06 	br	1000e158 <__alt_data_end+0xf800e158>
1000e2a4:	0080690e 	bge	zero,r2,1000e44c <__subdf3+0x3e0>
1000e2a8:	50002f26 	beq	r10,zero,1000e368 <__subdf3+0x2fc>
1000e2ac:	0101ffc4 	movi	r4,2047
1000e2b0:	813f9126 	beq	r16,r4,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e2b4:	18c02034 	orhi	r3,r3,128
1000e2b8:	01000e04 	movi	r4,56
1000e2bc:	2080b00e 	bge	r4,r2,1000e580 <__subdf3+0x514>
1000e2c0:	198cb03a 	or	r6,r3,r6
1000e2c4:	300ec03a 	cmpne	r7,r6,zero
1000e2c8:	0005883a 	mov	r2,zero
1000e2cc:	3c4f883a 	add	r7,r7,r17
1000e2d0:	3c63803a 	cmpltu	r17,r7,r17
1000e2d4:	114b883a 	add	r5,r2,r5
1000e2d8:	2c4b883a 	add	r5,r5,r17
1000e2dc:	3823883a 	mov	r17,r7
1000e2e0:	2880202c 	andhi	r2,r5,128
1000e2e4:	10002e26 	beq	r2,zero,1000e3a0 <__subdf3+0x334>
1000e2e8:	84000044 	addi	r16,r16,1
1000e2ec:	0081ffc4 	movi	r2,2047
1000e2f0:	8080de26 	beq	r16,r2,1000e66c <__subdf3+0x600>
1000e2f4:	00bfe034 	movhi	r2,65408
1000e2f8:	10bfffc4 	addi	r2,r2,-1
1000e2fc:	288a703a 	and	r5,r5,r2
1000e300:	880cd07a 	srli	r6,r17,1
1000e304:	280897fa 	slli	r4,r5,31
1000e308:	88c0004c 	andi	r3,r17,1
1000e30c:	30e2b03a 	or	r17,r6,r3
1000e310:	280ad07a 	srli	r5,r5,1
1000e314:	8922b03a 	or	r17,r17,r4
1000e318:	003f7706 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e31c:	1984b03a 	or	r2,r3,r6
1000e320:	103f6e26 	beq	r2,zero,1000e0dc <__alt_data_end+0xf800e0dc>
1000e324:	39c03fcc 	andi	r7,r7,255
1000e328:	003f6d06 	br	1000e0e0 <__alt_data_end+0xf800e0e0>
1000e32c:	1146b03a 	or	r3,r2,r5
1000e330:	18003f26 	beq	r3,zero,1000e430 <__subdf3+0x3c4>
1000e334:	00c00434 	movhi	r3,16
1000e338:	29000234 	orhi	r4,r5,8
1000e33c:	18ffffc4 	addi	r3,r3,-1
1000e340:	20c8703a 	and	r4,r4,r3
1000e344:	003f8406 	br	1000e158 <__alt_data_end+0xf800e158>
1000e348:	10bfffc4 	addi	r2,r2,-1
1000e34c:	1000501e 	bne	r2,zero,1000e490 <__subdf3+0x424>
1000e350:	898fc83a 	sub	r7,r17,r6
1000e354:	89e3803a 	cmpltu	r17,r17,r7
1000e358:	28cbc83a 	sub	r5,r5,r3
1000e35c:	2c4bc83a 	sub	r5,r5,r17
1000e360:	3823883a 	mov	r17,r7
1000e364:	003fa106 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e368:	1988b03a 	or	r4,r3,r6
1000e36c:	203f6226 	beq	r4,zero,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e370:	10bfffc4 	addi	r2,r2,-1
1000e374:	10009b1e 	bne	r2,zero,1000e5e4 <__subdf3+0x578>
1000e378:	344d883a 	add	r6,r6,r17
1000e37c:	3463803a 	cmpltu	r17,r6,r17
1000e380:	194b883a 	add	r5,r3,r5
1000e384:	2c4b883a 	add	r5,r5,r17
1000e388:	3023883a 	mov	r17,r6
1000e38c:	003fd406 	br	1000e2e0 <__alt_data_end+0xf800e2e0>
1000e390:	1106b03a 	or	r3,r2,r4
1000e394:	1800b426 	beq	r3,zero,1000e668 <__subdf3+0x5fc>
1000e398:	100b883a 	mov	r5,r2
1000e39c:	2023883a 	mov	r17,r4
1000e3a0:	888001cc 	andi	r2,r17,7
1000e3a4:	103f561e 	bne	r2,zero,1000e100 <__alt_data_end+0xf800e100>
1000e3a8:	9200004c 	andi	r8,r18,1
1000e3ac:	003fb206 	br	1000e278 <__alt_data_end+0xf800e278>
1000e3b0:	1000531e 	bne	r2,zero,1000e500 <__subdf3+0x494>
1000e3b4:	80800044 	addi	r2,r16,1
1000e3b8:	1081ffcc 	andi	r2,r2,2047
1000e3bc:	01000044 	movi	r4,1
1000e3c0:	2080a00e 	bge	r4,r2,1000e644 <__subdf3+0x5d8>
1000e3c4:	8985c83a 	sub	r2,r17,r6
1000e3c8:	8889803a 	cmpltu	r4,r17,r2
1000e3cc:	28e7c83a 	sub	r19,r5,r3
1000e3d0:	9927c83a 	sub	r19,r19,r4
1000e3d4:	9900202c 	andhi	r4,r19,128
1000e3d8:	20006226 	beq	r4,zero,1000e564 <__subdf3+0x4f8>
1000e3dc:	3463c83a 	sub	r17,r6,r17
1000e3e0:	194bc83a 	sub	r5,r3,r5
1000e3e4:	344d803a 	cmpltu	r6,r6,r17
1000e3e8:	29a7c83a 	sub	r19,r5,r6
1000e3ec:	3825883a 	mov	r18,r7
1000e3f0:	983f841e 	bne	r19,zero,1000e204 <__alt_data_end+0xf800e204>
1000e3f4:	8809883a 	mov	r4,r17
1000e3f8:	000eb380 	call	1000eb38 <__clzsi2>
1000e3fc:	10800804 	addi	r2,r2,32
1000e400:	10fffe04 	addi	r3,r2,-8
1000e404:	010007c4 	movi	r4,31
1000e408:	20ff830e 	bge	r4,r3,1000e218 <__alt_data_end+0xf800e218>
1000e40c:	14fff604 	addi	r19,r2,-40
1000e410:	8ce6983a 	sll	r19,r17,r19
1000e414:	0023883a 	mov	r17,zero
1000e418:	1c3f860e 	bge	r3,r16,1000e234 <__alt_data_end+0xf800e234>
1000e41c:	017fe034 	movhi	r5,65408
1000e420:	297fffc4 	addi	r5,r5,-1
1000e424:	80e1c83a 	sub	r16,r16,r3
1000e428:	994a703a 	and	r5,r19,r5
1000e42c:	003f3206 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e430:	0009883a 	mov	r4,zero
1000e434:	0005883a 	mov	r2,zero
1000e438:	003f4706 	br	1000e158 <__alt_data_end+0xf800e158>
1000e43c:	198cb03a 	or	r6,r3,r6
1000e440:	300cc03a 	cmpne	r6,r6,zero
1000e444:	0005883a 	mov	r2,zero
1000e448:	003f6306 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e44c:	10009d1e 	bne	r2,zero,1000e6c4 <__subdf3+0x658>
1000e450:	81c00044 	addi	r7,r16,1
1000e454:	3881ffcc 	andi	r2,r7,2047
1000e458:	02400044 	movi	r9,1
1000e45c:	4880680e 	bge	r9,r2,1000e600 <__subdf3+0x594>
1000e460:	0081ffc4 	movi	r2,2047
1000e464:	3880ae26 	beq	r7,r2,1000e720 <__subdf3+0x6b4>
1000e468:	344d883a 	add	r6,r6,r17
1000e46c:	3463803a 	cmpltu	r17,r6,r17
1000e470:	194b883a 	add	r5,r3,r5
1000e474:	2c4b883a 	add	r5,r5,r17
1000e478:	282297fa 	slli	r17,r5,31
1000e47c:	300cd07a 	srli	r6,r6,1
1000e480:	280ad07a 	srli	r5,r5,1
1000e484:	3821883a 	mov	r16,r7
1000e488:	89a2b03a 	or	r17,r17,r6
1000e48c:	003f1a06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e490:	0101ffc4 	movi	r4,2047
1000e494:	813f431e 	bne	r16,r4,1000e1a4 <__alt_data_end+0xf800e1a4>
1000e498:	003f1706 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e49c:	80bff844 	addi	r2,r16,-31
1000e4a0:	00c00804 	movi	r3,32
1000e4a4:	9884d83a 	srl	r2,r19,r2
1000e4a8:	28c05126 	beq	r5,r3,1000e5f0 <__subdf3+0x584>
1000e4ac:	00c00fc4 	movi	r3,63
1000e4b0:	1c21c83a 	sub	r16,r3,r16
1000e4b4:	9c26983a 	sll	r19,r19,r16
1000e4b8:	9c62b03a 	or	r17,r19,r17
1000e4bc:	8822c03a 	cmpne	r17,r17,zero
1000e4c0:	88a2b03a 	or	r17,r17,r2
1000e4c4:	000b883a 	mov	r5,zero
1000e4c8:	0021883a 	mov	r16,zero
1000e4cc:	003fb406 	br	1000e3a0 <__alt_data_end+0xf800e3a0>
1000e4d0:	113ff804 	addi	r4,r2,-32
1000e4d4:	01c00804 	movi	r7,32
1000e4d8:	1908d83a 	srl	r4,r3,r4
1000e4dc:	11c04626 	beq	r2,r7,1000e5f8 <__subdf3+0x58c>
1000e4e0:	01c01004 	movi	r7,64
1000e4e4:	3885c83a 	sub	r2,r7,r2
1000e4e8:	1884983a 	sll	r2,r3,r2
1000e4ec:	118cb03a 	or	r6,r2,r6
1000e4f0:	300cc03a 	cmpne	r6,r6,zero
1000e4f4:	310cb03a 	or	r6,r6,r4
1000e4f8:	0005883a 	mov	r2,zero
1000e4fc:	003f3606 	br	1000e1d8 <__alt_data_end+0xf800e1d8>
1000e500:	80002b26 	beq	r16,zero,1000e5b0 <__subdf3+0x544>
1000e504:	0101ffc4 	movi	r4,2047
1000e508:	51006926 	beq	r10,r4,1000e6b0 <__subdf3+0x644>
1000e50c:	0085c83a 	sub	r2,zero,r2
1000e510:	29402034 	orhi	r5,r5,128
1000e514:	01000e04 	movi	r4,56
1000e518:	20807d16 	blt	r4,r2,1000e710 <__subdf3+0x6a4>
1000e51c:	010007c4 	movi	r4,31
1000e520:	2080d916 	blt	r4,r2,1000e888 <__subdf3+0x81c>
1000e524:	01000804 	movi	r4,32
1000e528:	2089c83a 	sub	r4,r4,r2
1000e52c:	2912983a 	sll	r9,r5,r4
1000e530:	8890d83a 	srl	r8,r17,r2
1000e534:	8908983a 	sll	r4,r17,r4
1000e538:	2884d83a 	srl	r2,r5,r2
1000e53c:	4a22b03a 	or	r17,r9,r8
1000e540:	2008c03a 	cmpne	r4,r4,zero
1000e544:	8922b03a 	or	r17,r17,r4
1000e548:	3463c83a 	sub	r17,r6,r17
1000e54c:	1885c83a 	sub	r2,r3,r2
1000e550:	344d803a 	cmpltu	r6,r6,r17
1000e554:	118bc83a 	sub	r5,r2,r6
1000e558:	5021883a 	mov	r16,r10
1000e55c:	3825883a 	mov	r18,r7
1000e560:	003f2206 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e564:	9886b03a 	or	r3,r19,r2
1000e568:	18001c1e 	bne	r3,zero,1000e5dc <__subdf3+0x570>
1000e56c:	0011883a 	mov	r8,zero
1000e570:	000b883a 	mov	r5,zero
1000e574:	0023883a 	mov	r17,zero
1000e578:	0021883a 	mov	r16,zero
1000e57c:	003f3e06 	br	1000e278 <__alt_data_end+0xf800e278>
1000e580:	010007c4 	movi	r4,31
1000e584:	20803c16 	blt	r4,r2,1000e678 <__subdf3+0x60c>
1000e588:	01000804 	movi	r4,32
1000e58c:	2089c83a 	sub	r4,r4,r2
1000e590:	1912983a 	sll	r9,r3,r4
1000e594:	308ed83a 	srl	r7,r6,r2
1000e598:	3108983a 	sll	r4,r6,r4
1000e59c:	1884d83a 	srl	r2,r3,r2
1000e5a0:	49ceb03a 	or	r7,r9,r7
1000e5a4:	2008c03a 	cmpne	r4,r4,zero
1000e5a8:	390eb03a 	or	r7,r7,r4
1000e5ac:	003f4706 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e5b0:	2c48b03a 	or	r4,r5,r17
1000e5b4:	20003e26 	beq	r4,zero,1000e6b0 <__subdf3+0x644>
1000e5b8:	0084303a 	nor	r2,zero,r2
1000e5bc:	10003a1e 	bne	r2,zero,1000e6a8 <__subdf3+0x63c>
1000e5c0:	3463c83a 	sub	r17,r6,r17
1000e5c4:	194bc83a 	sub	r5,r3,r5
1000e5c8:	344d803a 	cmpltu	r6,r6,r17
1000e5cc:	298bc83a 	sub	r5,r5,r6
1000e5d0:	5021883a 	mov	r16,r10
1000e5d4:	3825883a 	mov	r18,r7
1000e5d8:	003f0406 	br	1000e1ec <__alt_data_end+0xf800e1ec>
1000e5dc:	1023883a 	mov	r17,r2
1000e5e0:	003f0706 	br	1000e200 <__alt_data_end+0xf800e200>
1000e5e4:	0101ffc4 	movi	r4,2047
1000e5e8:	813f331e 	bne	r16,r4,1000e2b8 <__alt_data_end+0xf800e2b8>
1000e5ec:	003ec206 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e5f0:	0027883a 	mov	r19,zero
1000e5f4:	003fb006 	br	1000e4b8 <__alt_data_end+0xf800e4b8>
1000e5f8:	0005883a 	mov	r2,zero
1000e5fc:	003fbb06 	br	1000e4ec <__alt_data_end+0xf800e4ec>
1000e600:	2c44b03a 	or	r2,r5,r17
1000e604:	80008b1e 	bne	r16,zero,1000e834 <__subdf3+0x7c8>
1000e608:	1000b526 	beq	r2,zero,1000e8e0 <__subdf3+0x874>
1000e60c:	1984b03a 	or	r2,r3,r6
1000e610:	103eb926 	beq	r2,zero,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e614:	3449883a 	add	r4,r6,r17
1000e618:	2463803a 	cmpltu	r17,r4,r17
1000e61c:	194b883a 	add	r5,r3,r5
1000e620:	2c4b883a 	add	r5,r5,r17
1000e624:	2880202c 	andhi	r2,r5,128
1000e628:	2023883a 	mov	r17,r4
1000e62c:	103f5c26 	beq	r2,zero,1000e3a0 <__alt_data_end+0xf800e3a0>
1000e630:	00bfe034 	movhi	r2,65408
1000e634:	10bfffc4 	addi	r2,r2,-1
1000e638:	4821883a 	mov	r16,r9
1000e63c:	288a703a 	and	r5,r5,r2
1000e640:	003ead06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e644:	2c44b03a 	or	r2,r5,r17
1000e648:	8000291e 	bne	r16,zero,1000e6f0 <__subdf3+0x684>
1000e64c:	10004f1e 	bne	r2,zero,1000e78c <__subdf3+0x720>
1000e650:	1984b03a 	or	r2,r3,r6
1000e654:	10000426 	beq	r2,zero,1000e668 <__subdf3+0x5fc>
1000e658:	180b883a 	mov	r5,r3
1000e65c:	3023883a 	mov	r17,r6
1000e660:	3825883a 	mov	r18,r7
1000e664:	003ea406 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e668:	0011883a 	mov	r8,zero
1000e66c:	000b883a 	mov	r5,zero
1000e670:	0023883a 	mov	r17,zero
1000e674:	003f0006 	br	1000e278 <__alt_data_end+0xf800e278>
1000e678:	11fff804 	addi	r7,r2,-32
1000e67c:	19c8d83a 	srl	r4,r3,r7
1000e680:	01c00804 	movi	r7,32
1000e684:	11c07e26 	beq	r2,r7,1000e880 <__subdf3+0x814>
1000e688:	01c01004 	movi	r7,64
1000e68c:	3885c83a 	sub	r2,r7,r2
1000e690:	1884983a 	sll	r2,r3,r2
1000e694:	118cb03a 	or	r6,r2,r6
1000e698:	300ec03a 	cmpne	r7,r6,zero
1000e69c:	390eb03a 	or	r7,r7,r4
1000e6a0:	0005883a 	mov	r2,zero
1000e6a4:	003f0906 	br	1000e2cc <__alt_data_end+0xf800e2cc>
1000e6a8:	0101ffc4 	movi	r4,2047
1000e6ac:	513f991e 	bne	r10,r4,1000e514 <__alt_data_end+0xf800e514>
1000e6b0:	180b883a 	mov	r5,r3
1000e6b4:	3023883a 	mov	r17,r6
1000e6b8:	5021883a 	mov	r16,r10
1000e6bc:	3825883a 	mov	r18,r7
1000e6c0:	003e8d06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e6c4:	80001a1e 	bne	r16,zero,1000e730 <__subdf3+0x6c4>
1000e6c8:	2c48b03a 	or	r4,r5,r17
1000e6cc:	20005526 	beq	r4,zero,1000e824 <__subdf3+0x7b8>
1000e6d0:	0084303a 	nor	r2,zero,r2
1000e6d4:	1000511e 	bne	r2,zero,1000e81c <__subdf3+0x7b0>
1000e6d8:	89a3883a 	add	r17,r17,r6
1000e6dc:	194b883a 	add	r5,r3,r5
1000e6e0:	898d803a 	cmpltu	r6,r17,r6
1000e6e4:	298b883a 	add	r5,r5,r6
1000e6e8:	5021883a 	mov	r16,r10
1000e6ec:	003efc06 	br	1000e2e0 <__alt_data_end+0xf800e2e0>
1000e6f0:	1000341e 	bne	r2,zero,1000e7c4 <__subdf3+0x758>
1000e6f4:	1984b03a 	or	r2,r3,r6
1000e6f8:	10006f26 	beq	r2,zero,1000e8b8 <__subdf3+0x84c>
1000e6fc:	180b883a 	mov	r5,r3
1000e700:	3023883a 	mov	r17,r6
1000e704:	3825883a 	mov	r18,r7
1000e708:	0401ffc4 	movi	r16,2047
1000e70c:	003e7a06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e710:	2c62b03a 	or	r17,r5,r17
1000e714:	8822c03a 	cmpne	r17,r17,zero
1000e718:	0005883a 	mov	r2,zero
1000e71c:	003f8a06 	br	1000e548 <__alt_data_end+0xf800e548>
1000e720:	3821883a 	mov	r16,r7
1000e724:	000b883a 	mov	r5,zero
1000e728:	0023883a 	mov	r17,zero
1000e72c:	003ed206 	br	1000e278 <__alt_data_end+0xf800e278>
1000e730:	0101ffc4 	movi	r4,2047
1000e734:	51003b26 	beq	r10,r4,1000e824 <__subdf3+0x7b8>
1000e738:	0085c83a 	sub	r2,zero,r2
1000e73c:	29402034 	orhi	r5,r5,128
1000e740:	01000e04 	movi	r4,56
1000e744:	20806216 	blt	r4,r2,1000e8d0 <__subdf3+0x864>
1000e748:	010007c4 	movi	r4,31
1000e74c:	20806b16 	blt	r4,r2,1000e8fc <__subdf3+0x890>
1000e750:	01000804 	movi	r4,32
1000e754:	2089c83a 	sub	r4,r4,r2
1000e758:	2912983a 	sll	r9,r5,r4
1000e75c:	888ed83a 	srl	r7,r17,r2
1000e760:	8908983a 	sll	r4,r17,r4
1000e764:	2884d83a 	srl	r2,r5,r2
1000e768:	49e2b03a 	or	r17,r9,r7
1000e76c:	2008c03a 	cmpne	r4,r4,zero
1000e770:	8922b03a 	or	r17,r17,r4
1000e774:	89a3883a 	add	r17,r17,r6
1000e778:	10c5883a 	add	r2,r2,r3
1000e77c:	898d803a 	cmpltu	r6,r17,r6
1000e780:	118b883a 	add	r5,r2,r6
1000e784:	5021883a 	mov	r16,r10
1000e788:	003ed506 	br	1000e2e0 <__alt_data_end+0xf800e2e0>
1000e78c:	1984b03a 	or	r2,r3,r6
1000e790:	103e5926 	beq	r2,zero,1000e0f8 <__alt_data_end+0xf800e0f8>
1000e794:	8989c83a 	sub	r4,r17,r6
1000e798:	8911803a 	cmpltu	r8,r17,r4
1000e79c:	28c5c83a 	sub	r2,r5,r3
1000e7a0:	1205c83a 	sub	r2,r2,r8
1000e7a4:	1200202c 	andhi	r8,r2,128
1000e7a8:	403ef926 	beq	r8,zero,1000e390 <__alt_data_end+0xf800e390>
1000e7ac:	3463c83a 	sub	r17,r6,r17
1000e7b0:	194bc83a 	sub	r5,r3,r5
1000e7b4:	344d803a 	cmpltu	r6,r6,r17
1000e7b8:	298bc83a 	sub	r5,r5,r6
1000e7bc:	3825883a 	mov	r18,r7
1000e7c0:	003e4d06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e7c4:	1984b03a 	or	r2,r3,r6
1000e7c8:	10002b26 	beq	r2,zero,1000e878 <__subdf3+0x80c>
1000e7cc:	2808d0fa 	srli	r4,r5,3
1000e7d0:	8822d0fa 	srli	r17,r17,3
1000e7d4:	280a977a 	slli	r5,r5,29
1000e7d8:	2080022c 	andhi	r2,r4,8
1000e7dc:	2c62b03a 	or	r17,r5,r17
1000e7e0:	10000826 	beq	r2,zero,1000e804 <__subdf3+0x798>
1000e7e4:	1810d0fa 	srli	r8,r3,3
1000e7e8:	4080022c 	andhi	r2,r8,8
1000e7ec:	1000051e 	bne	r2,zero,1000e804 <__subdf3+0x798>
1000e7f0:	300cd0fa 	srli	r6,r6,3
1000e7f4:	1804977a 	slli	r2,r3,29
1000e7f8:	4009883a 	mov	r4,r8
1000e7fc:	3825883a 	mov	r18,r7
1000e800:	11a2b03a 	or	r17,r2,r6
1000e804:	880ad77a 	srli	r5,r17,29
1000e808:	200890fa 	slli	r4,r4,3
1000e80c:	882290fa 	slli	r17,r17,3
1000e810:	0401ffc4 	movi	r16,2047
1000e814:	290ab03a 	or	r5,r5,r4
1000e818:	003e3706 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e81c:	0101ffc4 	movi	r4,2047
1000e820:	513fc71e 	bne	r10,r4,1000e740 <__alt_data_end+0xf800e740>
1000e824:	180b883a 	mov	r5,r3
1000e828:	3023883a 	mov	r17,r6
1000e82c:	5021883a 	mov	r16,r10
1000e830:	003e3106 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e834:	10002d26 	beq	r2,zero,1000e8ec <__subdf3+0x880>
1000e838:	1984b03a 	or	r2,r3,r6
1000e83c:	10000e26 	beq	r2,zero,1000e878 <__subdf3+0x80c>
1000e840:	2808d0fa 	srli	r4,r5,3
1000e844:	8822d0fa 	srli	r17,r17,3
1000e848:	280a977a 	slli	r5,r5,29
1000e84c:	2080022c 	andhi	r2,r4,8
1000e850:	2c62b03a 	or	r17,r5,r17
1000e854:	103feb26 	beq	r2,zero,1000e804 <__alt_data_end+0xf800e804>
1000e858:	180ed0fa 	srli	r7,r3,3
1000e85c:	3880022c 	andhi	r2,r7,8
1000e860:	103fe81e 	bne	r2,zero,1000e804 <__alt_data_end+0xf800e804>
1000e864:	300cd0fa 	srli	r6,r6,3
1000e868:	1804977a 	slli	r2,r3,29
1000e86c:	3809883a 	mov	r4,r7
1000e870:	11a2b03a 	or	r17,r2,r6
1000e874:	003fe306 	br	1000e804 <__alt_data_end+0xf800e804>
1000e878:	0401ffc4 	movi	r16,2047
1000e87c:	003e1e06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e880:	0005883a 	mov	r2,zero
1000e884:	003f8306 	br	1000e694 <__alt_data_end+0xf800e694>
1000e888:	113ff804 	addi	r4,r2,-32
1000e88c:	02000804 	movi	r8,32
1000e890:	2908d83a 	srl	r4,r5,r4
1000e894:	12002526 	beq	r2,r8,1000e92c <__subdf3+0x8c0>
1000e898:	02001004 	movi	r8,64
1000e89c:	4085c83a 	sub	r2,r8,r2
1000e8a0:	288a983a 	sll	r5,r5,r2
1000e8a4:	2c62b03a 	or	r17,r5,r17
1000e8a8:	8822c03a 	cmpne	r17,r17,zero
1000e8ac:	8922b03a 	or	r17,r17,r4
1000e8b0:	0005883a 	mov	r2,zero
1000e8b4:	003f2406 	br	1000e548 <__alt_data_end+0xf800e548>
1000e8b8:	01402034 	movhi	r5,128
1000e8bc:	0011883a 	mov	r8,zero
1000e8c0:	297fffc4 	addi	r5,r5,-1
1000e8c4:	047ffe04 	movi	r17,-8
1000e8c8:	0401ffc4 	movi	r16,2047
1000e8cc:	003e6a06 	br	1000e278 <__alt_data_end+0xf800e278>
1000e8d0:	2c62b03a 	or	r17,r5,r17
1000e8d4:	8822c03a 	cmpne	r17,r17,zero
1000e8d8:	0005883a 	mov	r2,zero
1000e8dc:	003fa506 	br	1000e774 <__alt_data_end+0xf800e774>
1000e8e0:	180b883a 	mov	r5,r3
1000e8e4:	3023883a 	mov	r17,r6
1000e8e8:	003e0306 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e8ec:	180b883a 	mov	r5,r3
1000e8f0:	3023883a 	mov	r17,r6
1000e8f4:	0401ffc4 	movi	r16,2047
1000e8f8:	003dff06 	br	1000e0f8 <__alt_data_end+0xf800e0f8>
1000e8fc:	113ff804 	addi	r4,r2,-32
1000e900:	01c00804 	movi	r7,32
1000e904:	2908d83a 	srl	r4,r5,r4
1000e908:	11c00a26 	beq	r2,r7,1000e934 <__subdf3+0x8c8>
1000e90c:	01c01004 	movi	r7,64
1000e910:	3885c83a 	sub	r2,r7,r2
1000e914:	288a983a 	sll	r5,r5,r2
1000e918:	2c62b03a 	or	r17,r5,r17
1000e91c:	8822c03a 	cmpne	r17,r17,zero
1000e920:	8922b03a 	or	r17,r17,r4
1000e924:	0005883a 	mov	r2,zero
1000e928:	003f9206 	br	1000e774 <__alt_data_end+0xf800e774>
1000e92c:	000b883a 	mov	r5,zero
1000e930:	003fdc06 	br	1000e8a4 <__alt_data_end+0xf800e8a4>
1000e934:	000b883a 	mov	r5,zero
1000e938:	003ff706 	br	1000e918 <__alt_data_end+0xf800e918>

1000e93c <__fixdfsi>:
1000e93c:	2806d53a 	srli	r3,r5,20
1000e940:	00800434 	movhi	r2,16
1000e944:	10bfffc4 	addi	r2,r2,-1
1000e948:	18c1ffcc 	andi	r3,r3,2047
1000e94c:	0180ff84 	movi	r6,1022
1000e950:	2884703a 	and	r2,r5,r2
1000e954:	280ad7fa 	srli	r5,r5,31
1000e958:	30c0130e 	bge	r6,r3,1000e9a8 <__fixdfsi+0x6c>
1000e95c:	01810744 	movi	r6,1053
1000e960:	30c00d16 	blt	r6,r3,1000e998 <__fixdfsi+0x5c>
1000e964:	01810cc4 	movi	r6,1075
1000e968:	30cdc83a 	sub	r6,r6,r3
1000e96c:	01c007c4 	movi	r7,31
1000e970:	10800434 	orhi	r2,r2,16
1000e974:	39800e0e 	bge	r7,r6,1000e9b0 <__fixdfsi+0x74>
1000e978:	010104c4 	movi	r4,1043
1000e97c:	20c7c83a 	sub	r3,r4,r3
1000e980:	10c6d83a 	srl	r3,r2,r3
1000e984:	29403fcc 	andi	r5,r5,255
1000e988:	0145c83a 	sub	r2,zero,r5
1000e98c:	1884f03a 	xor	r2,r3,r2
1000e990:	1145883a 	add	r2,r2,r5
1000e994:	f800283a 	ret
1000e998:	00a00034 	movhi	r2,32768
1000e99c:	10bfffc4 	addi	r2,r2,-1
1000e9a0:	2885883a 	add	r2,r5,r2
1000e9a4:	f800283a 	ret
1000e9a8:	0005883a 	mov	r2,zero
1000e9ac:	f800283a 	ret
1000e9b0:	18fefb44 	addi	r3,r3,-1043
1000e9b4:	2188d83a 	srl	r4,r4,r6
1000e9b8:	10c6983a 	sll	r3,r2,r3
1000e9bc:	20c6b03a 	or	r3,r4,r3
1000e9c0:	003ff006 	br	1000e984 <__alt_data_end+0xf800e984>

1000e9c4 <__floatsidf>:
1000e9c4:	defffd04 	addi	sp,sp,-12
1000e9c8:	dc400115 	stw	r17,4(sp)
1000e9cc:	dfc00215 	stw	ra,8(sp)
1000e9d0:	dc000015 	stw	r16,0(sp)
1000e9d4:	2023883a 	mov	r17,r4
1000e9d8:	20001426 	beq	r4,zero,1000ea2c <__floatsidf+0x68>
1000e9dc:	2020d7fa 	srli	r16,r4,31
1000e9e0:	80000126 	beq	r16,zero,1000e9e8 <__floatsidf+0x24>
1000e9e4:	0123c83a 	sub	r17,zero,r4
1000e9e8:	8809883a 	mov	r4,r17
1000e9ec:	000eb380 	call	1000eb38 <__clzsi2>
1000e9f0:	01410784 	movi	r5,1054
1000e9f4:	00c00284 	movi	r3,10
1000e9f8:	288bc83a 	sub	r5,r5,r2
1000e9fc:	18801c16 	blt	r3,r2,1000ea70 <__floatsidf+0xac>
1000ea00:	00c002c4 	movi	r3,11
1000ea04:	1887c83a 	sub	r3,r3,r2
1000ea08:	88c8d83a 	srl	r4,r17,r3
1000ea0c:	00c00434 	movhi	r3,16
1000ea10:	18ffffc4 	addi	r3,r3,-1
1000ea14:	10800544 	addi	r2,r2,21
1000ea18:	20c8703a 	and	r4,r4,r3
1000ea1c:	8884983a 	sll	r2,r17,r2
1000ea20:	28c1ffcc 	andi	r3,r5,2047
1000ea24:	800d883a 	mov	r6,r16
1000ea28:	00000406 	br	1000ea3c <__floatsidf+0x78>
1000ea2c:	000d883a 	mov	r6,zero
1000ea30:	0007883a 	mov	r3,zero
1000ea34:	0009883a 	mov	r4,zero
1000ea38:	0005883a 	mov	r2,zero
1000ea3c:	180a953a 	slli	r5,r3,20
1000ea40:	31803fcc 	andi	r6,r6,255
1000ea44:	00c00434 	movhi	r3,16
1000ea48:	300c97fa 	slli	r6,r6,31
1000ea4c:	18ffffc4 	addi	r3,r3,-1
1000ea50:	20c6703a 	and	r3,r4,r3
1000ea54:	1946b03a 	or	r3,r3,r5
1000ea58:	1986b03a 	or	r3,r3,r6
1000ea5c:	dfc00217 	ldw	ra,8(sp)
1000ea60:	dc400117 	ldw	r17,4(sp)
1000ea64:	dc000017 	ldw	r16,0(sp)
1000ea68:	dec00304 	addi	sp,sp,12
1000ea6c:	f800283a 	ret
1000ea70:	10fffd44 	addi	r3,r2,-11
1000ea74:	88c8983a 	sll	r4,r17,r3
1000ea78:	00800434 	movhi	r2,16
1000ea7c:	10bfffc4 	addi	r2,r2,-1
1000ea80:	2088703a 	and	r4,r4,r2
1000ea84:	28c1ffcc 	andi	r3,r5,2047
1000ea88:	800d883a 	mov	r6,r16
1000ea8c:	0005883a 	mov	r2,zero
1000ea90:	003fea06 	br	1000ea3c <__alt_data_end+0xf800ea3c>

1000ea94 <__floatunsidf>:
1000ea94:	defffe04 	addi	sp,sp,-8
1000ea98:	dc000015 	stw	r16,0(sp)
1000ea9c:	dfc00115 	stw	ra,4(sp)
1000eaa0:	2021883a 	mov	r16,r4
1000eaa4:	20001026 	beq	r4,zero,1000eae8 <__floatunsidf+0x54>
1000eaa8:	000eb380 	call	1000eb38 <__clzsi2>
1000eaac:	01410784 	movi	r5,1054
1000eab0:	100d883a 	mov	r6,r2
1000eab4:	288bc83a 	sub	r5,r5,r2
1000eab8:	00800284 	movi	r2,10
1000eabc:	11801616 	blt	r2,r6,1000eb18 <__floatunsidf+0x84>
1000eac0:	008002c4 	movi	r2,11
1000eac4:	1185c83a 	sub	r2,r2,r6
1000eac8:	8084d83a 	srl	r2,r16,r2
1000eacc:	00c00434 	movhi	r3,16
1000ead0:	31c00544 	addi	r7,r6,21
1000ead4:	18ffffc4 	addi	r3,r3,-1
1000ead8:	81e0983a 	sll	r16,r16,r7
1000eadc:	10cc703a 	and	r6,r2,r3
1000eae0:	2941ffcc 	andi	r5,r5,2047
1000eae4:	00000206 	br	1000eaf0 <__floatunsidf+0x5c>
1000eae8:	000b883a 	mov	r5,zero
1000eaec:	000d883a 	mov	r6,zero
1000eaf0:	280a953a 	slli	r5,r5,20
1000eaf4:	00c00434 	movhi	r3,16
1000eaf8:	18ffffc4 	addi	r3,r3,-1
1000eafc:	30c6703a 	and	r3,r6,r3
1000eb00:	8005883a 	mov	r2,r16
1000eb04:	1946b03a 	or	r3,r3,r5
1000eb08:	dfc00117 	ldw	ra,4(sp)
1000eb0c:	dc000017 	ldw	r16,0(sp)
1000eb10:	dec00204 	addi	sp,sp,8
1000eb14:	f800283a 	ret
1000eb18:	31bffd44 	addi	r6,r6,-11
1000eb1c:	818c983a 	sll	r6,r16,r6
1000eb20:	00800434 	movhi	r2,16
1000eb24:	10bfffc4 	addi	r2,r2,-1
1000eb28:	2941ffcc 	andi	r5,r5,2047
1000eb2c:	0021883a 	mov	r16,zero
1000eb30:	308c703a 	and	r6,r6,r2
1000eb34:	003fee06 	br	1000eaf0 <__alt_data_end+0xf800eaf0>

1000eb38 <__clzsi2>:
1000eb38:	00bfffd4 	movui	r2,65535
1000eb3c:	11000b36 	bltu	r2,r4,1000eb6c <__clzsi2+0x34>
1000eb40:	00803fc4 	movi	r2,255
1000eb44:	1100122e 	bgeu	r2,r4,1000eb90 <__clzsi2+0x58>
1000eb48:	00c00204 	movi	r3,8
1000eb4c:	01400604 	movi	r5,24
1000eb50:	20c8d83a 	srl	r4,r4,r3
1000eb54:	00840074 	movhi	r2,4097
1000eb58:	10877004 	addi	r2,r2,7616
1000eb5c:	1109883a 	add	r4,r2,r4
1000eb60:	20800003 	ldbu	r2,0(r4)
1000eb64:	2885c83a 	sub	r2,r5,r2
1000eb68:	f800283a 	ret
1000eb6c:	00804034 	movhi	r2,256
1000eb70:	10bfffc4 	addi	r2,r2,-1
1000eb74:	11000336 	bltu	r2,r4,1000eb84 <__clzsi2+0x4c>
1000eb78:	00c00404 	movi	r3,16
1000eb7c:	180b883a 	mov	r5,r3
1000eb80:	003ff306 	br	1000eb50 <__alt_data_end+0xf800eb50>
1000eb84:	00c00604 	movi	r3,24
1000eb88:	01400204 	movi	r5,8
1000eb8c:	003ff006 	br	1000eb50 <__alt_data_end+0xf800eb50>
1000eb90:	0007883a 	mov	r3,zero
1000eb94:	01400804 	movi	r5,32
1000eb98:	003fed06 	br	1000eb50 <__alt_data_end+0xf800eb50>

1000eb9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000eb9c:	defffe04 	addi	sp,sp,-8
1000eba0:	dfc00115 	stw	ra,4(sp)
1000eba4:	df000015 	stw	fp,0(sp)
1000eba8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ebac:	00840074 	movhi	r2,4097
1000ebb0:	108e7304 	addi	r2,r2,14796
1000ebb4:	10800017 	ldw	r2,0(r2)
1000ebb8:	10000526 	beq	r2,zero,1000ebd0 <alt_get_errno+0x34>
1000ebbc:	00840074 	movhi	r2,4097
1000ebc0:	108e7304 	addi	r2,r2,14796
1000ebc4:	10800017 	ldw	r2,0(r2)
1000ebc8:	103ee83a 	callr	r2
1000ebcc:	00000206 	br	1000ebd8 <alt_get_errno+0x3c>
1000ebd0:	00840074 	movhi	r2,4097
1000ebd4:	10953a04 	addi	r2,r2,21736
}
1000ebd8:	e037883a 	mov	sp,fp
1000ebdc:	dfc00117 	ldw	ra,4(sp)
1000ebe0:	df000017 	ldw	fp,0(sp)
1000ebe4:	dec00204 	addi	sp,sp,8
1000ebe8:	f800283a 	ret

1000ebec <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
1000ebec:	defffb04 	addi	sp,sp,-20
1000ebf0:	dfc00415 	stw	ra,16(sp)
1000ebf4:	df000315 	stw	fp,12(sp)
1000ebf8:	df000304 	addi	fp,sp,12
1000ebfc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
1000ec00:	e0bfff17 	ldw	r2,-4(fp)
1000ec04:	10000816 	blt	r2,zero,1000ec28 <close+0x3c>
1000ec08:	e13fff17 	ldw	r4,-4(fp)
1000ec0c:	01400304 	movi	r5,12
1000ec10:	000c3780 	call	1000c378 <__mulsi3>
1000ec14:	1007883a 	mov	r3,r2
1000ec18:	00840074 	movhi	r2,4097
1000ec1c:	1089f004 	addi	r2,r2,10176
1000ec20:	1885883a 	add	r2,r3,r2
1000ec24:	00000106 	br	1000ec2c <close+0x40>
1000ec28:	0005883a 	mov	r2,zero
1000ec2c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
1000ec30:	e0bffd17 	ldw	r2,-12(fp)
1000ec34:	10001926 	beq	r2,zero,1000ec9c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
1000ec38:	e0bffd17 	ldw	r2,-12(fp)
1000ec3c:	10800017 	ldw	r2,0(r2)
1000ec40:	10800417 	ldw	r2,16(r2)
1000ec44:	10000626 	beq	r2,zero,1000ec60 <close+0x74>
1000ec48:	e0bffd17 	ldw	r2,-12(fp)
1000ec4c:	10800017 	ldw	r2,0(r2)
1000ec50:	10800417 	ldw	r2,16(r2)
1000ec54:	e13ffd17 	ldw	r4,-12(fp)
1000ec58:	103ee83a 	callr	r2
1000ec5c:	00000106 	br	1000ec64 <close+0x78>
1000ec60:	0005883a 	mov	r2,zero
1000ec64:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
1000ec68:	e13fff17 	ldw	r4,-4(fp)
1000ec6c:	000f3100 	call	1000f310 <alt_release_fd>
    if (rval < 0)
1000ec70:	e0bffe17 	ldw	r2,-8(fp)
1000ec74:	1000070e 	bge	r2,zero,1000ec94 <close+0xa8>
    {
      ALT_ERRNO = -rval;
1000ec78:	000eb9c0 	call	1000eb9c <alt_get_errno>
1000ec7c:	1007883a 	mov	r3,r2
1000ec80:	e0bffe17 	ldw	r2,-8(fp)
1000ec84:	0085c83a 	sub	r2,zero,r2
1000ec88:	18800015 	stw	r2,0(r3)
      return -1;
1000ec8c:	00bfffc4 	movi	r2,-1
1000ec90:	00000706 	br	1000ecb0 <close+0xc4>
    }
    return 0;
1000ec94:	0005883a 	mov	r2,zero
1000ec98:	00000506 	br	1000ecb0 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000ec9c:	000eb9c0 	call	1000eb9c <alt_get_errno>
1000eca0:	1007883a 	mov	r3,r2
1000eca4:	00801444 	movi	r2,81
1000eca8:	18800015 	stw	r2,0(r3)
    return -1;
1000ecac:	00bfffc4 	movi	r2,-1
  }
}
1000ecb0:	e037883a 	mov	sp,fp
1000ecb4:	dfc00117 	ldw	ra,4(sp)
1000ecb8:	df000017 	ldw	fp,0(sp)
1000ecbc:	dec00204 	addi	sp,sp,8
1000ecc0:	f800283a 	ret

1000ecc4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
1000ecc4:	defffc04 	addi	sp,sp,-16
1000ecc8:	df000315 	stw	fp,12(sp)
1000eccc:	df000304 	addi	fp,sp,12
1000ecd0:	e13ffd15 	stw	r4,-12(fp)
1000ecd4:	e17ffe15 	stw	r5,-8(fp)
1000ecd8:	e1bfff15 	stw	r6,-4(fp)
  return len;
1000ecdc:	e0bfff17 	ldw	r2,-4(fp)
}
1000ece0:	e037883a 	mov	sp,fp
1000ece4:	df000017 	ldw	fp,0(sp)
1000ece8:	dec00104 	addi	sp,sp,4
1000ecec:	f800283a 	ret

1000ecf0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000ecf0:	defffe04 	addi	sp,sp,-8
1000ecf4:	dfc00115 	stw	ra,4(sp)
1000ecf8:	df000015 	stw	fp,0(sp)
1000ecfc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ed00:	00840074 	movhi	r2,4097
1000ed04:	108e7304 	addi	r2,r2,14796
1000ed08:	10800017 	ldw	r2,0(r2)
1000ed0c:	10000526 	beq	r2,zero,1000ed24 <alt_get_errno+0x34>
1000ed10:	00840074 	movhi	r2,4097
1000ed14:	108e7304 	addi	r2,r2,14796
1000ed18:	10800017 	ldw	r2,0(r2)
1000ed1c:	103ee83a 	callr	r2
1000ed20:	00000206 	br	1000ed2c <alt_get_errno+0x3c>
1000ed24:	00840074 	movhi	r2,4097
1000ed28:	10953a04 	addi	r2,r2,21736
}
1000ed2c:	e037883a 	mov	sp,fp
1000ed30:	dfc00117 	ldw	ra,4(sp)
1000ed34:	df000017 	ldw	fp,0(sp)
1000ed38:	dec00204 	addi	sp,sp,8
1000ed3c:	f800283a 	ret

1000ed40 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
1000ed40:	defffb04 	addi	sp,sp,-20
1000ed44:	dfc00415 	stw	ra,16(sp)
1000ed48:	df000315 	stw	fp,12(sp)
1000ed4c:	df000304 	addi	fp,sp,12
1000ed50:	e13ffe15 	stw	r4,-8(fp)
1000ed54:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ed58:	e0bffe17 	ldw	r2,-8(fp)
1000ed5c:	10000816 	blt	r2,zero,1000ed80 <fstat+0x40>
1000ed60:	e13ffe17 	ldw	r4,-8(fp)
1000ed64:	01400304 	movi	r5,12
1000ed68:	000c3780 	call	1000c378 <__mulsi3>
1000ed6c:	1007883a 	mov	r3,r2
1000ed70:	00840074 	movhi	r2,4097
1000ed74:	1089f004 	addi	r2,r2,10176
1000ed78:	1885883a 	add	r2,r3,r2
1000ed7c:	00000106 	br	1000ed84 <fstat+0x44>
1000ed80:	0005883a 	mov	r2,zero
1000ed84:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
1000ed88:	e0bffd17 	ldw	r2,-12(fp)
1000ed8c:	10001026 	beq	r2,zero,1000edd0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
1000ed90:	e0bffd17 	ldw	r2,-12(fp)
1000ed94:	10800017 	ldw	r2,0(r2)
1000ed98:	10800817 	ldw	r2,32(r2)
1000ed9c:	10000726 	beq	r2,zero,1000edbc <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
1000eda0:	e0bffd17 	ldw	r2,-12(fp)
1000eda4:	10800017 	ldw	r2,0(r2)
1000eda8:	10800817 	ldw	r2,32(r2)
1000edac:	e13ffd17 	ldw	r4,-12(fp)
1000edb0:	e17fff17 	ldw	r5,-4(fp)
1000edb4:	103ee83a 	callr	r2
1000edb8:	00000a06 	br	1000ede4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
1000edbc:	e0bfff17 	ldw	r2,-4(fp)
1000edc0:	00c80004 	movi	r3,8192
1000edc4:	10c00115 	stw	r3,4(r2)
      return 0;
1000edc8:	0005883a 	mov	r2,zero
1000edcc:	00000506 	br	1000ede4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000edd0:	000ecf00 	call	1000ecf0 <alt_get_errno>
1000edd4:	1007883a 	mov	r3,r2
1000edd8:	00801444 	movi	r2,81
1000eddc:	18800015 	stw	r2,0(r3)
    return -1;
1000ede0:	00bfffc4 	movi	r2,-1
  }
}
1000ede4:	e037883a 	mov	sp,fp
1000ede8:	dfc00117 	ldw	ra,4(sp)
1000edec:	df000017 	ldw	fp,0(sp)
1000edf0:	dec00204 	addi	sp,sp,8
1000edf4:	f800283a 	ret

1000edf8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000edf8:	defffe04 	addi	sp,sp,-8
1000edfc:	dfc00115 	stw	ra,4(sp)
1000ee00:	df000015 	stw	fp,0(sp)
1000ee04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000ee08:	00840074 	movhi	r2,4097
1000ee0c:	108e7304 	addi	r2,r2,14796
1000ee10:	10800017 	ldw	r2,0(r2)
1000ee14:	10000526 	beq	r2,zero,1000ee2c <alt_get_errno+0x34>
1000ee18:	00840074 	movhi	r2,4097
1000ee1c:	108e7304 	addi	r2,r2,14796
1000ee20:	10800017 	ldw	r2,0(r2)
1000ee24:	103ee83a 	callr	r2
1000ee28:	00000206 	br	1000ee34 <alt_get_errno+0x3c>
1000ee2c:	00840074 	movhi	r2,4097
1000ee30:	10953a04 	addi	r2,r2,21736
}
1000ee34:	e037883a 	mov	sp,fp
1000ee38:	dfc00117 	ldw	ra,4(sp)
1000ee3c:	df000017 	ldw	fp,0(sp)
1000ee40:	dec00204 	addi	sp,sp,8
1000ee44:	f800283a 	ret

1000ee48 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
1000ee48:	deffed04 	addi	sp,sp,-76
1000ee4c:	dfc01215 	stw	ra,72(sp)
1000ee50:	df001115 	stw	fp,68(sp)
1000ee54:	df001104 	addi	fp,sp,68
1000ee58:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000ee5c:	e0bfff17 	ldw	r2,-4(fp)
1000ee60:	10000816 	blt	r2,zero,1000ee84 <isatty+0x3c>
1000ee64:	e13fff17 	ldw	r4,-4(fp)
1000ee68:	01400304 	movi	r5,12
1000ee6c:	000c3780 	call	1000c378 <__mulsi3>
1000ee70:	1007883a 	mov	r3,r2
1000ee74:	00840074 	movhi	r2,4097
1000ee78:	1089f004 	addi	r2,r2,10176
1000ee7c:	1885883a 	add	r2,r3,r2
1000ee80:	00000106 	br	1000ee88 <isatty+0x40>
1000ee84:	0005883a 	mov	r2,zero
1000ee88:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
1000ee8c:	e0bfef17 	ldw	r2,-68(fp)
1000ee90:	10000e26 	beq	r2,zero,1000eecc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
1000ee94:	e0bfef17 	ldw	r2,-68(fp)
1000ee98:	10800017 	ldw	r2,0(r2)
1000ee9c:	10800817 	ldw	r2,32(r2)
1000eea0:	1000021e 	bne	r2,zero,1000eeac <isatty+0x64>
    {
      return 1;
1000eea4:	00800044 	movi	r2,1
1000eea8:	00000d06 	br	1000eee0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
1000eeac:	e0bff004 	addi	r2,fp,-64
1000eeb0:	e13fff17 	ldw	r4,-4(fp)
1000eeb4:	100b883a 	mov	r5,r2
1000eeb8:	000ed400 	call	1000ed40 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
1000eebc:	e0bff117 	ldw	r2,-60(fp)
1000eec0:	10880020 	cmpeqi	r2,r2,8192
1000eec4:	10803fcc 	andi	r2,r2,255
1000eec8:	00000506 	br	1000eee0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
1000eecc:	000edf80 	call	1000edf8 <alt_get_errno>
1000eed0:	1007883a 	mov	r3,r2
1000eed4:	00801444 	movi	r2,81
1000eed8:	18800015 	stw	r2,0(r3)
    return 0;
1000eedc:	0005883a 	mov	r2,zero
  }
}
1000eee0:	e037883a 	mov	sp,fp
1000eee4:	dfc00117 	ldw	ra,4(sp)
1000eee8:	df000017 	ldw	fp,0(sp)
1000eeec:	dec00204 	addi	sp,sp,8
1000eef0:	f800283a 	ret

1000eef4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
1000eef4:	defffc04 	addi	sp,sp,-16
1000eef8:	df000315 	stw	fp,12(sp)
1000eefc:	df000304 	addi	fp,sp,12
1000ef00:	e13ffd15 	stw	r4,-12(fp)
1000ef04:	e17ffe15 	stw	r5,-8(fp)
1000ef08:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
1000ef0c:	e0fffe17 	ldw	r3,-8(fp)
1000ef10:	e0bffd17 	ldw	r2,-12(fp)
1000ef14:	18800c26 	beq	r3,r2,1000ef48 <alt_load_section+0x54>
  {
    while( to != end )
1000ef18:	00000806 	br	1000ef3c <alt_load_section+0x48>
    {
      *to++ = *from++;
1000ef1c:	e0bffe17 	ldw	r2,-8(fp)
1000ef20:	10c00104 	addi	r3,r2,4
1000ef24:	e0fffe15 	stw	r3,-8(fp)
1000ef28:	e0fffd17 	ldw	r3,-12(fp)
1000ef2c:	19000104 	addi	r4,r3,4
1000ef30:	e13ffd15 	stw	r4,-12(fp)
1000ef34:	18c00017 	ldw	r3,0(r3)
1000ef38:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
1000ef3c:	e0fffe17 	ldw	r3,-8(fp)
1000ef40:	e0bfff17 	ldw	r2,-4(fp)
1000ef44:	18bff51e 	bne	r3,r2,1000ef1c <__alt_data_end+0xf800ef1c>
    {
      *to++ = *from++;
    }
  }
}
1000ef48:	e037883a 	mov	sp,fp
1000ef4c:	df000017 	ldw	fp,0(sp)
1000ef50:	dec00104 	addi	sp,sp,4
1000ef54:	f800283a 	ret

1000ef58 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
1000ef58:	defffe04 	addi	sp,sp,-8
1000ef5c:	dfc00115 	stw	ra,4(sp)
1000ef60:	df000015 	stw	fp,0(sp)
1000ef64:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
1000ef68:	01040074 	movhi	r4,4097
1000ef6c:	210e7804 	addi	r4,r4,14816
1000ef70:	01440074 	movhi	r5,4097
1000ef74:	2947bd04 	addi	r5,r5,7924
1000ef78:	01840074 	movhi	r6,4097
1000ef7c:	318e7804 	addi	r6,r6,14816
1000ef80:	000eef40 	call	1000eef4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
1000ef84:	01040034 	movhi	r4,4096
1000ef88:	21000804 	addi	r4,r4,32
1000ef8c:	01440034 	movhi	r5,4096
1000ef90:	29400804 	addi	r5,r5,32
1000ef94:	01840034 	movhi	r6,4096
1000ef98:	31808b04 	addi	r6,r6,556
1000ef9c:	000eef40 	call	1000eef4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
1000efa0:	01040074 	movhi	r4,4097
1000efa4:	21051f04 	addi	r4,r4,5244
1000efa8:	01440074 	movhi	r5,4097
1000efac:	29451f04 	addi	r5,r5,5244
1000efb0:	01840074 	movhi	r6,4097
1000efb4:	3187bd04 	addi	r6,r6,7924
1000efb8:	000eef40 	call	1000eef4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
1000efbc:	00103580 	call	10010358 <alt_dcache_flush_all>
  alt_icache_flush_all();
1000efc0:	00105200 	call	10010520 <alt_icache_flush_all>
}
1000efc4:	e037883a 	mov	sp,fp
1000efc8:	dfc00117 	ldw	ra,4(sp)
1000efcc:	df000017 	ldw	fp,0(sp)
1000efd0:	dec00204 	addi	sp,sp,8
1000efd4:	f800283a 	ret

1000efd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000efd8:	defffe04 	addi	sp,sp,-8
1000efdc:	dfc00115 	stw	ra,4(sp)
1000efe0:	df000015 	stw	fp,0(sp)
1000efe4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000efe8:	00840074 	movhi	r2,4097
1000efec:	108e7304 	addi	r2,r2,14796
1000eff0:	10800017 	ldw	r2,0(r2)
1000eff4:	10000526 	beq	r2,zero,1000f00c <alt_get_errno+0x34>
1000eff8:	00840074 	movhi	r2,4097
1000effc:	108e7304 	addi	r2,r2,14796
1000f000:	10800017 	ldw	r2,0(r2)
1000f004:	103ee83a 	callr	r2
1000f008:	00000206 	br	1000f014 <alt_get_errno+0x3c>
1000f00c:	00840074 	movhi	r2,4097
1000f010:	10953a04 	addi	r2,r2,21736
}
1000f014:	e037883a 	mov	sp,fp
1000f018:	dfc00117 	ldw	ra,4(sp)
1000f01c:	df000017 	ldw	fp,0(sp)
1000f020:	dec00204 	addi	sp,sp,8
1000f024:	f800283a 	ret

1000f028 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
1000f028:	defff904 	addi	sp,sp,-28
1000f02c:	dfc00615 	stw	ra,24(sp)
1000f030:	df000515 	stw	fp,20(sp)
1000f034:	df000504 	addi	fp,sp,20
1000f038:	e13ffd15 	stw	r4,-12(fp)
1000f03c:	e17ffe15 	stw	r5,-8(fp)
1000f040:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
1000f044:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f048:	e0bffd17 	ldw	r2,-12(fp)
1000f04c:	10000816 	blt	r2,zero,1000f070 <lseek+0x48>
1000f050:	e13ffd17 	ldw	r4,-12(fp)
1000f054:	01400304 	movi	r5,12
1000f058:	000c3780 	call	1000c378 <__mulsi3>
1000f05c:	1007883a 	mov	r3,r2
1000f060:	00840074 	movhi	r2,4097
1000f064:	1089f004 	addi	r2,r2,10176
1000f068:	1885883a 	add	r2,r3,r2
1000f06c:	00000106 	br	1000f074 <lseek+0x4c>
1000f070:	0005883a 	mov	r2,zero
1000f074:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
1000f078:	e0bffc17 	ldw	r2,-16(fp)
1000f07c:	10001026 	beq	r2,zero,1000f0c0 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
1000f080:	e0bffc17 	ldw	r2,-16(fp)
1000f084:	10800017 	ldw	r2,0(r2)
1000f088:	10800717 	ldw	r2,28(r2)
1000f08c:	10000926 	beq	r2,zero,1000f0b4 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
1000f090:	e0bffc17 	ldw	r2,-16(fp)
1000f094:	10800017 	ldw	r2,0(r2)
1000f098:	10800717 	ldw	r2,28(r2)
1000f09c:	e13ffc17 	ldw	r4,-16(fp)
1000f0a0:	e17ffe17 	ldw	r5,-8(fp)
1000f0a4:	e1bfff17 	ldw	r6,-4(fp)
1000f0a8:	103ee83a 	callr	r2
1000f0ac:	e0bffb15 	stw	r2,-20(fp)
1000f0b0:	00000506 	br	1000f0c8 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
1000f0b4:	00bfde84 	movi	r2,-134
1000f0b8:	e0bffb15 	stw	r2,-20(fp)
1000f0bc:	00000206 	br	1000f0c8 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
1000f0c0:	00bfebc4 	movi	r2,-81
1000f0c4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
1000f0c8:	e0bffb17 	ldw	r2,-20(fp)
1000f0cc:	1000070e 	bge	r2,zero,1000f0ec <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
1000f0d0:	000efd80 	call	1000efd8 <alt_get_errno>
1000f0d4:	1007883a 	mov	r3,r2
1000f0d8:	e0bffb17 	ldw	r2,-20(fp)
1000f0dc:	0085c83a 	sub	r2,zero,r2
1000f0e0:	18800015 	stw	r2,0(r3)
    rc = -1;
1000f0e4:	00bfffc4 	movi	r2,-1
1000f0e8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
1000f0ec:	e0bffb17 	ldw	r2,-20(fp)
}
1000f0f0:	e037883a 	mov	sp,fp
1000f0f4:	dfc00117 	ldw	ra,4(sp)
1000f0f8:	df000017 	ldw	fp,0(sp)
1000f0fc:	dec00204 	addi	sp,sp,8
1000f100:	f800283a 	ret

1000f104 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
1000f104:	defffd04 	addi	sp,sp,-12
1000f108:	dfc00215 	stw	ra,8(sp)
1000f10c:	df000115 	stw	fp,4(sp)
1000f110:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
1000f114:	0009883a 	mov	r4,zero
1000f118:	000f5f80 	call	1000f5f8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
1000f11c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
1000f120:	000f62c0 	call	1000f62c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
1000f124:	01040074 	movhi	r4,4097
1000f128:	2107b304 	addi	r4,r4,7884
1000f12c:	01440074 	movhi	r5,4097
1000f130:	2947b304 	addi	r5,r5,7884
1000f134:	01840074 	movhi	r6,4097
1000f138:	3187b304 	addi	r6,r6,7884
1000f13c:	00108ec0 	call	100108ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
1000f140:	00104680 	call	10010468 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
1000f144:	01040074 	movhi	r4,4097
1000f148:	21013104 	addi	r4,r4,1220
1000f14c:	00110d80 	call	100110d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
1000f150:	d126d317 	ldw	r4,-25780(gp)
1000f154:	d0e6d417 	ldw	r3,-25776(gp)
1000f158:	d0a6d517 	ldw	r2,-25772(gp)
1000f15c:	180b883a 	mov	r5,r3
1000f160:	100d883a 	mov	r6,r2
1000f164:	00003a40 	call	100003a4 <main>
1000f168:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
1000f16c:	01000044 	movi	r4,1
1000f170:	000ebec0 	call	1000ebec <close>
  exit (result);
1000f174:	e13fff17 	ldw	r4,-4(fp)
1000f178:	00110ec0 	call	100110ec <exit>

1000f17c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
1000f17c:	defffe04 	addi	sp,sp,-8
1000f180:	df000115 	stw	fp,4(sp)
1000f184:	df000104 	addi	fp,sp,4
1000f188:	e13fff15 	stw	r4,-4(fp)
}
1000f18c:	e037883a 	mov	sp,fp
1000f190:	df000017 	ldw	fp,0(sp)
1000f194:	dec00104 	addi	sp,sp,4
1000f198:	f800283a 	ret

1000f19c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
1000f19c:	defffe04 	addi	sp,sp,-8
1000f1a0:	df000115 	stw	fp,4(sp)
1000f1a4:	df000104 	addi	fp,sp,4
1000f1a8:	e13fff15 	stw	r4,-4(fp)
}
1000f1ac:	e037883a 	mov	sp,fp
1000f1b0:	df000017 	ldw	fp,0(sp)
1000f1b4:	dec00104 	addi	sp,sp,4
1000f1b8:	f800283a 	ret

1000f1bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f1bc:	defffe04 	addi	sp,sp,-8
1000f1c0:	dfc00115 	stw	ra,4(sp)
1000f1c4:	df000015 	stw	fp,0(sp)
1000f1c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f1cc:	00840074 	movhi	r2,4097
1000f1d0:	108e7304 	addi	r2,r2,14796
1000f1d4:	10800017 	ldw	r2,0(r2)
1000f1d8:	10000526 	beq	r2,zero,1000f1f0 <alt_get_errno+0x34>
1000f1dc:	00840074 	movhi	r2,4097
1000f1e0:	108e7304 	addi	r2,r2,14796
1000f1e4:	10800017 	ldw	r2,0(r2)
1000f1e8:	103ee83a 	callr	r2
1000f1ec:	00000206 	br	1000f1f8 <alt_get_errno+0x3c>
1000f1f0:	00840074 	movhi	r2,4097
1000f1f4:	10953a04 	addi	r2,r2,21736
}
1000f1f8:	e037883a 	mov	sp,fp
1000f1fc:	dfc00117 	ldw	ra,4(sp)
1000f200:	df000017 	ldw	fp,0(sp)
1000f204:	dec00204 	addi	sp,sp,8
1000f208:	f800283a 	ret

1000f20c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
1000f20c:	defff904 	addi	sp,sp,-28
1000f210:	dfc00615 	stw	ra,24(sp)
1000f214:	df000515 	stw	fp,20(sp)
1000f218:	df000504 	addi	fp,sp,20
1000f21c:	e13ffd15 	stw	r4,-12(fp)
1000f220:	e17ffe15 	stw	r5,-8(fp)
1000f224:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f228:	e0bffd17 	ldw	r2,-12(fp)
1000f22c:	10000816 	blt	r2,zero,1000f250 <read+0x44>
1000f230:	e13ffd17 	ldw	r4,-12(fp)
1000f234:	01400304 	movi	r5,12
1000f238:	000c3780 	call	1000c378 <__mulsi3>
1000f23c:	1007883a 	mov	r3,r2
1000f240:	00840074 	movhi	r2,4097
1000f244:	1089f004 	addi	r2,r2,10176
1000f248:	1885883a 	add	r2,r3,r2
1000f24c:	00000106 	br	1000f254 <read+0x48>
1000f250:	0005883a 	mov	r2,zero
1000f254:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f258:	e0bffb17 	ldw	r2,-20(fp)
1000f25c:	10002226 	beq	r2,zero,1000f2e8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f260:	e0bffb17 	ldw	r2,-20(fp)
1000f264:	10800217 	ldw	r2,8(r2)
1000f268:	108000cc 	andi	r2,r2,3
1000f26c:	10800060 	cmpeqi	r2,r2,1
1000f270:	1000181e 	bne	r2,zero,1000f2d4 <read+0xc8>
        (fd->dev->read))
1000f274:	e0bffb17 	ldw	r2,-20(fp)
1000f278:	10800017 	ldw	r2,0(r2)
1000f27c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
1000f280:	10001426 	beq	r2,zero,1000f2d4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
1000f284:	e0bffb17 	ldw	r2,-20(fp)
1000f288:	10800017 	ldw	r2,0(r2)
1000f28c:	10800517 	ldw	r2,20(r2)
1000f290:	e0ffff17 	ldw	r3,-4(fp)
1000f294:	e13ffb17 	ldw	r4,-20(fp)
1000f298:	e17ffe17 	ldw	r5,-8(fp)
1000f29c:	180d883a 	mov	r6,r3
1000f2a0:	103ee83a 	callr	r2
1000f2a4:	e0bffc15 	stw	r2,-16(fp)
1000f2a8:	e0bffc17 	ldw	r2,-16(fp)
1000f2ac:	1000070e 	bge	r2,zero,1000f2cc <read+0xc0>
        {
          ALT_ERRNO = -rval;
1000f2b0:	000f1bc0 	call	1000f1bc <alt_get_errno>
1000f2b4:	1007883a 	mov	r3,r2
1000f2b8:	e0bffc17 	ldw	r2,-16(fp)
1000f2bc:	0085c83a 	sub	r2,zero,r2
1000f2c0:	18800015 	stw	r2,0(r3)
          return -1;
1000f2c4:	00bfffc4 	movi	r2,-1
1000f2c8:	00000c06 	br	1000f2fc <read+0xf0>
        }
        return rval;
1000f2cc:	e0bffc17 	ldw	r2,-16(fp)
1000f2d0:	00000a06 	br	1000f2fc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
1000f2d4:	000f1bc0 	call	1000f1bc <alt_get_errno>
1000f2d8:	1007883a 	mov	r3,r2
1000f2dc:	00800344 	movi	r2,13
1000f2e0:	18800015 	stw	r2,0(r3)
1000f2e4:	00000406 	br	1000f2f8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
1000f2e8:	000f1bc0 	call	1000f1bc <alt_get_errno>
1000f2ec:	1007883a 	mov	r3,r2
1000f2f0:	00801444 	movi	r2,81
1000f2f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f2f8:	00bfffc4 	movi	r2,-1
}
1000f2fc:	e037883a 	mov	sp,fp
1000f300:	dfc00117 	ldw	ra,4(sp)
1000f304:	df000017 	ldw	fp,0(sp)
1000f308:	dec00204 	addi	sp,sp,8
1000f30c:	f800283a 	ret

1000f310 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
1000f310:	defffc04 	addi	sp,sp,-16
1000f314:	dfc00315 	stw	ra,12(sp)
1000f318:	df000215 	stw	fp,8(sp)
1000f31c:	dc000115 	stw	r16,4(sp)
1000f320:	df000204 	addi	fp,sp,8
1000f324:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
1000f328:	e0bffe17 	ldw	r2,-8(fp)
1000f32c:	108000d0 	cmplti	r2,r2,3
1000f330:	1000111e 	bne	r2,zero,1000f378 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
1000f334:	04040074 	movhi	r16,4097
1000f338:	8409f004 	addi	r16,r16,10176
1000f33c:	e0bffe17 	ldw	r2,-8(fp)
1000f340:	1009883a 	mov	r4,r2
1000f344:	01400304 	movi	r5,12
1000f348:	000c3780 	call	1000c378 <__mulsi3>
1000f34c:	8085883a 	add	r2,r16,r2
1000f350:	10800204 	addi	r2,r2,8
1000f354:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
1000f358:	04040074 	movhi	r16,4097
1000f35c:	8409f004 	addi	r16,r16,10176
1000f360:	e0bffe17 	ldw	r2,-8(fp)
1000f364:	1009883a 	mov	r4,r2
1000f368:	01400304 	movi	r5,12
1000f36c:	000c3780 	call	1000c378 <__mulsi3>
1000f370:	8085883a 	add	r2,r16,r2
1000f374:	10000015 	stw	zero,0(r2)
  }
}
1000f378:	e6ffff04 	addi	sp,fp,-4
1000f37c:	dfc00217 	ldw	ra,8(sp)
1000f380:	df000117 	ldw	fp,4(sp)
1000f384:	dc000017 	ldw	r16,0(sp)
1000f388:	dec00304 	addi	sp,sp,12
1000f38c:	f800283a 	ret

1000f390 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
1000f390:	defff904 	addi	sp,sp,-28
1000f394:	df000615 	stw	fp,24(sp)
1000f398:	df000604 	addi	fp,sp,24
1000f39c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000f3a0:	0005303a 	rdctl	r2,status
1000f3a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000f3a8:	e0fffc17 	ldw	r3,-16(fp)
1000f3ac:	00bfff84 	movi	r2,-2
1000f3b0:	1884703a 	and	r2,r3,r2
1000f3b4:	1001703a 	wrctl	status,r2
  
  return context;
1000f3b8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
1000f3bc:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
1000f3c0:	d0a00c17 	ldw	r2,-32720(gp)
1000f3c4:	10c000c4 	addi	r3,r2,3
1000f3c8:	00bfff04 	movi	r2,-4
1000f3cc:	1884703a 	and	r2,r3,r2
1000f3d0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
1000f3d4:	d0e00c17 	ldw	r3,-32720(gp)
1000f3d8:	e0bfff17 	ldw	r2,-4(fp)
1000f3dc:	1887883a 	add	r3,r3,r2
1000f3e0:	00860034 	movhi	r2,6144
1000f3e4:	10800004 	addi	r2,r2,0
1000f3e8:	10c0062e 	bgeu	r2,r3,1000f404 <sbrk+0x74>
1000f3ec:	e0bffa17 	ldw	r2,-24(fp)
1000f3f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000f3f4:	e0bffd17 	ldw	r2,-12(fp)
1000f3f8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
1000f3fc:	00bfffc4 	movi	r2,-1
1000f400:	00000b06 	br	1000f430 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
1000f404:	d0a00c17 	ldw	r2,-32720(gp)
1000f408:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
1000f40c:	d0e00c17 	ldw	r3,-32720(gp)
1000f410:	e0bfff17 	ldw	r2,-4(fp)
1000f414:	1885883a 	add	r2,r3,r2
1000f418:	d0a00c15 	stw	r2,-32720(gp)
1000f41c:	e0bffa17 	ldw	r2,-24(fp)
1000f420:	e0bffe15 	stw	r2,-8(fp)
1000f424:	e0bffe17 	ldw	r2,-8(fp)
1000f428:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
1000f42c:	e0bffb17 	ldw	r2,-20(fp)
} 
1000f430:	e037883a 	mov	sp,fp
1000f434:	df000017 	ldw	fp,0(sp)
1000f438:	dec00104 	addi	sp,sp,4
1000f43c:	f800283a 	ret

1000f440 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
1000f440:	defffd04 	addi	sp,sp,-12
1000f444:	dfc00215 	stw	ra,8(sp)
1000f448:	df000115 	stw	fp,4(sp)
1000f44c:	df000104 	addi	fp,sp,4
1000f450:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
1000f454:	e13fff17 	ldw	r4,-4(fp)
1000f458:	00102000 	call	10010200 <alt_busy_sleep>
}
1000f45c:	e037883a 	mov	sp,fp
1000f460:	dfc00117 	ldw	ra,4(sp)
1000f464:	df000017 	ldw	fp,0(sp)
1000f468:	dec00204 	addi	sp,sp,8
1000f46c:	f800283a 	ret

1000f470 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
1000f470:	defffe04 	addi	sp,sp,-8
1000f474:	dfc00115 	stw	ra,4(sp)
1000f478:	df000015 	stw	fp,0(sp)
1000f47c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
1000f480:	00840074 	movhi	r2,4097
1000f484:	108e7304 	addi	r2,r2,14796
1000f488:	10800017 	ldw	r2,0(r2)
1000f48c:	10000526 	beq	r2,zero,1000f4a4 <alt_get_errno+0x34>
1000f490:	00840074 	movhi	r2,4097
1000f494:	108e7304 	addi	r2,r2,14796
1000f498:	10800017 	ldw	r2,0(r2)
1000f49c:	103ee83a 	callr	r2
1000f4a0:	00000206 	br	1000f4ac <alt_get_errno+0x3c>
1000f4a4:	00840074 	movhi	r2,4097
1000f4a8:	10953a04 	addi	r2,r2,21736
}
1000f4ac:	e037883a 	mov	sp,fp
1000f4b0:	dfc00117 	ldw	ra,4(sp)
1000f4b4:	df000017 	ldw	fp,0(sp)
1000f4b8:	dec00204 	addi	sp,sp,8
1000f4bc:	f800283a 	ret

1000f4c0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
1000f4c0:	defff904 	addi	sp,sp,-28
1000f4c4:	dfc00615 	stw	ra,24(sp)
1000f4c8:	df000515 	stw	fp,20(sp)
1000f4cc:	df000504 	addi	fp,sp,20
1000f4d0:	e13ffd15 	stw	r4,-12(fp)
1000f4d4:	e17ffe15 	stw	r5,-8(fp)
1000f4d8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
1000f4dc:	e0bffd17 	ldw	r2,-12(fp)
1000f4e0:	10000816 	blt	r2,zero,1000f504 <write+0x44>
1000f4e4:	e13ffd17 	ldw	r4,-12(fp)
1000f4e8:	01400304 	movi	r5,12
1000f4ec:	000c3780 	call	1000c378 <__mulsi3>
1000f4f0:	1007883a 	mov	r3,r2
1000f4f4:	00840074 	movhi	r2,4097
1000f4f8:	1089f004 	addi	r2,r2,10176
1000f4fc:	1885883a 	add	r2,r3,r2
1000f500:	00000106 	br	1000f508 <write+0x48>
1000f504:	0005883a 	mov	r2,zero
1000f508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
1000f50c:	e0bffb17 	ldw	r2,-20(fp)
1000f510:	10002126 	beq	r2,zero,1000f598 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
1000f514:	e0bffb17 	ldw	r2,-20(fp)
1000f518:	10800217 	ldw	r2,8(r2)
1000f51c:	108000cc 	andi	r2,r2,3
1000f520:	10001826 	beq	r2,zero,1000f584 <write+0xc4>
1000f524:	e0bffb17 	ldw	r2,-20(fp)
1000f528:	10800017 	ldw	r2,0(r2)
1000f52c:	10800617 	ldw	r2,24(r2)
1000f530:	10001426 	beq	r2,zero,1000f584 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
1000f534:	e0bffb17 	ldw	r2,-20(fp)
1000f538:	10800017 	ldw	r2,0(r2)
1000f53c:	10800617 	ldw	r2,24(r2)
1000f540:	e0ffff17 	ldw	r3,-4(fp)
1000f544:	e13ffb17 	ldw	r4,-20(fp)
1000f548:	e17ffe17 	ldw	r5,-8(fp)
1000f54c:	180d883a 	mov	r6,r3
1000f550:	103ee83a 	callr	r2
1000f554:	e0bffc15 	stw	r2,-16(fp)
1000f558:	e0bffc17 	ldw	r2,-16(fp)
1000f55c:	1000070e 	bge	r2,zero,1000f57c <write+0xbc>
      {
        ALT_ERRNO = -rval;
1000f560:	000f4700 	call	1000f470 <alt_get_errno>
1000f564:	1007883a 	mov	r3,r2
1000f568:	e0bffc17 	ldw	r2,-16(fp)
1000f56c:	0085c83a 	sub	r2,zero,r2
1000f570:	18800015 	stw	r2,0(r3)
        return -1;
1000f574:	00bfffc4 	movi	r2,-1
1000f578:	00000c06 	br	1000f5ac <write+0xec>
      }
      return rval;
1000f57c:	e0bffc17 	ldw	r2,-16(fp)
1000f580:	00000a06 	br	1000f5ac <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
1000f584:	000f4700 	call	1000f470 <alt_get_errno>
1000f588:	1007883a 	mov	r3,r2
1000f58c:	00800344 	movi	r2,13
1000f590:	18800015 	stw	r2,0(r3)
1000f594:	00000406 	br	1000f5a8 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
1000f598:	000f4700 	call	1000f470 <alt_get_errno>
1000f59c:	1007883a 	mov	r3,r2
1000f5a0:	00801444 	movi	r2,81
1000f5a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
1000f5a8:	00bfffc4 	movi	r2,-1
}
1000f5ac:	e037883a 	mov	sp,fp
1000f5b0:	dfc00117 	ldw	ra,4(sp)
1000f5b4:	df000017 	ldw	fp,0(sp)
1000f5b8:	dec00204 	addi	sp,sp,8
1000f5bc:	f800283a 	ret

1000f5c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
1000f5c0:	defffd04 	addi	sp,sp,-12
1000f5c4:	dfc00215 	stw	ra,8(sp)
1000f5c8:	df000115 	stw	fp,4(sp)
1000f5cc:	df000104 	addi	fp,sp,4
1000f5d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
1000f5d4:	e13fff17 	ldw	r4,-4(fp)
1000f5d8:	01440074 	movhi	r5,4097
1000f5dc:	294e7004 	addi	r5,r5,14784
1000f5e0:	00103c40 	call	100103c4 <alt_dev_llist_insert>
}
1000f5e4:	e037883a 	mov	sp,fp
1000f5e8:	dfc00117 	ldw	ra,4(sp)
1000f5ec:	df000017 	ldw	fp,0(sp)
1000f5f0:	dec00204 	addi	sp,sp,8
1000f5f4:	f800283a 	ret

1000f5f8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
1000f5f8:	defffd04 	addi	sp,sp,-12
1000f5fc:	dfc00215 	stw	ra,8(sp)
1000f600:	df000115 	stw	fp,4(sp)
1000f604:	df000104 	addi	fp,sp,4
1000f608:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
1000f60c:	0010da40 	call	10010da4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
1000f610:	00800044 	movi	r2,1
1000f614:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
1000f618:	e037883a 	mov	sp,fp
1000f61c:	dfc00117 	ldw	ra,4(sp)
1000f620:	df000017 	ldw	fp,0(sp)
1000f624:	dec00204 	addi	sp,sp,8
1000f628:	f800283a 	ret

1000f62c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
1000f62c:	defffe04 	addi	sp,sp,-8
1000f630:	dfc00115 	stw	ra,4(sp)
1000f634:	df000015 	stw	fp,0(sp)
1000f638:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
1000f63c:	01040074 	movhi	r4,4097
1000f640:	210a5a04 	addi	r4,r4,10600
1000f644:	000b883a 	mov	r5,zero
1000f648:	01800144 	movi	r6,5
1000f64c:	000f7d80 	call	1000f7d8 <altera_avalon_jtag_uart_init>
1000f650:	01040074 	movhi	r4,4097
1000f654:	210a5004 	addi	r4,r4,10560
1000f658:	000f5c00 	call	1000f5c0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
1000f65c:	0001883a 	nop
}
1000f660:	e037883a 	mov	sp,fp
1000f664:	dfc00117 	ldw	ra,4(sp)
1000f668:	df000017 	ldw	fp,0(sp)
1000f66c:	dec00204 	addi	sp,sp,8
1000f670:	f800283a 	ret

1000f674 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000f674:	defffa04 	addi	sp,sp,-24
1000f678:	dfc00515 	stw	ra,20(sp)
1000f67c:	df000415 	stw	fp,16(sp)
1000f680:	df000404 	addi	fp,sp,16
1000f684:	e13ffd15 	stw	r4,-12(fp)
1000f688:	e17ffe15 	stw	r5,-8(fp)
1000f68c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f690:	e0bffd17 	ldw	r2,-12(fp)
1000f694:	10800017 	ldw	r2,0(r2)
1000f698:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
1000f69c:	e0bffc17 	ldw	r2,-16(fp)
1000f6a0:	10c00a04 	addi	r3,r2,40
1000f6a4:	e0bffd17 	ldw	r2,-12(fp)
1000f6a8:	10800217 	ldw	r2,8(r2)
1000f6ac:	1809883a 	mov	r4,r3
1000f6b0:	e17ffe17 	ldw	r5,-8(fp)
1000f6b4:	e1bfff17 	ldw	r6,-4(fp)
1000f6b8:	100f883a 	mov	r7,r2
1000f6bc:	000fc9c0 	call	1000fc9c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
1000f6c0:	e037883a 	mov	sp,fp
1000f6c4:	dfc00117 	ldw	ra,4(sp)
1000f6c8:	df000017 	ldw	fp,0(sp)
1000f6cc:	dec00204 	addi	sp,sp,8
1000f6d0:	f800283a 	ret

1000f6d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
1000f6d4:	defffa04 	addi	sp,sp,-24
1000f6d8:	dfc00515 	stw	ra,20(sp)
1000f6dc:	df000415 	stw	fp,16(sp)
1000f6e0:	df000404 	addi	fp,sp,16
1000f6e4:	e13ffd15 	stw	r4,-12(fp)
1000f6e8:	e17ffe15 	stw	r5,-8(fp)
1000f6ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f6f0:	e0bffd17 	ldw	r2,-12(fp)
1000f6f4:	10800017 	ldw	r2,0(r2)
1000f6f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
1000f6fc:	e0bffc17 	ldw	r2,-16(fp)
1000f700:	10c00a04 	addi	r3,r2,40
1000f704:	e0bffd17 	ldw	r2,-12(fp)
1000f708:	10800217 	ldw	r2,8(r2)
1000f70c:	1809883a 	mov	r4,r3
1000f710:	e17ffe17 	ldw	r5,-8(fp)
1000f714:	e1bfff17 	ldw	r6,-4(fp)
1000f718:	100f883a 	mov	r7,r2
1000f71c:	000fea80 	call	1000fea8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
1000f720:	e037883a 	mov	sp,fp
1000f724:	dfc00117 	ldw	ra,4(sp)
1000f728:	df000017 	ldw	fp,0(sp)
1000f72c:	dec00204 	addi	sp,sp,8
1000f730:	f800283a 	ret

1000f734 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000f734:	defffc04 	addi	sp,sp,-16
1000f738:	dfc00315 	stw	ra,12(sp)
1000f73c:	df000215 	stw	fp,8(sp)
1000f740:	df000204 	addi	fp,sp,8
1000f744:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
1000f748:	e0bfff17 	ldw	r2,-4(fp)
1000f74c:	10800017 	ldw	r2,0(r2)
1000f750:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000f754:	e0bffe17 	ldw	r2,-8(fp)
1000f758:	10c00a04 	addi	r3,r2,40
1000f75c:	e0bfff17 	ldw	r2,-4(fp)
1000f760:	10800217 	ldw	r2,8(r2)
1000f764:	1809883a 	mov	r4,r3
1000f768:	100b883a 	mov	r5,r2
1000f76c:	000fb480 	call	1000fb48 <altera_avalon_jtag_uart_close>
}
1000f770:	e037883a 	mov	sp,fp
1000f774:	dfc00117 	ldw	ra,4(sp)
1000f778:	df000017 	ldw	fp,0(sp)
1000f77c:	dec00204 	addi	sp,sp,8
1000f780:	f800283a 	ret

1000f784 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000f784:	defffa04 	addi	sp,sp,-24
1000f788:	dfc00515 	stw	ra,20(sp)
1000f78c:	df000415 	stw	fp,16(sp)
1000f790:	df000404 	addi	fp,sp,16
1000f794:	e13ffd15 	stw	r4,-12(fp)
1000f798:	e17ffe15 	stw	r5,-8(fp)
1000f79c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
1000f7a0:	e0bffd17 	ldw	r2,-12(fp)
1000f7a4:	10800017 	ldw	r2,0(r2)
1000f7a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
1000f7ac:	e0bffc17 	ldw	r2,-16(fp)
1000f7b0:	10800a04 	addi	r2,r2,40
1000f7b4:	1009883a 	mov	r4,r2
1000f7b8:	e17ffe17 	ldw	r5,-8(fp)
1000f7bc:	e1bfff17 	ldw	r6,-4(fp)
1000f7c0:	000fbb00 	call	1000fbb0 <altera_avalon_jtag_uart_ioctl>
}
1000f7c4:	e037883a 	mov	sp,fp
1000f7c8:	dfc00117 	ldw	ra,4(sp)
1000f7cc:	df000017 	ldw	fp,0(sp)
1000f7d0:	dec00204 	addi	sp,sp,8
1000f7d4:	f800283a 	ret

1000f7d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
1000f7d8:	defffa04 	addi	sp,sp,-24
1000f7dc:	dfc00515 	stw	ra,20(sp)
1000f7e0:	df000415 	stw	fp,16(sp)
1000f7e4:	df000404 	addi	fp,sp,16
1000f7e8:	e13ffd15 	stw	r4,-12(fp)
1000f7ec:	e17ffe15 	stw	r5,-8(fp)
1000f7f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f7f4:	e0bffd17 	ldw	r2,-12(fp)
1000f7f8:	00c00044 	movi	r3,1
1000f7fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
1000f800:	e0bffd17 	ldw	r2,-12(fp)
1000f804:	10800017 	ldw	r2,0(r2)
1000f808:	10800104 	addi	r2,r2,4
1000f80c:	1007883a 	mov	r3,r2
1000f810:	e0bffd17 	ldw	r2,-12(fp)
1000f814:	10800817 	ldw	r2,32(r2)
1000f818:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
1000f81c:	e0fffe17 	ldw	r3,-8(fp)
1000f820:	e0bfff17 	ldw	r2,-4(fp)
1000f824:	d8000015 	stw	zero,0(sp)
1000f828:	1809883a 	mov	r4,r3
1000f82c:	100b883a 	mov	r5,r2
1000f830:	01840074 	movhi	r6,4097
1000f834:	31be2704 	addi	r6,r6,-1892
1000f838:	e1fffd17 	ldw	r7,-12(fp)
1000f83c:	001053c0 	call	1001053c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
1000f840:	e0bffd17 	ldw	r2,-12(fp)
1000f844:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
1000f848:	e0bffd17 	ldw	r2,-12(fp)
1000f84c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
1000f850:	00840074 	movhi	r2,4097
1000f854:	10953f04 	addi	r2,r2,21756
1000f858:	10800017 	ldw	r2,0(r2)
1000f85c:	1809883a 	mov	r4,r3
1000f860:	100b883a 	mov	r5,r2
1000f864:	01840074 	movhi	r6,4097
1000f868:	31bea804 	addi	r6,r6,-1376
1000f86c:	e1fffd17 	ldw	r7,-12(fp)
1000f870:	00100c00 	call	100100c0 <alt_alarm_start>
1000f874:	1000040e 	bge	r2,zero,1000f888 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
1000f878:	e0fffd17 	ldw	r3,-12(fp)
1000f87c:	00a00034 	movhi	r2,32768
1000f880:	10bfffc4 	addi	r2,r2,-1
1000f884:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
1000f888:	e037883a 	mov	sp,fp
1000f88c:	dfc00117 	ldw	ra,4(sp)
1000f890:	df000017 	ldw	fp,0(sp)
1000f894:	dec00204 	addi	sp,sp,8
1000f898:	f800283a 	ret

1000f89c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
1000f89c:	defff804 	addi	sp,sp,-32
1000f8a0:	df000715 	stw	fp,28(sp)
1000f8a4:	df000704 	addi	fp,sp,28
1000f8a8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
1000f8ac:	e0bfff17 	ldw	r2,-4(fp)
1000f8b0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
1000f8b4:	e0bffb17 	ldw	r2,-20(fp)
1000f8b8:	10800017 	ldw	r2,0(r2)
1000f8bc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f8c0:	e0bffc17 	ldw	r2,-16(fp)
1000f8c4:	10800104 	addi	r2,r2,4
1000f8c8:	10800037 	ldwio	r2,0(r2)
1000f8cc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
1000f8d0:	e0bffd17 	ldw	r2,-12(fp)
1000f8d4:	1080c00c 	andi	r2,r2,768
1000f8d8:	1000011e 	bne	r2,zero,1000f8e0 <altera_avalon_jtag_uart_irq+0x44>
      break;
1000f8dc:	00006c06 	br	1000fa90 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
1000f8e0:	e0bffd17 	ldw	r2,-12(fp)
1000f8e4:	1080400c 	andi	r2,r2,256
1000f8e8:	10003426 	beq	r2,zero,1000f9bc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
1000f8ec:	00800074 	movhi	r2,1
1000f8f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f8f4:	e0bffb17 	ldw	r2,-20(fp)
1000f8f8:	10800a17 	ldw	r2,40(r2)
1000f8fc:	10800044 	addi	r2,r2,1
1000f900:	1081ffcc 	andi	r2,r2,2047
1000f904:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
1000f908:	e0bffb17 	ldw	r2,-20(fp)
1000f90c:	10c00b17 	ldw	r3,44(r2)
1000f910:	e0bffe17 	ldw	r2,-8(fp)
1000f914:	1880011e 	bne	r3,r2,1000f91c <altera_avalon_jtag_uart_irq+0x80>
          break;
1000f918:	00001606 	br	1000f974 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
1000f91c:	e0bffc17 	ldw	r2,-16(fp)
1000f920:	10800037 	ldwio	r2,0(r2)
1000f924:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
1000f928:	e0bff917 	ldw	r2,-28(fp)
1000f92c:	10a0000c 	andi	r2,r2,32768
1000f930:	1000011e 	bne	r2,zero,1000f938 <altera_avalon_jtag_uart_irq+0x9c>
          break;
1000f934:	00000f06 	br	1000f974 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
1000f938:	e0bffb17 	ldw	r2,-20(fp)
1000f93c:	10800a17 	ldw	r2,40(r2)
1000f940:	e0fff917 	ldw	r3,-28(fp)
1000f944:	1809883a 	mov	r4,r3
1000f948:	e0fffb17 	ldw	r3,-20(fp)
1000f94c:	1885883a 	add	r2,r3,r2
1000f950:	10800e04 	addi	r2,r2,56
1000f954:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000f958:	e0bffb17 	ldw	r2,-20(fp)
1000f95c:	10800a17 	ldw	r2,40(r2)
1000f960:	10800044 	addi	r2,r2,1
1000f964:	10c1ffcc 	andi	r3,r2,2047
1000f968:	e0bffb17 	ldw	r2,-20(fp)
1000f96c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
1000f970:	003fe006 	br	1000f8f4 <__alt_data_end+0xf800f8f4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
1000f974:	e0bff917 	ldw	r2,-28(fp)
1000f978:	10bfffec 	andhi	r2,r2,65535
1000f97c:	10000f26 	beq	r2,zero,1000f9bc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000f980:	e0bffb17 	ldw	r2,-20(fp)
1000f984:	10c00817 	ldw	r3,32(r2)
1000f988:	00bfff84 	movi	r2,-2
1000f98c:	1886703a 	and	r3,r3,r2
1000f990:	e0bffb17 	ldw	r2,-20(fp)
1000f994:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000f998:	e0bffc17 	ldw	r2,-16(fp)
1000f99c:	10800104 	addi	r2,r2,4
1000f9a0:	1007883a 	mov	r3,r2
1000f9a4:	e0bffb17 	ldw	r2,-20(fp)
1000f9a8:	10800817 	ldw	r2,32(r2)
1000f9ac:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000f9b0:	e0bffc17 	ldw	r2,-16(fp)
1000f9b4:	10800104 	addi	r2,r2,4
1000f9b8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
1000f9bc:	e0bffd17 	ldw	r2,-12(fp)
1000f9c0:	1080800c 	andi	r2,r2,512
1000f9c4:	10003126 	beq	r2,zero,1000fa8c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
1000f9c8:	e0bffd17 	ldw	r2,-12(fp)
1000f9cc:	1004d43a 	srli	r2,r2,16
1000f9d0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
1000f9d4:	00001406 	br	1000fa28 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
1000f9d8:	e0bffc17 	ldw	r2,-16(fp)
1000f9dc:	e0fffb17 	ldw	r3,-20(fp)
1000f9e0:	18c00d17 	ldw	r3,52(r3)
1000f9e4:	e13ffb17 	ldw	r4,-20(fp)
1000f9e8:	20c7883a 	add	r3,r4,r3
1000f9ec:	18c20e04 	addi	r3,r3,2104
1000f9f0:	18c00003 	ldbu	r3,0(r3)
1000f9f4:	18c03fcc 	andi	r3,r3,255
1000f9f8:	18c0201c 	xori	r3,r3,128
1000f9fc:	18ffe004 	addi	r3,r3,-128
1000fa00:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fa04:	e0bffb17 	ldw	r2,-20(fp)
1000fa08:	10800d17 	ldw	r2,52(r2)
1000fa0c:	10800044 	addi	r2,r2,1
1000fa10:	10c1ffcc 	andi	r3,r2,2047
1000fa14:	e0bffb17 	ldw	r2,-20(fp)
1000fa18:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
1000fa1c:	e0bffa17 	ldw	r2,-24(fp)
1000fa20:	10bfffc4 	addi	r2,r2,-1
1000fa24:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000fa28:	e0bffa17 	ldw	r2,-24(fp)
1000fa2c:	10000526 	beq	r2,zero,1000fa44 <altera_avalon_jtag_uart_irq+0x1a8>
1000fa30:	e0bffb17 	ldw	r2,-20(fp)
1000fa34:	10c00d17 	ldw	r3,52(r2)
1000fa38:	e0bffb17 	ldw	r2,-20(fp)
1000fa3c:	10800c17 	ldw	r2,48(r2)
1000fa40:	18bfe51e 	bne	r3,r2,1000f9d8 <__alt_data_end+0xf800f9d8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
1000fa44:	e0bffa17 	ldw	r2,-24(fp)
1000fa48:	10001026 	beq	r2,zero,1000fa8c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000fa4c:	e0bffb17 	ldw	r2,-20(fp)
1000fa50:	10c00817 	ldw	r3,32(r2)
1000fa54:	00bfff44 	movi	r2,-3
1000fa58:	1886703a 	and	r3,r3,r2
1000fa5c:	e0bffb17 	ldw	r2,-20(fp)
1000fa60:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fa64:	e0bffb17 	ldw	r2,-20(fp)
1000fa68:	10800017 	ldw	r2,0(r2)
1000fa6c:	10800104 	addi	r2,r2,4
1000fa70:	1007883a 	mov	r3,r2
1000fa74:	e0bffb17 	ldw	r2,-20(fp)
1000fa78:	10800817 	ldw	r2,32(r2)
1000fa7c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
1000fa80:	e0bffc17 	ldw	r2,-16(fp)
1000fa84:	10800104 	addi	r2,r2,4
1000fa88:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
1000fa8c:	003f8c06 	br	1000f8c0 <__alt_data_end+0xf800f8c0>
}
1000fa90:	e037883a 	mov	sp,fp
1000fa94:	df000017 	ldw	fp,0(sp)
1000fa98:	dec00104 	addi	sp,sp,4
1000fa9c:	f800283a 	ret

1000faa0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000faa0:	defff804 	addi	sp,sp,-32
1000faa4:	df000715 	stw	fp,28(sp)
1000faa8:	df000704 	addi	fp,sp,28
1000faac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
1000fab0:	e0bffb17 	ldw	r2,-20(fp)
1000fab4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
1000fab8:	e0bff917 	ldw	r2,-28(fp)
1000fabc:	10800017 	ldw	r2,0(r2)
1000fac0:	10800104 	addi	r2,r2,4
1000fac4:	10800037 	ldwio	r2,0(r2)
1000fac8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
1000facc:	e0bffa17 	ldw	r2,-24(fp)
1000fad0:	1081000c 	andi	r2,r2,1024
1000fad4:	10000b26 	beq	r2,zero,1000fb04 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
1000fad8:	e0bff917 	ldw	r2,-28(fp)
1000fadc:	10800017 	ldw	r2,0(r2)
1000fae0:	10800104 	addi	r2,r2,4
1000fae4:	1007883a 	mov	r3,r2
1000fae8:	e0bff917 	ldw	r2,-28(fp)
1000faec:	10800817 	ldw	r2,32(r2)
1000faf0:	10810014 	ori	r2,r2,1024
1000faf4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
1000faf8:	e0bff917 	ldw	r2,-28(fp)
1000fafc:	10000915 	stw	zero,36(r2)
1000fb00:	00000a06 	br	1000fb2c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
1000fb04:	e0bff917 	ldw	r2,-28(fp)
1000fb08:	10c00917 	ldw	r3,36(r2)
1000fb0c:	00a00034 	movhi	r2,32768
1000fb10:	10bfff04 	addi	r2,r2,-4
1000fb14:	10c00536 	bltu	r2,r3,1000fb2c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
1000fb18:	e0bff917 	ldw	r2,-28(fp)
1000fb1c:	10800917 	ldw	r2,36(r2)
1000fb20:	10c00044 	addi	r3,r2,1
1000fb24:	e0bff917 	ldw	r2,-28(fp)
1000fb28:	10c00915 	stw	r3,36(r2)
1000fb2c:	00840074 	movhi	r2,4097
1000fb30:	10953f04 	addi	r2,r2,21756
1000fb34:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000fb38:	e037883a 	mov	sp,fp
1000fb3c:	df000017 	ldw	fp,0(sp)
1000fb40:	dec00104 	addi	sp,sp,4
1000fb44:	f800283a 	ret

1000fb48 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000fb48:	defffd04 	addi	sp,sp,-12
1000fb4c:	df000215 	stw	fp,8(sp)
1000fb50:	df000204 	addi	fp,sp,8
1000fb54:	e13ffe15 	stw	r4,-8(fp)
1000fb58:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fb5c:	00000506 	br	1000fb74 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
1000fb60:	e0bfff17 	ldw	r2,-4(fp)
1000fb64:	1090000c 	andi	r2,r2,16384
1000fb68:	10000226 	beq	r2,zero,1000fb74 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
1000fb6c:	00bffd44 	movi	r2,-11
1000fb70:	00000b06 	br	1000fba0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
1000fb74:	e0bffe17 	ldw	r2,-8(fp)
1000fb78:	10c00d17 	ldw	r3,52(r2)
1000fb7c:	e0bffe17 	ldw	r2,-8(fp)
1000fb80:	10800c17 	ldw	r2,48(r2)
1000fb84:	18800526 	beq	r3,r2,1000fb9c <altera_avalon_jtag_uart_close+0x54>
1000fb88:	e0bffe17 	ldw	r2,-8(fp)
1000fb8c:	10c00917 	ldw	r3,36(r2)
1000fb90:	e0bffe17 	ldw	r2,-8(fp)
1000fb94:	10800117 	ldw	r2,4(r2)
1000fb98:	18bff136 	bltu	r3,r2,1000fb60 <__alt_data_end+0xf800fb60>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
1000fb9c:	0005883a 	mov	r2,zero
}
1000fba0:	e037883a 	mov	sp,fp
1000fba4:	df000017 	ldw	fp,0(sp)
1000fba8:	dec00104 	addi	sp,sp,4
1000fbac:	f800283a 	ret

1000fbb0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
1000fbb0:	defffa04 	addi	sp,sp,-24
1000fbb4:	df000515 	stw	fp,20(sp)
1000fbb8:	df000504 	addi	fp,sp,20
1000fbbc:	e13ffd15 	stw	r4,-12(fp)
1000fbc0:	e17ffe15 	stw	r5,-8(fp)
1000fbc4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
1000fbc8:	00bff9c4 	movi	r2,-25
1000fbcc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
1000fbd0:	e0bffe17 	ldw	r2,-8(fp)
1000fbd4:	10da8060 	cmpeqi	r3,r2,27137
1000fbd8:	1800031e 	bne	r3,zero,1000fbe8 <altera_avalon_jtag_uart_ioctl+0x38>
1000fbdc:	109a80a0 	cmpeqi	r2,r2,27138
1000fbe0:	1000191e 	bne	r2,zero,1000fc48 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
1000fbe4:	00002806 	br	1000fc88 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
1000fbe8:	e0bffd17 	ldw	r2,-12(fp)
1000fbec:	10c00117 	ldw	r3,4(r2)
1000fbf0:	00a00034 	movhi	r2,32768
1000fbf4:	10bfffc4 	addi	r2,r2,-1
1000fbf8:	18801226 	beq	r3,r2,1000fc44 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
1000fbfc:	e0bfff17 	ldw	r2,-4(fp)
1000fc00:	10800017 	ldw	r2,0(r2)
1000fc04:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
1000fc08:	e0bffc17 	ldw	r2,-16(fp)
1000fc0c:	10800090 	cmplti	r2,r2,2
1000fc10:	1000061e 	bne	r2,zero,1000fc2c <altera_avalon_jtag_uart_ioctl+0x7c>
1000fc14:	e0fffc17 	ldw	r3,-16(fp)
1000fc18:	00a00034 	movhi	r2,32768
1000fc1c:	10bfffc4 	addi	r2,r2,-1
1000fc20:	18800226 	beq	r3,r2,1000fc2c <altera_avalon_jtag_uart_ioctl+0x7c>
1000fc24:	e0bffc17 	ldw	r2,-16(fp)
1000fc28:	00000206 	br	1000fc34 <altera_avalon_jtag_uart_ioctl+0x84>
1000fc2c:	00a00034 	movhi	r2,32768
1000fc30:	10bfff84 	addi	r2,r2,-2
1000fc34:	e0fffd17 	ldw	r3,-12(fp)
1000fc38:	18800115 	stw	r2,4(r3)
      rc = 0;
1000fc3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fc40:	00001106 	br	1000fc88 <altera_avalon_jtag_uart_ioctl+0xd8>
1000fc44:	00001006 	br	1000fc88 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
1000fc48:	e0bffd17 	ldw	r2,-12(fp)
1000fc4c:	10c00117 	ldw	r3,4(r2)
1000fc50:	00a00034 	movhi	r2,32768
1000fc54:	10bfffc4 	addi	r2,r2,-1
1000fc58:	18800a26 	beq	r3,r2,1000fc84 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000fc5c:	e0bffd17 	ldw	r2,-12(fp)
1000fc60:	10c00917 	ldw	r3,36(r2)
1000fc64:	e0bffd17 	ldw	r2,-12(fp)
1000fc68:	10800117 	ldw	r2,4(r2)
1000fc6c:	1885803a 	cmpltu	r2,r3,r2
1000fc70:	10c03fcc 	andi	r3,r2,255
1000fc74:	e0bfff17 	ldw	r2,-4(fp)
1000fc78:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000fc7c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
1000fc80:	00000006 	br	1000fc84 <altera_avalon_jtag_uart_ioctl+0xd4>
1000fc84:	0001883a 	nop

  default:
    break;
  }

  return rc;
1000fc88:	e0bffb17 	ldw	r2,-20(fp)
}
1000fc8c:	e037883a 	mov	sp,fp
1000fc90:	df000017 	ldw	fp,0(sp)
1000fc94:	dec00104 	addi	sp,sp,4
1000fc98:	f800283a 	ret

1000fc9c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
1000fc9c:	defff304 	addi	sp,sp,-52
1000fca0:	dfc00c15 	stw	ra,48(sp)
1000fca4:	df000b15 	stw	fp,44(sp)
1000fca8:	df000b04 	addi	fp,sp,44
1000fcac:	e13ffc15 	stw	r4,-16(fp)
1000fcb0:	e17ffd15 	stw	r5,-12(fp)
1000fcb4:	e1bffe15 	stw	r6,-8(fp)
1000fcb8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
1000fcbc:	e0bffd17 	ldw	r2,-12(fp)
1000fcc0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fcc4:	00004906 	br	1000fdec <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
1000fcc8:	e0bffc17 	ldw	r2,-16(fp)
1000fccc:	10800a17 	ldw	r2,40(r2)
1000fcd0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
1000fcd4:	e0bffc17 	ldw	r2,-16(fp)
1000fcd8:	10800b17 	ldw	r2,44(r2)
1000fcdc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
1000fce0:	e0fff717 	ldw	r3,-36(fp)
1000fce4:	e0bff817 	ldw	r2,-32(fp)
1000fce8:	18800536 	bltu	r3,r2,1000fd00 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
1000fcec:	e0fff717 	ldw	r3,-36(fp)
1000fcf0:	e0bff817 	ldw	r2,-32(fp)
1000fcf4:	1885c83a 	sub	r2,r3,r2
1000fcf8:	e0bff615 	stw	r2,-40(fp)
1000fcfc:	00000406 	br	1000fd10 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
1000fd00:	00c20004 	movi	r3,2048
1000fd04:	e0bff817 	ldw	r2,-32(fp)
1000fd08:	1885c83a 	sub	r2,r3,r2
1000fd0c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000fd10:	e0bff617 	ldw	r2,-40(fp)
1000fd14:	1000011e 	bne	r2,zero,1000fd1c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
1000fd18:	00001d06 	br	1000fd90 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
1000fd1c:	e0fffe17 	ldw	r3,-8(fp)
1000fd20:	e0bff617 	ldw	r2,-40(fp)
1000fd24:	1880022e 	bgeu	r3,r2,1000fd30 <altera_avalon_jtag_uart_read+0x94>
        n = space;
1000fd28:	e0bffe17 	ldw	r2,-8(fp)
1000fd2c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
1000fd30:	e0bff817 	ldw	r2,-32(fp)
1000fd34:	10800e04 	addi	r2,r2,56
1000fd38:	e0fffc17 	ldw	r3,-16(fp)
1000fd3c:	1885883a 	add	r2,r3,r2
1000fd40:	e13ff517 	ldw	r4,-44(fp)
1000fd44:	100b883a 	mov	r5,r2
1000fd48:	e1bff617 	ldw	r6,-40(fp)
1000fd4c:	0007b000 	call	10007b00 <memcpy>
      ptr   += n;
1000fd50:	e0fff517 	ldw	r3,-44(fp)
1000fd54:	e0bff617 	ldw	r2,-40(fp)
1000fd58:	1885883a 	add	r2,r3,r2
1000fd5c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
1000fd60:	e0fffe17 	ldw	r3,-8(fp)
1000fd64:	e0bff617 	ldw	r2,-40(fp)
1000fd68:	1885c83a 	sub	r2,r3,r2
1000fd6c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000fd70:	e0fff817 	ldw	r3,-32(fp)
1000fd74:	e0bff617 	ldw	r2,-40(fp)
1000fd78:	1885883a 	add	r2,r3,r2
1000fd7c:	10c1ffcc 	andi	r3,r2,2047
1000fd80:	e0bffc17 	ldw	r2,-16(fp)
1000fd84:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000fd88:	e0bffe17 	ldw	r2,-8(fp)
1000fd8c:	00bfce16 	blt	zero,r2,1000fcc8 <__alt_data_end+0xf800fcc8>

    /* If we read any data then return it */
    if (ptr != buffer)
1000fd90:	e0fff517 	ldw	r3,-44(fp)
1000fd94:	e0bffd17 	ldw	r2,-12(fp)
1000fd98:	18800126 	beq	r3,r2,1000fda0 <altera_avalon_jtag_uart_read+0x104>
      break;
1000fd9c:	00001506 	br	1000fdf4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
1000fda0:	e0bfff17 	ldw	r2,-4(fp)
1000fda4:	1090000c 	andi	r2,r2,16384
1000fda8:	10000126 	beq	r2,zero,1000fdb0 <altera_avalon_jtag_uart_read+0x114>
      break;
1000fdac:	00001106 	br	1000fdf4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
1000fdb0:	0001883a 	nop
1000fdb4:	e0bffc17 	ldw	r2,-16(fp)
1000fdb8:	10c00a17 	ldw	r3,40(r2)
1000fdbc:	e0bff717 	ldw	r2,-36(fp)
1000fdc0:	1880051e 	bne	r3,r2,1000fdd8 <altera_avalon_jtag_uart_read+0x13c>
1000fdc4:	e0bffc17 	ldw	r2,-16(fp)
1000fdc8:	10c00917 	ldw	r3,36(r2)
1000fdcc:	e0bffc17 	ldw	r2,-16(fp)
1000fdd0:	10800117 	ldw	r2,4(r2)
1000fdd4:	18bff736 	bltu	r3,r2,1000fdb4 <__alt_data_end+0xf800fdb4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
1000fdd8:	e0bffc17 	ldw	r2,-16(fp)
1000fddc:	10c00a17 	ldw	r3,40(r2)
1000fde0:	e0bff717 	ldw	r2,-36(fp)
1000fde4:	1880011e 	bne	r3,r2,1000fdec <altera_avalon_jtag_uart_read+0x150>
      break;
1000fde8:	00000206 	br	1000fdf4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
1000fdec:	e0bffe17 	ldw	r2,-8(fp)
1000fdf0:	00bfb516 	blt	zero,r2,1000fcc8 <__alt_data_end+0xf800fcc8>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
1000fdf4:	e0fff517 	ldw	r3,-44(fp)
1000fdf8:	e0bffd17 	ldw	r2,-12(fp)
1000fdfc:	18801826 	beq	r3,r2,1000fe60 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000fe00:	0005303a 	rdctl	r2,status
1000fe04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000fe08:	e0fffa17 	ldw	r3,-24(fp)
1000fe0c:	00bfff84 	movi	r2,-2
1000fe10:	1884703a 	and	r2,r3,r2
1000fe14:	1001703a 	wrctl	status,r2
  
  return context;
1000fe18:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
1000fe1c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
1000fe20:	e0bffc17 	ldw	r2,-16(fp)
1000fe24:	10800817 	ldw	r2,32(r2)
1000fe28:	10c00054 	ori	r3,r2,1
1000fe2c:	e0bffc17 	ldw	r2,-16(fp)
1000fe30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fe34:	e0bffc17 	ldw	r2,-16(fp)
1000fe38:	10800017 	ldw	r2,0(r2)
1000fe3c:	10800104 	addi	r2,r2,4
1000fe40:	1007883a 	mov	r3,r2
1000fe44:	e0bffc17 	ldw	r2,-16(fp)
1000fe48:	10800817 	ldw	r2,32(r2)
1000fe4c:	18800035 	stwio	r2,0(r3)
1000fe50:	e0bff917 	ldw	r2,-28(fp)
1000fe54:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1000fe58:	e0bffb17 	ldw	r2,-20(fp)
1000fe5c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
1000fe60:	e0fff517 	ldw	r3,-44(fp)
1000fe64:	e0bffd17 	ldw	r2,-12(fp)
1000fe68:	18800426 	beq	r3,r2,1000fe7c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
1000fe6c:	e0fff517 	ldw	r3,-44(fp)
1000fe70:	e0bffd17 	ldw	r2,-12(fp)
1000fe74:	1885c83a 	sub	r2,r3,r2
1000fe78:	00000606 	br	1000fe94 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
1000fe7c:	e0bfff17 	ldw	r2,-4(fp)
1000fe80:	1090000c 	andi	r2,r2,16384
1000fe84:	10000226 	beq	r2,zero,1000fe90 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
1000fe88:	00bffd44 	movi	r2,-11
1000fe8c:	00000106 	br	1000fe94 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
1000fe90:	00bffec4 	movi	r2,-5
}
1000fe94:	e037883a 	mov	sp,fp
1000fe98:	dfc00117 	ldw	ra,4(sp)
1000fe9c:	df000017 	ldw	fp,0(sp)
1000fea0:	dec00204 	addi	sp,sp,8
1000fea4:	f800283a 	ret

1000fea8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
1000fea8:	defff304 	addi	sp,sp,-52
1000feac:	dfc00c15 	stw	ra,48(sp)
1000feb0:	df000b15 	stw	fp,44(sp)
1000feb4:	df000b04 	addi	fp,sp,44
1000feb8:	e13ffc15 	stw	r4,-16(fp)
1000febc:	e17ffd15 	stw	r5,-12(fp)
1000fec0:	e1bffe15 	stw	r6,-8(fp)
1000fec4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
1000fec8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
1000fecc:	e0bffd17 	ldw	r2,-12(fp)
1000fed0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000fed4:	00003806 	br	1000ffb8 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
1000fed8:	e0bffc17 	ldw	r2,-16(fp)
1000fedc:	10800c17 	ldw	r2,48(r2)
1000fee0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
1000fee4:	e0bffc17 	ldw	r2,-16(fp)
1000fee8:	10800d17 	ldw	r2,52(r2)
1000feec:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
1000fef0:	e0fff817 	ldw	r3,-32(fp)
1000fef4:	e0bff517 	ldw	r2,-44(fp)
1000fef8:	1880062e 	bgeu	r3,r2,1000ff14 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
1000fefc:	e0fff517 	ldw	r3,-44(fp)
1000ff00:	e0bff817 	ldw	r2,-32(fp)
1000ff04:	1885c83a 	sub	r2,r3,r2
1000ff08:	10bfffc4 	addi	r2,r2,-1
1000ff0c:	e0bff615 	stw	r2,-40(fp)
1000ff10:	00000b06 	br	1000ff40 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000ff14:	e0bff517 	ldw	r2,-44(fp)
1000ff18:	10000526 	beq	r2,zero,1000ff30 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
1000ff1c:	00c20004 	movi	r3,2048
1000ff20:	e0bff817 	ldw	r2,-32(fp)
1000ff24:	1885c83a 	sub	r2,r3,r2
1000ff28:	e0bff615 	stw	r2,-40(fp)
1000ff2c:	00000406 	br	1000ff40 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
1000ff30:	00c1ffc4 	movi	r3,2047
1000ff34:	e0bff817 	ldw	r2,-32(fp)
1000ff38:	1885c83a 	sub	r2,r3,r2
1000ff3c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
1000ff40:	e0bff617 	ldw	r2,-40(fp)
1000ff44:	1000011e 	bne	r2,zero,1000ff4c <altera_avalon_jtag_uart_write+0xa4>
        break;
1000ff48:	00001d06 	br	1000ffc0 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
1000ff4c:	e0fffe17 	ldw	r3,-8(fp)
1000ff50:	e0bff617 	ldw	r2,-40(fp)
1000ff54:	1880022e 	bgeu	r3,r2,1000ff60 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
1000ff58:	e0bffe17 	ldw	r2,-8(fp)
1000ff5c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
1000ff60:	e0bff817 	ldw	r2,-32(fp)
1000ff64:	10820e04 	addi	r2,r2,2104
1000ff68:	e0fffc17 	ldw	r3,-16(fp)
1000ff6c:	1885883a 	add	r2,r3,r2
1000ff70:	1009883a 	mov	r4,r2
1000ff74:	e17ffd17 	ldw	r5,-12(fp)
1000ff78:	e1bff617 	ldw	r6,-40(fp)
1000ff7c:	0007b000 	call	10007b00 <memcpy>
      ptr   += n;
1000ff80:	e0fffd17 	ldw	r3,-12(fp)
1000ff84:	e0bff617 	ldw	r2,-40(fp)
1000ff88:	1885883a 	add	r2,r3,r2
1000ff8c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
1000ff90:	e0fffe17 	ldw	r3,-8(fp)
1000ff94:	e0bff617 	ldw	r2,-40(fp)
1000ff98:	1885c83a 	sub	r2,r3,r2
1000ff9c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
1000ffa0:	e0fff817 	ldw	r3,-32(fp)
1000ffa4:	e0bff617 	ldw	r2,-40(fp)
1000ffa8:	1885883a 	add	r2,r3,r2
1000ffac:	10c1ffcc 	andi	r3,r2,2047
1000ffb0:	e0bffc17 	ldw	r2,-16(fp)
1000ffb4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
1000ffb8:	e0bffe17 	ldw	r2,-8(fp)
1000ffbc:	00bfc616 	blt	zero,r2,1000fed8 <__alt_data_end+0xf800fed8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000ffc0:	0005303a 	rdctl	r2,status
1000ffc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000ffc8:	e0fffa17 	ldw	r3,-24(fp)
1000ffcc:	00bfff84 	movi	r2,-2
1000ffd0:	1884703a 	and	r2,r3,r2
1000ffd4:	1001703a 	wrctl	status,r2
  
  return context;
1000ffd8:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
1000ffdc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
1000ffe0:	e0bffc17 	ldw	r2,-16(fp)
1000ffe4:	10800817 	ldw	r2,32(r2)
1000ffe8:	10c00094 	ori	r3,r2,2
1000ffec:	e0bffc17 	ldw	r2,-16(fp)
1000fff0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000fff4:	e0bffc17 	ldw	r2,-16(fp)
1000fff8:	10800017 	ldw	r2,0(r2)
1000fffc:	10800104 	addi	r2,r2,4
10010000:	1007883a 	mov	r3,r2
10010004:	e0bffc17 	ldw	r2,-16(fp)
10010008:	10800817 	ldw	r2,32(r2)
1001000c:	18800035 	stwio	r2,0(r3)
10010010:	e0bff917 	ldw	r2,-28(fp)
10010014:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010018:	e0bffb17 	ldw	r2,-20(fp)
1001001c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10010020:	e0bffe17 	ldw	r2,-8(fp)
10010024:	0080120e 	bge	zero,r2,10010070 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
10010028:	e0bfff17 	ldw	r2,-4(fp)
1001002c:	1090000c 	andi	r2,r2,16384
10010030:	10000126 	beq	r2,zero,10010038 <altera_avalon_jtag_uart_write+0x190>
        break;
10010034:	00001006 	br	10010078 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10010038:	0001883a 	nop
1001003c:	e0bffc17 	ldw	r2,-16(fp)
10010040:	10c00d17 	ldw	r3,52(r2)
10010044:	e0bff517 	ldw	r2,-44(fp)
10010048:	1880051e 	bne	r3,r2,10010060 <altera_avalon_jtag_uart_write+0x1b8>
1001004c:	e0bffc17 	ldw	r2,-16(fp)
10010050:	10c00917 	ldw	r3,36(r2)
10010054:	e0bffc17 	ldw	r2,-16(fp)
10010058:	10800117 	ldw	r2,4(r2)
1001005c:	18bff736 	bltu	r3,r2,1001003c <__alt_data_end+0xf801003c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10010060:	e0bffc17 	ldw	r2,-16(fp)
10010064:	10800917 	ldw	r2,36(r2)
10010068:	10000126 	beq	r2,zero,10010070 <altera_avalon_jtag_uart_write+0x1c8>
         break;
1001006c:	00000206 	br	10010078 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
10010070:	e0bffe17 	ldw	r2,-8(fp)
10010074:	00bf9716 	blt	zero,r2,1000fed4 <__alt_data_end+0xf800fed4>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10010078:	e0fffd17 	ldw	r3,-12(fp)
1001007c:	e0bff717 	ldw	r2,-36(fp)
10010080:	18800426 	beq	r3,r2,10010094 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
10010084:	e0fffd17 	ldw	r3,-12(fp)
10010088:	e0bff717 	ldw	r2,-36(fp)
1001008c:	1885c83a 	sub	r2,r3,r2
10010090:	00000606 	br	100100ac <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
10010094:	e0bfff17 	ldw	r2,-4(fp)
10010098:	1090000c 	andi	r2,r2,16384
1001009c:	10000226 	beq	r2,zero,100100a8 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
100100a0:	00bffd44 	movi	r2,-11
100100a4:	00000106 	br	100100ac <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
100100a8:	00bffec4 	movi	r2,-5
}
100100ac:	e037883a 	mov	sp,fp
100100b0:	dfc00117 	ldw	ra,4(sp)
100100b4:	df000017 	ldw	fp,0(sp)
100100b8:	dec00204 	addi	sp,sp,8
100100bc:	f800283a 	ret

100100c0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
100100c0:	defff504 	addi	sp,sp,-44
100100c4:	df000a15 	stw	fp,40(sp)
100100c8:	df000a04 	addi	fp,sp,40
100100cc:	e13ffc15 	stw	r4,-16(fp)
100100d0:	e17ffd15 	stw	r5,-12(fp)
100100d4:	e1bffe15 	stw	r6,-8(fp)
100100d8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
100100dc:	e03ff615 	stw	zero,-40(fp)
100100e0:	00840074 	movhi	r2,4097
100100e4:	10953f04 	addi	r2,r2,21756
100100e8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
100100ec:	10003f26 	beq	r2,zero,100101ec <alt_alarm_start+0x12c>
  {
    if (alarm)
100100f0:	e0bffc17 	ldw	r2,-16(fp)
100100f4:	10003b26 	beq	r2,zero,100101e4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
100100f8:	e0bffc17 	ldw	r2,-16(fp)
100100fc:	e0fffe17 	ldw	r3,-8(fp)
10010100:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10010104:	e0bffc17 	ldw	r2,-16(fp)
10010108:	e0ffff17 	ldw	r3,-4(fp)
1001010c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010110:	0005303a 	rdctl	r2,status
10010114:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010118:	e0fff817 	ldw	r3,-32(fp)
1001011c:	00bfff84 	movi	r2,-2
10010120:	1884703a 	and	r2,r3,r2
10010124:	1001703a 	wrctl	status,r2
  
  return context;
10010128:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
1001012c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10010130:	00840074 	movhi	r2,4097
10010134:	10954004 	addi	r2,r2,21760
10010138:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
1001013c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10010140:	e0fffd17 	ldw	r3,-12(fp)
10010144:	e0bff617 	ldw	r2,-40(fp)
10010148:	1885883a 	add	r2,r3,r2
1001014c:	10c00044 	addi	r3,r2,1
10010150:	e0bffc17 	ldw	r2,-16(fp)
10010154:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10010158:	e0bffc17 	ldw	r2,-16(fp)
1001015c:	10c00217 	ldw	r3,8(r2)
10010160:	e0bff617 	ldw	r2,-40(fp)
10010164:	1880042e 	bgeu	r3,r2,10010178 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
10010168:	e0bffc17 	ldw	r2,-16(fp)
1001016c:	00c00044 	movi	r3,1
10010170:	10c00405 	stb	r3,16(r2)
10010174:	00000206 	br	10010180 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
10010178:	e0bffc17 	ldw	r2,-16(fp)
1001017c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10010180:	e0fffc17 	ldw	r3,-16(fp)
10010184:	00840074 	movhi	r2,4097
10010188:	108e7604 	addi	r2,r2,14808
1001018c:	e0bff915 	stw	r2,-28(fp)
10010190:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010194:	e0bffa17 	ldw	r2,-24(fp)
10010198:	e0fff917 	ldw	r3,-28(fp)
1001019c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
100101a0:	e0bff917 	ldw	r2,-28(fp)
100101a4:	10c00017 	ldw	r3,0(r2)
100101a8:	e0bffa17 	ldw	r2,-24(fp)
100101ac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
100101b0:	e0bff917 	ldw	r2,-28(fp)
100101b4:	10800017 	ldw	r2,0(r2)
100101b8:	e0fffa17 	ldw	r3,-24(fp)
100101bc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
100101c0:	e0bff917 	ldw	r2,-28(fp)
100101c4:	e0fffa17 	ldw	r3,-24(fp)
100101c8:	10c00015 	stw	r3,0(r2)
100101cc:	e0bff717 	ldw	r2,-36(fp)
100101d0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100101d4:	e0bffb17 	ldw	r2,-20(fp)
100101d8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
100101dc:	0005883a 	mov	r2,zero
100101e0:	00000306 	br	100101f0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
100101e4:	00bffa84 	movi	r2,-22
100101e8:	00000106 	br	100101f0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
100101ec:	00bfde84 	movi	r2,-134
  }
}
100101f0:	e037883a 	mov	sp,fp
100101f4:	df000017 	ldw	fp,0(sp)
100101f8:	dec00104 	addi	sp,sp,4
100101fc:	f800283a 	ret

10010200 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10010200:	defffa04 	addi	sp,sp,-24
10010204:	dfc00515 	stw	ra,20(sp)
10010208:	df000415 	stw	fp,16(sp)
1001020c:	df000404 	addi	fp,sp,16
10010210:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10010214:	00800244 	movi	r2,9
10010218:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
1001021c:	e13ffd17 	ldw	r4,-12(fp)
10010220:	014003f4 	movhi	r5,15
10010224:	29509004 	addi	r5,r5,16960
10010228:	000c3780 	call	1000c378 <__mulsi3>
1001022c:	0100bef4 	movhi	r4,763
10010230:	213c2004 	addi	r4,r4,-3968
10010234:	100b883a 	mov	r5,r2
10010238:	000c3680 	call	1000c368 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
1001023c:	01200034 	movhi	r4,32768
10010240:	213fffc4 	addi	r4,r4,-1
10010244:	100b883a 	mov	r5,r2
10010248:	000c3680 	call	1000c368 <__udivsi3>
1001024c:	e13fff17 	ldw	r4,-4(fp)
10010250:	100b883a 	mov	r5,r2
10010254:	000c3680 	call	1000c368 <__udivsi3>
10010258:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
1001025c:	e0bffe17 	ldw	r2,-8(fp)
10010260:	10002a26 	beq	r2,zero,1001030c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10010264:	e03ffc15 	stw	zero,-16(fp)
10010268:	00001706 	br	100102c8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
1001026c:	00a00034 	movhi	r2,32768
10010270:	10bfffc4 	addi	r2,r2,-1
10010274:	10bfffc4 	addi	r2,r2,-1
10010278:	103ffe1e 	bne	r2,zero,10010274 <__alt_data_end+0xf8010274>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
1001027c:	e13ffd17 	ldw	r4,-12(fp)
10010280:	014003f4 	movhi	r5,15
10010284:	29509004 	addi	r5,r5,16960
10010288:	000c3780 	call	1000c378 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
1001028c:	0100bef4 	movhi	r4,763
10010290:	213c2004 	addi	r4,r4,-3968
10010294:	100b883a 	mov	r5,r2
10010298:	000c3680 	call	1000c368 <__udivsi3>
1001029c:	01200034 	movhi	r4,32768
100102a0:	213fffc4 	addi	r4,r4,-1
100102a4:	100b883a 	mov	r5,r2
100102a8:	000c3680 	call	1000c368 <__udivsi3>
100102ac:	1007883a 	mov	r3,r2
100102b0:	e0bfff17 	ldw	r2,-4(fp)
100102b4:	10c5c83a 	sub	r2,r2,r3
100102b8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
100102bc:	e0bffc17 	ldw	r2,-16(fp)
100102c0:	10800044 	addi	r2,r2,1
100102c4:	e0bffc15 	stw	r2,-16(fp)
100102c8:	e0fffc17 	ldw	r3,-16(fp)
100102cc:	e0bffe17 	ldw	r2,-8(fp)
100102d0:	18bfe616 	blt	r3,r2,1001026c <__alt_data_end+0xf801026c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
100102d4:	e13ffd17 	ldw	r4,-12(fp)
100102d8:	014003f4 	movhi	r5,15
100102dc:	29509004 	addi	r5,r5,16960
100102e0:	000c3780 	call	1000c378 <__mulsi3>
100102e4:	0100bef4 	movhi	r4,763
100102e8:	213c2004 	addi	r4,r4,-3968
100102ec:	100b883a 	mov	r5,r2
100102f0:	000c3680 	call	1000c368 <__udivsi3>
100102f4:	1009883a 	mov	r4,r2
100102f8:	e17fff17 	ldw	r5,-4(fp)
100102fc:	000c3780 	call	1000c378 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010300:	10bfffc4 	addi	r2,r2,-1
10010304:	103ffe1e 	bne	r2,zero,10010300 <__alt_data_end+0xf8010300>
10010308:	00000d06 	br	10010340 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
1001030c:	e13ffd17 	ldw	r4,-12(fp)
10010310:	014003f4 	movhi	r5,15
10010314:	29509004 	addi	r5,r5,16960
10010318:	000c3780 	call	1000c378 <__mulsi3>
1001031c:	0100bef4 	movhi	r4,763
10010320:	213c2004 	addi	r4,r4,-3968
10010324:	100b883a 	mov	r5,r2
10010328:	000c3680 	call	1000c368 <__udivsi3>
1001032c:	1009883a 	mov	r4,r2
10010330:	e17fff17 	ldw	r5,-4(fp)
10010334:	000c3780 	call	1000c378 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10010338:	10bfffc4 	addi	r2,r2,-1
1001033c:	00bffe16 	blt	zero,r2,10010338 <__alt_data_end+0xf8010338>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10010340:	0005883a 	mov	r2,zero
}
10010344:	e037883a 	mov	sp,fp
10010348:	dfc00117 	ldw	ra,4(sp)
1001034c:	df000017 	ldw	fp,0(sp)
10010350:	dec00204 	addi	sp,sp,8
10010354:	f800283a 	ret

10010358 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10010358:	deffff04 	addi	sp,sp,-4
1001035c:	df000015 	stw	fp,0(sp)
10010360:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10010364:	e037883a 	mov	sp,fp
10010368:	df000017 	ldw	fp,0(sp)
1001036c:	dec00104 	addi	sp,sp,4
10010370:	f800283a 	ret

10010374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010374:	defffe04 	addi	sp,sp,-8
10010378:	dfc00115 	stw	ra,4(sp)
1001037c:	df000015 	stw	fp,0(sp)
10010380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010384:	00840074 	movhi	r2,4097
10010388:	108e7304 	addi	r2,r2,14796
1001038c:	10800017 	ldw	r2,0(r2)
10010390:	10000526 	beq	r2,zero,100103a8 <alt_get_errno+0x34>
10010394:	00840074 	movhi	r2,4097
10010398:	108e7304 	addi	r2,r2,14796
1001039c:	10800017 	ldw	r2,0(r2)
100103a0:	103ee83a 	callr	r2
100103a4:	00000206 	br	100103b0 <alt_get_errno+0x3c>
100103a8:	00840074 	movhi	r2,4097
100103ac:	10953a04 	addi	r2,r2,21736
}
100103b0:	e037883a 	mov	sp,fp
100103b4:	dfc00117 	ldw	ra,4(sp)
100103b8:	df000017 	ldw	fp,0(sp)
100103bc:	dec00204 	addi	sp,sp,8
100103c0:	f800283a 	ret

100103c4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
100103c4:	defffa04 	addi	sp,sp,-24
100103c8:	dfc00515 	stw	ra,20(sp)
100103cc:	df000415 	stw	fp,16(sp)
100103d0:	df000404 	addi	fp,sp,16
100103d4:	e13ffe15 	stw	r4,-8(fp)
100103d8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
100103dc:	e0bffe17 	ldw	r2,-8(fp)
100103e0:	10000326 	beq	r2,zero,100103f0 <alt_dev_llist_insert+0x2c>
100103e4:	e0bffe17 	ldw	r2,-8(fp)
100103e8:	10800217 	ldw	r2,8(r2)
100103ec:	1000061e 	bne	r2,zero,10010408 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
100103f0:	00103740 	call	10010374 <alt_get_errno>
100103f4:	1007883a 	mov	r3,r2
100103f8:	00800584 	movi	r2,22
100103fc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10010400:	00bffa84 	movi	r2,-22
10010404:	00001306 	br	10010454 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10010408:	e0bffe17 	ldw	r2,-8(fp)
1001040c:	e0ffff17 	ldw	r3,-4(fp)
10010410:	e0fffc15 	stw	r3,-16(fp)
10010414:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10010418:	e0bffd17 	ldw	r2,-12(fp)
1001041c:	e0fffc17 	ldw	r3,-16(fp)
10010420:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10010424:	e0bffc17 	ldw	r2,-16(fp)
10010428:	10c00017 	ldw	r3,0(r2)
1001042c:	e0bffd17 	ldw	r2,-12(fp)
10010430:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10010434:	e0bffc17 	ldw	r2,-16(fp)
10010438:	10800017 	ldw	r2,0(r2)
1001043c:	e0fffd17 	ldw	r3,-12(fp)
10010440:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10010444:	e0bffc17 	ldw	r2,-16(fp)
10010448:	e0fffd17 	ldw	r3,-12(fp)
1001044c:	10c00015 	stw	r3,0(r2)

  return 0;  
10010450:	0005883a 	mov	r2,zero
}
10010454:	e037883a 	mov	sp,fp
10010458:	dfc00117 	ldw	ra,4(sp)
1001045c:	df000017 	ldw	fp,0(sp)
10010460:	dec00204 	addi	sp,sp,8
10010464:	f800283a 	ret

10010468 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10010468:	defffd04 	addi	sp,sp,-12
1001046c:	dfc00215 	stw	ra,8(sp)
10010470:	df000115 	stw	fp,4(sp)
10010474:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010478:	00840074 	movhi	r2,4097
1001047c:	10851e04 	addi	r2,r2,5240
10010480:	e0bfff15 	stw	r2,-4(fp)
10010484:	00000606 	br	100104a0 <_do_ctors+0x38>
        (*ctor) (); 
10010488:	e0bfff17 	ldw	r2,-4(fp)
1001048c:	10800017 	ldw	r2,0(r2)
10010490:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10010494:	e0bfff17 	ldw	r2,-4(fp)
10010498:	10bfff04 	addi	r2,r2,-4
1001049c:	e0bfff15 	stw	r2,-4(fp)
100104a0:	e0ffff17 	ldw	r3,-4(fp)
100104a4:	00840074 	movhi	r2,4097
100104a8:	10851f04 	addi	r2,r2,5244
100104ac:	18bff62e 	bgeu	r3,r2,10010488 <__alt_data_end+0xf8010488>
        (*ctor) (); 
}
100104b0:	e037883a 	mov	sp,fp
100104b4:	dfc00117 	ldw	ra,4(sp)
100104b8:	df000017 	ldw	fp,0(sp)
100104bc:	dec00204 	addi	sp,sp,8
100104c0:	f800283a 	ret

100104c4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
100104c4:	defffd04 	addi	sp,sp,-12
100104c8:	dfc00215 	stw	ra,8(sp)
100104cc:	df000115 	stw	fp,4(sp)
100104d0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100104d4:	00840074 	movhi	r2,4097
100104d8:	10851e04 	addi	r2,r2,5240
100104dc:	e0bfff15 	stw	r2,-4(fp)
100104e0:	00000606 	br	100104fc <_do_dtors+0x38>
        (*dtor) (); 
100104e4:	e0bfff17 	ldw	r2,-4(fp)
100104e8:	10800017 	ldw	r2,0(r2)
100104ec:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
100104f0:	e0bfff17 	ldw	r2,-4(fp)
100104f4:	10bfff04 	addi	r2,r2,-4
100104f8:	e0bfff15 	stw	r2,-4(fp)
100104fc:	e0ffff17 	ldw	r3,-4(fp)
10010500:	00840074 	movhi	r2,4097
10010504:	10851f04 	addi	r2,r2,5244
10010508:	18bff62e 	bgeu	r3,r2,100104e4 <__alt_data_end+0xf80104e4>
        (*dtor) (); 
}
1001050c:	e037883a 	mov	sp,fp
10010510:	dfc00117 	ldw	ra,4(sp)
10010514:	df000017 	ldw	fp,0(sp)
10010518:	dec00204 	addi	sp,sp,8
1001051c:	f800283a 	ret

10010520 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10010520:	deffff04 	addi	sp,sp,-4
10010524:	df000015 	stw	fp,0(sp)
10010528:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
1001052c:	e037883a 	mov	sp,fp
10010530:	df000017 	ldw	fp,0(sp)
10010534:	dec00104 	addi	sp,sp,4
10010538:	f800283a 	ret

1001053c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001053c:	defff904 	addi	sp,sp,-28
10010540:	dfc00615 	stw	ra,24(sp)
10010544:	df000515 	stw	fp,20(sp)
10010548:	df000504 	addi	fp,sp,20
1001054c:	e13ffc15 	stw	r4,-16(fp)
10010550:	e17ffd15 	stw	r5,-12(fp)
10010554:	e1bffe15 	stw	r6,-8(fp)
10010558:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
1001055c:	e0800217 	ldw	r2,8(fp)
10010560:	d8800015 	stw	r2,0(sp)
10010564:	e13ffc17 	ldw	r4,-16(fp)
10010568:	e17ffd17 	ldw	r5,-12(fp)
1001056c:	e1bffe17 	ldw	r6,-8(fp)
10010570:	e1ffff17 	ldw	r7,-4(fp)
10010574:	001071c0 	call	1001071c <alt_iic_isr_register>
}  
10010578:	e037883a 	mov	sp,fp
1001057c:	dfc00117 	ldw	ra,4(sp)
10010580:	df000017 	ldw	fp,0(sp)
10010584:	dec00204 	addi	sp,sp,8
10010588:	f800283a 	ret

1001058c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
1001058c:	defff904 	addi	sp,sp,-28
10010590:	df000615 	stw	fp,24(sp)
10010594:	df000604 	addi	fp,sp,24
10010598:	e13ffe15 	stw	r4,-8(fp)
1001059c:	e17fff15 	stw	r5,-4(fp)
100105a0:	e0bfff17 	ldw	r2,-4(fp)
100105a4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100105a8:	0005303a 	rdctl	r2,status
100105ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100105b0:	e0fffb17 	ldw	r3,-20(fp)
100105b4:	00bfff84 	movi	r2,-2
100105b8:	1884703a 	and	r2,r3,r2
100105bc:	1001703a 	wrctl	status,r2
  
  return context;
100105c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
100105c4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
100105c8:	e0bffa17 	ldw	r2,-24(fp)
100105cc:	00c00044 	movi	r3,1
100105d0:	1884983a 	sll	r2,r3,r2
100105d4:	1007883a 	mov	r3,r2
100105d8:	00840074 	movhi	r2,4097
100105dc:	10953e04 	addi	r2,r2,21752
100105e0:	10800017 	ldw	r2,0(r2)
100105e4:	1886b03a 	or	r3,r3,r2
100105e8:	00840074 	movhi	r2,4097
100105ec:	10953e04 	addi	r2,r2,21752
100105f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100105f4:	00840074 	movhi	r2,4097
100105f8:	10953e04 	addi	r2,r2,21752
100105fc:	10800017 	ldw	r2,0(r2)
10010600:	100170fa 	wrctl	ienable,r2
10010604:	e0bffc17 	ldw	r2,-16(fp)
10010608:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
1001060c:	e0bffd17 	ldw	r2,-12(fp)
10010610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10010614:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
10010618:	0001883a 	nop
}
1001061c:	e037883a 	mov	sp,fp
10010620:	df000017 	ldw	fp,0(sp)
10010624:	dec00104 	addi	sp,sp,4
10010628:	f800283a 	ret

1001062c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
1001062c:	defff904 	addi	sp,sp,-28
10010630:	df000615 	stw	fp,24(sp)
10010634:	df000604 	addi	fp,sp,24
10010638:	e13ffe15 	stw	r4,-8(fp)
1001063c:	e17fff15 	stw	r5,-4(fp)
10010640:	e0bfff17 	ldw	r2,-4(fp)
10010644:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010648:	0005303a 	rdctl	r2,status
1001064c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010650:	e0fffb17 	ldw	r3,-20(fp)
10010654:	00bfff84 	movi	r2,-2
10010658:	1884703a 	and	r2,r3,r2
1001065c:	1001703a 	wrctl	status,r2
  
  return context;
10010660:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10010664:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
10010668:	e0bffa17 	ldw	r2,-24(fp)
1001066c:	00c00044 	movi	r3,1
10010670:	1884983a 	sll	r2,r3,r2
10010674:	0084303a 	nor	r2,zero,r2
10010678:	1007883a 	mov	r3,r2
1001067c:	00840074 	movhi	r2,4097
10010680:	10953e04 	addi	r2,r2,21752
10010684:	10800017 	ldw	r2,0(r2)
10010688:	1886703a 	and	r3,r3,r2
1001068c:	00840074 	movhi	r2,4097
10010690:	10953e04 	addi	r2,r2,21752
10010694:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10010698:	00840074 	movhi	r2,4097
1001069c:	10953e04 	addi	r2,r2,21752
100106a0:	10800017 	ldw	r2,0(r2)
100106a4:	100170fa 	wrctl	ienable,r2
100106a8:	e0bffc17 	ldw	r2,-16(fp)
100106ac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100106b0:	e0bffd17 	ldw	r2,-12(fp)
100106b4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100106b8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100106bc:	0001883a 	nop
}
100106c0:	e037883a 	mov	sp,fp
100106c4:	df000017 	ldw	fp,0(sp)
100106c8:	dec00104 	addi	sp,sp,4
100106cc:	f800283a 	ret

100106d0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100106d0:	defffc04 	addi	sp,sp,-16
100106d4:	df000315 	stw	fp,12(sp)
100106d8:	df000304 	addi	fp,sp,12
100106dc:	e13ffe15 	stw	r4,-8(fp)
100106e0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100106e4:	000530fa 	rdctl	r2,ienable
100106e8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100106ec:	e0bfff17 	ldw	r2,-4(fp)
100106f0:	00c00044 	movi	r3,1
100106f4:	1884983a 	sll	r2,r3,r2
100106f8:	1007883a 	mov	r3,r2
100106fc:	e0bffd17 	ldw	r2,-12(fp)
10010700:	1884703a 	and	r2,r3,r2
10010704:	1004c03a 	cmpne	r2,r2,zero
10010708:	10803fcc 	andi	r2,r2,255
}
1001070c:	e037883a 	mov	sp,fp
10010710:	df000017 	ldw	fp,0(sp)
10010714:	dec00104 	addi	sp,sp,4
10010718:	f800283a 	ret

1001071c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
1001071c:	defff504 	addi	sp,sp,-44
10010720:	dfc00a15 	stw	ra,40(sp)
10010724:	df000915 	stw	fp,36(sp)
10010728:	df000904 	addi	fp,sp,36
1001072c:	e13ffc15 	stw	r4,-16(fp)
10010730:	e17ffd15 	stw	r5,-12(fp)
10010734:	e1bffe15 	stw	r6,-8(fp)
10010738:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
1001073c:	00bffa84 	movi	r2,-22
10010740:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10010744:	e0bffd17 	ldw	r2,-12(fp)
10010748:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
1001074c:	e0bff817 	ldw	r2,-32(fp)
10010750:	10800808 	cmpgei	r2,r2,32
10010754:	1000271e 	bne	r2,zero,100107f4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010758:	0005303a 	rdctl	r2,status
1001075c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010760:	e0fffa17 	ldw	r3,-24(fp)
10010764:	00bfff84 	movi	r2,-2
10010768:	1884703a 	and	r2,r3,r2
1001076c:	1001703a 	wrctl	status,r2
  
  return context;
10010770:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10010774:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
10010778:	00840074 	movhi	r2,4097
1001077c:	10954c04 	addi	r2,r2,21808
10010780:	e0fff817 	ldw	r3,-32(fp)
10010784:	180690fa 	slli	r3,r3,3
10010788:	10c5883a 	add	r2,r2,r3
1001078c:	e0fffe17 	ldw	r3,-8(fp)
10010790:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
10010794:	00840074 	movhi	r2,4097
10010798:	10954c04 	addi	r2,r2,21808
1001079c:	e0fff817 	ldw	r3,-32(fp)
100107a0:	180690fa 	slli	r3,r3,3
100107a4:	10c5883a 	add	r2,r2,r3
100107a8:	10800104 	addi	r2,r2,4
100107ac:	e0ffff17 	ldw	r3,-4(fp)
100107b0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100107b4:	e0bffe17 	ldw	r2,-8(fp)
100107b8:	10000526 	beq	r2,zero,100107d0 <alt_iic_isr_register+0xb4>
100107bc:	e0bff817 	ldw	r2,-32(fp)
100107c0:	e13ffc17 	ldw	r4,-16(fp)
100107c4:	100b883a 	mov	r5,r2
100107c8:	001058c0 	call	1001058c <alt_ic_irq_enable>
100107cc:	00000406 	br	100107e0 <alt_iic_isr_register+0xc4>
100107d0:	e0bff817 	ldw	r2,-32(fp)
100107d4:	e13ffc17 	ldw	r4,-16(fp)
100107d8:	100b883a 	mov	r5,r2
100107dc:	001062c0 	call	1001062c <alt_ic_irq_disable>
100107e0:	e0bff715 	stw	r2,-36(fp)
100107e4:	e0bff917 	ldw	r2,-28(fp)
100107e8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100107ec:	e0bffb17 	ldw	r2,-20(fp)
100107f0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
100107f4:	e0bff717 	ldw	r2,-36(fp)
}
100107f8:	e037883a 	mov	sp,fp
100107fc:	dfc00117 	ldw	ra,4(sp)
10010800:	df000017 	ldw	fp,0(sp)
10010804:	dec00204 	addi	sp,sp,8
10010808:	f800283a 	ret

1001080c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
1001080c:	defff804 	addi	sp,sp,-32
10010810:	dfc00715 	stw	ra,28(sp)
10010814:	df000615 	stw	fp,24(sp)
10010818:	dc000515 	stw	r16,20(sp)
1001081c:	df000604 	addi	fp,sp,24
10010820:	e13ffb15 	stw	r4,-20(fp)
10010824:	e17ffc15 	stw	r5,-16(fp)
10010828:	e1bffd15 	stw	r6,-12(fp)
1001082c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
10010830:	e13ffc17 	ldw	r4,-16(fp)
10010834:	e17ffd17 	ldw	r5,-12(fp)
10010838:	e1bffe17 	ldw	r6,-8(fp)
1001083c:	0010aa80 	call	10010aa8 <open>
10010840:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10010844:	e0bffa17 	ldw	r2,-24(fp)
10010848:	10002216 	blt	r2,zero,100108d4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
1001084c:	04040074 	movhi	r16,4097
10010850:	8409f004 	addi	r16,r16,10176
10010854:	e0bffa17 	ldw	r2,-24(fp)
10010858:	1009883a 	mov	r4,r2
1001085c:	01400304 	movi	r5,12
10010860:	000c3780 	call	1000c378 <__mulsi3>
10010864:	8085883a 	add	r2,r16,r2
10010868:	10c00017 	ldw	r3,0(r2)
1001086c:	e0bffb17 	ldw	r2,-20(fp)
10010870:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10010874:	04040074 	movhi	r16,4097
10010878:	8409f004 	addi	r16,r16,10176
1001087c:	e0bffa17 	ldw	r2,-24(fp)
10010880:	1009883a 	mov	r4,r2
10010884:	01400304 	movi	r5,12
10010888:	000c3780 	call	1000c378 <__mulsi3>
1001088c:	8085883a 	add	r2,r16,r2
10010890:	10800104 	addi	r2,r2,4
10010894:	10c00017 	ldw	r3,0(r2)
10010898:	e0bffb17 	ldw	r2,-20(fp)
1001089c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100108a0:	04040074 	movhi	r16,4097
100108a4:	8409f004 	addi	r16,r16,10176
100108a8:	e0bffa17 	ldw	r2,-24(fp)
100108ac:	1009883a 	mov	r4,r2
100108b0:	01400304 	movi	r5,12
100108b4:	000c3780 	call	1000c378 <__mulsi3>
100108b8:	8085883a 	add	r2,r16,r2
100108bc:	10800204 	addi	r2,r2,8
100108c0:	10c00017 	ldw	r3,0(r2)
100108c4:	e0bffb17 	ldw	r2,-20(fp)
100108c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100108cc:	e13ffa17 	ldw	r4,-24(fp)
100108d0:	000f3100 	call	1000f310 <alt_release_fd>
  }
} 
100108d4:	e6ffff04 	addi	sp,fp,-4
100108d8:	dfc00217 	ldw	ra,8(sp)
100108dc:	df000117 	ldw	fp,4(sp)
100108e0:	dc000017 	ldw	r16,0(sp)
100108e4:	dec00304 	addi	sp,sp,12
100108e8:	f800283a 	ret

100108ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100108ec:	defffb04 	addi	sp,sp,-20
100108f0:	dfc00415 	stw	ra,16(sp)
100108f4:	df000315 	stw	fp,12(sp)
100108f8:	df000304 	addi	fp,sp,12
100108fc:	e13ffd15 	stw	r4,-12(fp)
10010900:	e17ffe15 	stw	r5,-8(fp)
10010904:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10010908:	01040074 	movhi	r4,4097
1001090c:	2109f304 	addi	r4,r4,10188
10010910:	e17ffd17 	ldw	r5,-12(fp)
10010914:	01800044 	movi	r6,1
10010918:	01c07fc4 	movi	r7,511
1001091c:	001080c0 	call	1001080c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10010920:	01040074 	movhi	r4,4097
10010924:	2109f004 	addi	r4,r4,10176
10010928:	e17ffe17 	ldw	r5,-8(fp)
1001092c:	000d883a 	mov	r6,zero
10010930:	01c07fc4 	movi	r7,511
10010934:	001080c0 	call	1001080c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10010938:	01040074 	movhi	r4,4097
1001093c:	2109f604 	addi	r4,r4,10200
10010940:	e17fff17 	ldw	r5,-4(fp)
10010944:	01800044 	movi	r6,1
10010948:	01c07fc4 	movi	r7,511
1001094c:	001080c0 	call	1001080c <alt_open_fd>
}  
10010950:	e037883a 	mov	sp,fp
10010954:	dfc00117 	ldw	ra,4(sp)
10010958:	df000017 	ldw	fp,0(sp)
1001095c:	dec00204 	addi	sp,sp,8
10010960:	f800283a 	ret

10010964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10010964:	defffe04 	addi	sp,sp,-8
10010968:	dfc00115 	stw	ra,4(sp)
1001096c:	df000015 	stw	fp,0(sp)
10010970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10010974:	00840074 	movhi	r2,4097
10010978:	108e7304 	addi	r2,r2,14796
1001097c:	10800017 	ldw	r2,0(r2)
10010980:	10000526 	beq	r2,zero,10010998 <alt_get_errno+0x34>
10010984:	00840074 	movhi	r2,4097
10010988:	108e7304 	addi	r2,r2,14796
1001098c:	10800017 	ldw	r2,0(r2)
10010990:	103ee83a 	callr	r2
10010994:	00000206 	br	100109a0 <alt_get_errno+0x3c>
10010998:	00840074 	movhi	r2,4097
1001099c:	10953a04 	addi	r2,r2,21736
}
100109a0:	e037883a 	mov	sp,fp
100109a4:	dfc00117 	ldw	ra,4(sp)
100109a8:	df000017 	ldw	fp,0(sp)
100109ac:	dec00204 	addi	sp,sp,8
100109b0:	f800283a 	ret

100109b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100109b4:	defffb04 	addi	sp,sp,-20
100109b8:	dfc00415 	stw	ra,16(sp)
100109bc:	df000315 	stw	fp,12(sp)
100109c0:	dc000215 	stw	r16,8(sp)
100109c4:	df000304 	addi	fp,sp,12
100109c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100109cc:	e0bffe17 	ldw	r2,-8(fp)
100109d0:	10800217 	ldw	r2,8(r2)
100109d4:	10d00034 	orhi	r3,r2,16384
100109d8:	e0bffe17 	ldw	r2,-8(fp)
100109dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100109e0:	e03ffd15 	stw	zero,-12(fp)
100109e4:	00002306 	br	10010a74 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100109e8:	04040074 	movhi	r16,4097
100109ec:	8409f004 	addi	r16,r16,10176
100109f0:	e0bffd17 	ldw	r2,-12(fp)
100109f4:	1009883a 	mov	r4,r2
100109f8:	01400304 	movi	r5,12
100109fc:	000c3780 	call	1000c378 <__mulsi3>
10010a00:	8085883a 	add	r2,r16,r2
10010a04:	10c00017 	ldw	r3,0(r2)
10010a08:	e0bffe17 	ldw	r2,-8(fp)
10010a0c:	10800017 	ldw	r2,0(r2)
10010a10:	1880151e 	bne	r3,r2,10010a68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010a14:	04040074 	movhi	r16,4097
10010a18:	8409f004 	addi	r16,r16,10176
10010a1c:	e0bffd17 	ldw	r2,-12(fp)
10010a20:	1009883a 	mov	r4,r2
10010a24:	01400304 	movi	r5,12
10010a28:	000c3780 	call	1000c378 <__mulsi3>
10010a2c:	8085883a 	add	r2,r16,r2
10010a30:	10800204 	addi	r2,r2,8
10010a34:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10010a38:	10000b0e 	bge	r2,zero,10010a68 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
10010a3c:	e13ffd17 	ldw	r4,-12(fp)
10010a40:	01400304 	movi	r5,12
10010a44:	000c3780 	call	1000c378 <__mulsi3>
10010a48:	1007883a 	mov	r3,r2
10010a4c:	00840074 	movhi	r2,4097
10010a50:	1089f004 	addi	r2,r2,10176
10010a54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10010a58:	e0bffe17 	ldw	r2,-8(fp)
10010a5c:	18800226 	beq	r3,r2,10010a68 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10010a60:	00bffcc4 	movi	r2,-13
10010a64:	00000a06 	br	10010a90 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10010a68:	e0bffd17 	ldw	r2,-12(fp)
10010a6c:	10800044 	addi	r2,r2,1
10010a70:	e0bffd15 	stw	r2,-12(fp)
10010a74:	00840074 	movhi	r2,4097
10010a78:	108e7204 	addi	r2,r2,14792
10010a7c:	10800017 	ldw	r2,0(r2)
10010a80:	1007883a 	mov	r3,r2
10010a84:	e0bffd17 	ldw	r2,-12(fp)
10010a88:	18bfd72e 	bgeu	r3,r2,100109e8 <__alt_data_end+0xf80109e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10010a8c:	0005883a 	mov	r2,zero
}
10010a90:	e6ffff04 	addi	sp,fp,-4
10010a94:	dfc00217 	ldw	ra,8(sp)
10010a98:	df000117 	ldw	fp,4(sp)
10010a9c:	dc000017 	ldw	r16,0(sp)
10010aa0:	dec00304 	addi	sp,sp,12
10010aa4:	f800283a 	ret

10010aa8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
10010aa8:	defff604 	addi	sp,sp,-40
10010aac:	dfc00915 	stw	ra,36(sp)
10010ab0:	df000815 	stw	fp,32(sp)
10010ab4:	df000804 	addi	fp,sp,32
10010ab8:	e13ffd15 	stw	r4,-12(fp)
10010abc:	e17ffe15 	stw	r5,-8(fp)
10010ac0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
10010ac4:	00bfffc4 	movi	r2,-1
10010ac8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
10010acc:	00bffb44 	movi	r2,-19
10010ad0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
10010ad4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
10010ad8:	e13ffd17 	ldw	r4,-12(fp)
10010adc:	01440074 	movhi	r5,4097
10010ae0:	294e7004 	addi	r5,r5,14784
10010ae4:	0010dc40 	call	10010dc4 <alt_find_dev>
10010ae8:	e0bff815 	stw	r2,-32(fp)
10010aec:	e0bff817 	ldw	r2,-32(fp)
10010af0:	1000051e 	bne	r2,zero,10010b08 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
10010af4:	e13ffd17 	ldw	r4,-12(fp)
10010af8:	0010e540 	call	10010e54 <alt_find_file>
10010afc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
10010b00:	00800044 	movi	r2,1
10010b04:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
10010b08:	e0bff817 	ldw	r2,-32(fp)
10010b0c:	10002b26 	beq	r2,zero,10010bbc <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
10010b10:	e13ff817 	ldw	r4,-32(fp)
10010b14:	0010f680 	call	10010f68 <alt_get_fd>
10010b18:	e0bff915 	stw	r2,-28(fp)
10010b1c:	e0bff917 	ldw	r2,-28(fp)
10010b20:	1000030e 	bge	r2,zero,10010b30 <open+0x88>
    {
      status = index;
10010b24:	e0bff917 	ldw	r2,-28(fp)
10010b28:	e0bffa15 	stw	r2,-24(fp)
10010b2c:	00002506 	br	10010bc4 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
10010b30:	e13ff917 	ldw	r4,-28(fp)
10010b34:	01400304 	movi	r5,12
10010b38:	000c3780 	call	1000c378 <__mulsi3>
10010b3c:	1007883a 	mov	r3,r2
10010b40:	00840074 	movhi	r2,4097
10010b44:	1089f004 	addi	r2,r2,10176
10010b48:	1885883a 	add	r2,r3,r2
10010b4c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10010b50:	e0fffe17 	ldw	r3,-8(fp)
10010b54:	00900034 	movhi	r2,16384
10010b58:	10bfffc4 	addi	r2,r2,-1
10010b5c:	1886703a 	and	r3,r3,r2
10010b60:	e0bffc17 	ldw	r2,-16(fp)
10010b64:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
10010b68:	e0bffb17 	ldw	r2,-20(fp)
10010b6c:	1000051e 	bne	r2,zero,10010b84 <open+0xdc>
10010b70:	e13ffc17 	ldw	r4,-16(fp)
10010b74:	00109b40 	call	100109b4 <alt_file_locked>
10010b78:	e0bffa15 	stw	r2,-24(fp)
10010b7c:	e0bffa17 	ldw	r2,-24(fp)
10010b80:	10001016 	blt	r2,zero,10010bc4 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10010b84:	e0bff817 	ldw	r2,-32(fp)
10010b88:	10800317 	ldw	r2,12(r2)
10010b8c:	10000826 	beq	r2,zero,10010bb0 <open+0x108>
10010b90:	e0bff817 	ldw	r2,-32(fp)
10010b94:	10800317 	ldw	r2,12(r2)
10010b98:	e13ffc17 	ldw	r4,-16(fp)
10010b9c:	e17ffd17 	ldw	r5,-12(fp)
10010ba0:	e1bffe17 	ldw	r6,-8(fp)
10010ba4:	e1ffff17 	ldw	r7,-4(fp)
10010ba8:	103ee83a 	callr	r2
10010bac:	00000106 	br	10010bb4 <open+0x10c>
10010bb0:	0005883a 	mov	r2,zero
10010bb4:	e0bffa15 	stw	r2,-24(fp)
10010bb8:	00000206 	br	10010bc4 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
10010bbc:	00bffb44 	movi	r2,-19
10010bc0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
10010bc4:	e0bffa17 	ldw	r2,-24(fp)
10010bc8:	1000090e 	bge	r2,zero,10010bf0 <open+0x148>
  {
    alt_release_fd (index);  
10010bcc:	e13ff917 	ldw	r4,-28(fp)
10010bd0:	000f3100 	call	1000f310 <alt_release_fd>
    ALT_ERRNO = -status;
10010bd4:	00109640 	call	10010964 <alt_get_errno>
10010bd8:	1007883a 	mov	r3,r2
10010bdc:	e0bffa17 	ldw	r2,-24(fp)
10010be0:	0085c83a 	sub	r2,zero,r2
10010be4:	18800015 	stw	r2,0(r3)
    return -1;
10010be8:	00bfffc4 	movi	r2,-1
10010bec:	00000106 	br	10010bf4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
10010bf0:	e0bff917 	ldw	r2,-28(fp)
}
10010bf4:	e037883a 	mov	sp,fp
10010bf8:	dfc00117 	ldw	ra,4(sp)
10010bfc:	df000017 	ldw	fp,0(sp)
10010c00:	dec00204 	addi	sp,sp,8
10010c04:	f800283a 	ret

10010c08 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10010c08:	defffa04 	addi	sp,sp,-24
10010c0c:	df000515 	stw	fp,20(sp)
10010c10:	df000504 	addi	fp,sp,20
10010c14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10010c18:	0005303a 	rdctl	r2,status
10010c1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10010c20:	e0fffc17 	ldw	r3,-16(fp)
10010c24:	00bfff84 	movi	r2,-2
10010c28:	1884703a 	and	r2,r3,r2
10010c2c:	1001703a 	wrctl	status,r2
  
  return context;
10010c30:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
10010c34:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
10010c38:	e0bfff17 	ldw	r2,-4(fp)
10010c3c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
10010c40:	e0bffd17 	ldw	r2,-12(fp)
10010c44:	10800017 	ldw	r2,0(r2)
10010c48:	e0fffd17 	ldw	r3,-12(fp)
10010c4c:	18c00117 	ldw	r3,4(r3)
10010c50:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
10010c54:	e0bffd17 	ldw	r2,-12(fp)
10010c58:	10800117 	ldw	r2,4(r2)
10010c5c:	e0fffd17 	ldw	r3,-12(fp)
10010c60:	18c00017 	ldw	r3,0(r3)
10010c64:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
10010c68:	e0bffd17 	ldw	r2,-12(fp)
10010c6c:	e0fffd17 	ldw	r3,-12(fp)
10010c70:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
10010c74:	e0bffd17 	ldw	r2,-12(fp)
10010c78:	e0fffd17 	ldw	r3,-12(fp)
10010c7c:	10c00015 	stw	r3,0(r2)
10010c80:	e0bffb17 	ldw	r2,-20(fp)
10010c84:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10010c88:	e0bffe17 	ldw	r2,-8(fp)
10010c8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10010c90:	e037883a 	mov	sp,fp
10010c94:	df000017 	ldw	fp,0(sp)
10010c98:	dec00104 	addi	sp,sp,4
10010c9c:	f800283a 	ret

10010ca0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
10010ca0:	defffb04 	addi	sp,sp,-20
10010ca4:	dfc00415 	stw	ra,16(sp)
10010ca8:	df000315 	stw	fp,12(sp)
10010cac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
10010cb0:	d0a00e17 	ldw	r2,-32712(gp)
10010cb4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10010cb8:	d0a6d817 	ldw	r2,-25760(gp)
10010cbc:	10800044 	addi	r2,r2,1
10010cc0:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010cc4:	00002e06 	br	10010d80 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10010cc8:	e0bffd17 	ldw	r2,-12(fp)
10010ccc:	10800017 	ldw	r2,0(r2)
10010cd0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10010cd4:	e0bffd17 	ldw	r2,-12(fp)
10010cd8:	10800403 	ldbu	r2,16(r2)
10010cdc:	10803fcc 	andi	r2,r2,255
10010ce0:	10000426 	beq	r2,zero,10010cf4 <alt_tick+0x54>
10010ce4:	d0a6d817 	ldw	r2,-25760(gp)
10010ce8:	1000021e 	bne	r2,zero,10010cf4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10010cec:	e0bffd17 	ldw	r2,-12(fp)
10010cf0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10010cf4:	e0bffd17 	ldw	r2,-12(fp)
10010cf8:	10800217 	ldw	r2,8(r2)
10010cfc:	d0e6d817 	ldw	r3,-25760(gp)
10010d00:	18801d36 	bltu	r3,r2,10010d78 <alt_tick+0xd8>
10010d04:	e0bffd17 	ldw	r2,-12(fp)
10010d08:	10800403 	ldbu	r2,16(r2)
10010d0c:	10803fcc 	andi	r2,r2,255
10010d10:	1000191e 	bne	r2,zero,10010d78 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10010d14:	e0bffd17 	ldw	r2,-12(fp)
10010d18:	10800317 	ldw	r2,12(r2)
10010d1c:	e0fffd17 	ldw	r3,-12(fp)
10010d20:	18c00517 	ldw	r3,20(r3)
10010d24:	1809883a 	mov	r4,r3
10010d28:	103ee83a 	callr	r2
10010d2c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
10010d30:	e0bfff17 	ldw	r2,-4(fp)
10010d34:	1000031e 	bne	r2,zero,10010d44 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
10010d38:	e13ffd17 	ldw	r4,-12(fp)
10010d3c:	0010c080 	call	10010c08 <alt_alarm_stop>
10010d40:	00000d06 	br	10010d78 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
10010d44:	e0bffd17 	ldw	r2,-12(fp)
10010d48:	10c00217 	ldw	r3,8(r2)
10010d4c:	e0bfff17 	ldw	r2,-4(fp)
10010d50:	1887883a 	add	r3,r3,r2
10010d54:	e0bffd17 	ldw	r2,-12(fp)
10010d58:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
10010d5c:	e0bffd17 	ldw	r2,-12(fp)
10010d60:	10c00217 	ldw	r3,8(r2)
10010d64:	d0a6d817 	ldw	r2,-25760(gp)
10010d68:	1880032e 	bgeu	r3,r2,10010d78 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
10010d6c:	e0bffd17 	ldw	r2,-12(fp)
10010d70:	00c00044 	movi	r3,1
10010d74:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
10010d78:	e0bffe17 	ldw	r2,-8(fp)
10010d7c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10010d80:	e0fffd17 	ldw	r3,-12(fp)
10010d84:	d0a00e04 	addi	r2,gp,-32712
10010d88:	18bfcf1e 	bne	r3,r2,10010cc8 <__alt_data_end+0xf8010cc8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10010d8c:	0001883a 	nop
}
10010d90:	e037883a 	mov	sp,fp
10010d94:	dfc00117 	ldw	ra,4(sp)
10010d98:	df000017 	ldw	fp,0(sp)
10010d9c:	dec00204 	addi	sp,sp,8
10010da0:	f800283a 	ret

10010da4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10010da4:	deffff04 	addi	sp,sp,-4
10010da8:	df000015 	stw	fp,0(sp)
10010dac:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10010db0:	000170fa 	wrctl	ienable,zero
}
10010db4:	e037883a 	mov	sp,fp
10010db8:	df000017 	ldw	fp,0(sp)
10010dbc:	dec00104 	addi	sp,sp,4
10010dc0:	f800283a 	ret

10010dc4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10010dc4:	defffa04 	addi	sp,sp,-24
10010dc8:	dfc00515 	stw	ra,20(sp)
10010dcc:	df000415 	stw	fp,16(sp)
10010dd0:	df000404 	addi	fp,sp,16
10010dd4:	e13ffe15 	stw	r4,-8(fp)
10010dd8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10010ddc:	e0bfff17 	ldw	r2,-4(fp)
10010de0:	10800017 	ldw	r2,0(r2)
10010de4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
10010de8:	e13ffe17 	ldw	r4,-8(fp)
10010dec:	000236c0 	call	1000236c <strlen>
10010df0:	10800044 	addi	r2,r2,1
10010df4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010df8:	00000d06 	br	10010e30 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10010dfc:	e0bffc17 	ldw	r2,-16(fp)
10010e00:	10c00217 	ldw	r3,8(r2)
10010e04:	e0bffd17 	ldw	r2,-12(fp)
10010e08:	1809883a 	mov	r4,r3
10010e0c:	e17ffe17 	ldw	r5,-8(fp)
10010e10:	100d883a 	mov	r6,r2
10010e14:	00111240 	call	10011124 <memcmp>
10010e18:	1000021e 	bne	r2,zero,10010e24 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
10010e1c:	e0bffc17 	ldw	r2,-16(fp)
10010e20:	00000706 	br	10010e40 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
10010e24:	e0bffc17 	ldw	r2,-16(fp)
10010e28:	10800017 	ldw	r2,0(r2)
10010e2c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
10010e30:	e0fffc17 	ldw	r3,-16(fp)
10010e34:	e0bfff17 	ldw	r2,-4(fp)
10010e38:	18bff01e 	bne	r3,r2,10010dfc <__alt_data_end+0xf8010dfc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
10010e3c:	0005883a 	mov	r2,zero
}
10010e40:	e037883a 	mov	sp,fp
10010e44:	dfc00117 	ldw	ra,4(sp)
10010e48:	df000017 	ldw	fp,0(sp)
10010e4c:	dec00204 	addi	sp,sp,8
10010e50:	f800283a 	ret

10010e54 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
10010e54:	defffb04 	addi	sp,sp,-20
10010e58:	dfc00415 	stw	ra,16(sp)
10010e5c:	df000315 	stw	fp,12(sp)
10010e60:	df000304 	addi	fp,sp,12
10010e64:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
10010e68:	00840074 	movhi	r2,4097
10010e6c:	108e6e04 	addi	r2,r2,14776
10010e70:	10800017 	ldw	r2,0(r2)
10010e74:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010e78:	00003106 	br	10010f40 <alt_find_file+0xec>
  {
    len = strlen(next->name);
10010e7c:	e0bffd17 	ldw	r2,-12(fp)
10010e80:	10800217 	ldw	r2,8(r2)
10010e84:	1009883a 	mov	r4,r2
10010e88:	000236c0 	call	1000236c <strlen>
10010e8c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10010e90:	e0bffd17 	ldw	r2,-12(fp)
10010e94:	10c00217 	ldw	r3,8(r2)
10010e98:	e0bffe17 	ldw	r2,-8(fp)
10010e9c:	10bfffc4 	addi	r2,r2,-1
10010ea0:	1885883a 	add	r2,r3,r2
10010ea4:	10800003 	ldbu	r2,0(r2)
10010ea8:	10803fcc 	andi	r2,r2,255
10010eac:	1080201c 	xori	r2,r2,128
10010eb0:	10bfe004 	addi	r2,r2,-128
10010eb4:	10800bd8 	cmpnei	r2,r2,47
10010eb8:	1000031e 	bne	r2,zero,10010ec8 <alt_find_file+0x74>
    {
      len -= 1;
10010ebc:	e0bffe17 	ldw	r2,-8(fp)
10010ec0:	10bfffc4 	addi	r2,r2,-1
10010ec4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010ec8:	e0bffe17 	ldw	r2,-8(fp)
10010ecc:	e0ffff17 	ldw	r3,-4(fp)
10010ed0:	1885883a 	add	r2,r3,r2
10010ed4:	10800003 	ldbu	r2,0(r2)
10010ed8:	10803fcc 	andi	r2,r2,255
10010edc:	1080201c 	xori	r2,r2,128
10010ee0:	10bfe004 	addi	r2,r2,-128
10010ee4:	10800be0 	cmpeqi	r2,r2,47
10010ee8:	1000081e 	bne	r2,zero,10010f0c <alt_find_file+0xb8>
10010eec:	e0bffe17 	ldw	r2,-8(fp)
10010ef0:	e0ffff17 	ldw	r3,-4(fp)
10010ef4:	1885883a 	add	r2,r3,r2
10010ef8:	10800003 	ldbu	r2,0(r2)
10010efc:	10803fcc 	andi	r2,r2,255
10010f00:	1080201c 	xori	r2,r2,128
10010f04:	10bfe004 	addi	r2,r2,-128
10010f08:	10000a1e 	bne	r2,zero,10010f34 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
10010f0c:	e0bffd17 	ldw	r2,-12(fp)
10010f10:	10c00217 	ldw	r3,8(r2)
10010f14:	e0bffe17 	ldw	r2,-8(fp)
10010f18:	1809883a 	mov	r4,r3
10010f1c:	e17fff17 	ldw	r5,-4(fp)
10010f20:	100d883a 	mov	r6,r2
10010f24:	00111240 	call	10011124 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10010f28:	1000021e 	bne	r2,zero,10010f34 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10010f2c:	e0bffd17 	ldw	r2,-12(fp)
10010f30:	00000806 	br	10010f54 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
10010f34:	e0bffd17 	ldw	r2,-12(fp)
10010f38:	10800017 	ldw	r2,0(r2)
10010f3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10010f40:	e0fffd17 	ldw	r3,-12(fp)
10010f44:	00840074 	movhi	r2,4097
10010f48:	108e6e04 	addi	r2,r2,14776
10010f4c:	18bfcb1e 	bne	r3,r2,10010e7c <__alt_data_end+0xf8010e7c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10010f50:	0005883a 	mov	r2,zero
}
10010f54:	e037883a 	mov	sp,fp
10010f58:	dfc00117 	ldw	ra,4(sp)
10010f5c:	df000017 	ldw	fp,0(sp)
10010f60:	dec00204 	addi	sp,sp,8
10010f64:	f800283a 	ret

10010f68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10010f68:	defffa04 	addi	sp,sp,-24
10010f6c:	dfc00515 	stw	ra,20(sp)
10010f70:	df000415 	stw	fp,16(sp)
10010f74:	dc000315 	stw	r16,12(sp)
10010f78:	df000404 	addi	fp,sp,16
10010f7c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10010f80:	00bffa04 	movi	r2,-24
10010f84:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10010f88:	e03ffc15 	stw	zero,-16(fp)
10010f8c:	00002106 	br	10011014 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
10010f90:	04040074 	movhi	r16,4097
10010f94:	8409f004 	addi	r16,r16,10176
10010f98:	e0bffc17 	ldw	r2,-16(fp)
10010f9c:	1009883a 	mov	r4,r2
10010fa0:	01400304 	movi	r5,12
10010fa4:	000c3780 	call	1000c378 <__mulsi3>
10010fa8:	8085883a 	add	r2,r16,r2
10010fac:	10800017 	ldw	r2,0(r2)
10010fb0:	1000151e 	bne	r2,zero,10011008 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
10010fb4:	04040074 	movhi	r16,4097
10010fb8:	8409f004 	addi	r16,r16,10176
10010fbc:	e0bffc17 	ldw	r2,-16(fp)
10010fc0:	1009883a 	mov	r4,r2
10010fc4:	01400304 	movi	r5,12
10010fc8:	000c3780 	call	1000c378 <__mulsi3>
10010fcc:	8085883a 	add	r2,r16,r2
10010fd0:	e0fffe17 	ldw	r3,-8(fp)
10010fd4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10010fd8:	00840074 	movhi	r2,4097
10010fdc:	108e7204 	addi	r2,r2,14792
10010fe0:	10c00017 	ldw	r3,0(r2)
10010fe4:	e0bffc17 	ldw	r2,-16(fp)
10010fe8:	1880040e 	bge	r3,r2,10010ffc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
10010fec:	00840074 	movhi	r2,4097
10010ff0:	108e7204 	addi	r2,r2,14792
10010ff4:	e0fffc17 	ldw	r3,-16(fp)
10010ff8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
10010ffc:	e0bffc17 	ldw	r2,-16(fp)
10011000:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10011004:	00000606 	br	10011020 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10011008:	e0bffc17 	ldw	r2,-16(fp)
1001100c:	10800044 	addi	r2,r2,1
10011010:	e0bffc15 	stw	r2,-16(fp)
10011014:	e0bffc17 	ldw	r2,-16(fp)
10011018:	10800810 	cmplti	r2,r2,32
1001101c:	103fdc1e 	bne	r2,zero,10010f90 <__alt_data_end+0xf8010f90>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10011020:	e0bffd17 	ldw	r2,-12(fp)
}
10011024:	e6ffff04 	addi	sp,fp,-4
10011028:	dfc00217 	ldw	ra,8(sp)
1001102c:	df000117 	ldw	fp,4(sp)
10011030:	dc000017 	ldw	r16,0(sp)
10011034:	dec00304 	addi	sp,sp,12
10011038:	f800283a 	ret

1001103c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
1001103c:	defffe04 	addi	sp,sp,-8
10011040:	df000115 	stw	fp,4(sp)
10011044:	df000104 	addi	fp,sp,4
10011048:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
1001104c:	e0bfff17 	ldw	r2,-4(fp)
10011050:	10bffe84 	addi	r2,r2,-6
10011054:	10c00428 	cmpgeui	r3,r2,16
10011058:	18001a1e 	bne	r3,zero,100110c4 <alt_exception_cause_generated_bad_addr+0x88>
1001105c:	100690ba 	slli	r3,r2,2
10011060:	00840074 	movhi	r2,4097
10011064:	10841d04 	addi	r2,r2,4212
10011068:	1885883a 	add	r2,r3,r2
1001106c:	10800017 	ldw	r2,0(r2)
10011070:	1000683a 	jmp	r2
10011074:	100110b4 	orhi	zero,r2,1090
10011078:	100110b4 	orhi	zero,r2,1090
1001107c:	100110c4 	addi	zero,r2,1091
10011080:	100110c4 	addi	zero,r2,1091
10011084:	100110c4 	addi	zero,r2,1091
10011088:	100110b4 	orhi	zero,r2,1090
1001108c:	100110bc 	xorhi	zero,r2,1090
10011090:	100110c4 	addi	zero,r2,1091
10011094:	100110b4 	orhi	zero,r2,1090
10011098:	100110b4 	orhi	zero,r2,1090
1001109c:	100110c4 	addi	zero,r2,1091
100110a0:	100110b4 	orhi	zero,r2,1090
100110a4:	100110bc 	xorhi	zero,r2,1090
100110a8:	100110c4 	addi	zero,r2,1091
100110ac:	100110c4 	addi	zero,r2,1091
100110b0:	100110b4 	orhi	zero,r2,1090
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
100110b4:	00800044 	movi	r2,1
100110b8:	00000306 	br	100110c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
100110bc:	0005883a 	mov	r2,zero
100110c0:	00000106 	br	100110c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
100110c4:	0005883a 	mov	r2,zero
  }
}
100110c8:	e037883a 	mov	sp,fp
100110cc:	df000017 	ldw	fp,0(sp)
100110d0:	dec00104 	addi	sp,sp,4
100110d4:	f800283a 	ret

100110d8 <atexit>:
100110d8:	200b883a 	mov	r5,r4
100110dc:	000d883a 	mov	r6,zero
100110e0:	0009883a 	mov	r4,zero
100110e4:	000f883a 	mov	r7,zero
100110e8:	00111a01 	jmpi	100111a0 <__register_exitproc>

100110ec <exit>:
100110ec:	defffe04 	addi	sp,sp,-8
100110f0:	000b883a 	mov	r5,zero
100110f4:	dc000015 	stw	r16,0(sp)
100110f8:	dfc00115 	stw	ra,4(sp)
100110fc:	2021883a 	mov	r16,r4
10011100:	00112b40 	call	100112b4 <__call_exitprocs>
10011104:	00840074 	movhi	r2,4097
10011108:	108e6804 	addi	r2,r2,14752
1001110c:	11000017 	ldw	r4,0(r2)
10011110:	20800f17 	ldw	r2,60(r4)
10011114:	10000126 	beq	r2,zero,1001111c <exit+0x30>
10011118:	103ee83a 	callr	r2
1001111c:	8009883a 	mov	r4,r16
10011120:	00114480 	call	10011448 <_exit>

10011124 <memcmp>:
10011124:	01c000c4 	movi	r7,3
10011128:	3980192e 	bgeu	r7,r6,10011190 <memcmp+0x6c>
1001112c:	2144b03a 	or	r2,r4,r5
10011130:	11c4703a 	and	r2,r2,r7
10011134:	10000f26 	beq	r2,zero,10011174 <memcmp+0x50>
10011138:	20800003 	ldbu	r2,0(r4)
1001113c:	28c00003 	ldbu	r3,0(r5)
10011140:	10c0151e 	bne	r2,r3,10011198 <memcmp+0x74>
10011144:	31bfff84 	addi	r6,r6,-2
10011148:	01ffffc4 	movi	r7,-1
1001114c:	00000406 	br	10011160 <memcmp+0x3c>
10011150:	20800003 	ldbu	r2,0(r4)
10011154:	28c00003 	ldbu	r3,0(r5)
10011158:	31bfffc4 	addi	r6,r6,-1
1001115c:	10c00e1e 	bne	r2,r3,10011198 <memcmp+0x74>
10011160:	21000044 	addi	r4,r4,1
10011164:	29400044 	addi	r5,r5,1
10011168:	31fff91e 	bne	r6,r7,10011150 <__alt_data_end+0xf8011150>
1001116c:	0005883a 	mov	r2,zero
10011170:	f800283a 	ret
10011174:	20c00017 	ldw	r3,0(r4)
10011178:	28800017 	ldw	r2,0(r5)
1001117c:	1880041e 	bne	r3,r2,10011190 <memcmp+0x6c>
10011180:	31bfff04 	addi	r6,r6,-4
10011184:	21000104 	addi	r4,r4,4
10011188:	29400104 	addi	r5,r5,4
1001118c:	39bff936 	bltu	r7,r6,10011174 <__alt_data_end+0xf8011174>
10011190:	303fe91e 	bne	r6,zero,10011138 <__alt_data_end+0xf8011138>
10011194:	003ff506 	br	1001116c <__alt_data_end+0xf801116c>
10011198:	10c5c83a 	sub	r2,r2,r3
1001119c:	f800283a 	ret

100111a0 <__register_exitproc>:
100111a0:	00840074 	movhi	r2,4097
100111a4:	defffa04 	addi	sp,sp,-24
100111a8:	108e6804 	addi	r2,r2,14752
100111ac:	dc000315 	stw	r16,12(sp)
100111b0:	14000017 	ldw	r16,0(r2)
100111b4:	dc400415 	stw	r17,16(sp)
100111b8:	dfc00515 	stw	ra,20(sp)
100111bc:	80805217 	ldw	r2,328(r16)
100111c0:	2023883a 	mov	r17,r4
100111c4:	10003626 	beq	r2,zero,100112a0 <__register_exitproc+0x100>
100111c8:	10c00117 	ldw	r3,4(r2)
100111cc:	010007c4 	movi	r4,31
100111d0:	20c00e16 	blt	r4,r3,1001120c <__register_exitproc+0x6c>
100111d4:	1a400044 	addi	r9,r3,1
100111d8:	8800211e 	bne	r17,zero,10011260 <__register_exitproc+0xc0>
100111dc:	18c00084 	addi	r3,r3,2
100111e0:	18c7883a 	add	r3,r3,r3
100111e4:	18c7883a 	add	r3,r3,r3
100111e8:	12400115 	stw	r9,4(r2)
100111ec:	10c7883a 	add	r3,r2,r3
100111f0:	19400015 	stw	r5,0(r3)
100111f4:	0005883a 	mov	r2,zero
100111f8:	dfc00517 	ldw	ra,20(sp)
100111fc:	dc400417 	ldw	r17,16(sp)
10011200:	dc000317 	ldw	r16,12(sp)
10011204:	dec00604 	addi	sp,sp,24
10011208:	f800283a 	ret
1001120c:	00800034 	movhi	r2,0
10011210:	10800004 	addi	r2,r2,0
10011214:	10002526 	beq	r2,zero,100112ac <__register_exitproc+0x10c>
10011218:	01006404 	movi	r4,400
1001121c:	d9400015 	stw	r5,0(sp)
10011220:	d9800115 	stw	r6,4(sp)
10011224:	d9c00215 	stw	r7,8(sp)
10011228:	00000000 	call	10000000 <__alt_mem_sdram>
1001122c:	d9400017 	ldw	r5,0(sp)
10011230:	d9800117 	ldw	r6,4(sp)
10011234:	d9c00217 	ldw	r7,8(sp)
10011238:	10001c26 	beq	r2,zero,100112ac <__register_exitproc+0x10c>
1001123c:	80c05217 	ldw	r3,328(r16)
10011240:	10000115 	stw	zero,4(r2)
10011244:	02400044 	movi	r9,1
10011248:	10c00015 	stw	r3,0(r2)
1001124c:	80805215 	stw	r2,328(r16)
10011250:	10006215 	stw	zero,392(r2)
10011254:	10006315 	stw	zero,396(r2)
10011258:	0007883a 	mov	r3,zero
1001125c:	883fdf26 	beq	r17,zero,100111dc <__alt_data_end+0xf80111dc>
10011260:	18d1883a 	add	r8,r3,r3
10011264:	4211883a 	add	r8,r8,r8
10011268:	1211883a 	add	r8,r2,r8
1001126c:	41802215 	stw	r6,136(r8)
10011270:	01000044 	movi	r4,1
10011274:	11806217 	ldw	r6,392(r2)
10011278:	20c8983a 	sll	r4,r4,r3
1001127c:	310cb03a 	or	r6,r6,r4
10011280:	11806215 	stw	r6,392(r2)
10011284:	41c04215 	stw	r7,264(r8)
10011288:	01800084 	movi	r6,2
1001128c:	89bfd31e 	bne	r17,r6,100111dc <__alt_data_end+0xf80111dc>
10011290:	11806317 	ldw	r6,396(r2)
10011294:	3108b03a 	or	r4,r6,r4
10011298:	11006315 	stw	r4,396(r2)
1001129c:	003fcf06 	br	100111dc <__alt_data_end+0xf80111dc>
100112a0:	80805304 	addi	r2,r16,332
100112a4:	80805215 	stw	r2,328(r16)
100112a8:	003fc706 	br	100111c8 <__alt_data_end+0xf80111c8>
100112ac:	00bfffc4 	movi	r2,-1
100112b0:	003fd106 	br	100111f8 <__alt_data_end+0xf80111f8>

100112b4 <__call_exitprocs>:
100112b4:	00840074 	movhi	r2,4097
100112b8:	108e6804 	addi	r2,r2,14752
100112bc:	10800017 	ldw	r2,0(r2)
100112c0:	defff404 	addi	sp,sp,-48
100112c4:	dd800815 	stw	r22,32(sp)
100112c8:	d8800015 	stw	r2,0(sp)
100112cc:	10805204 	addi	r2,r2,328
100112d0:	dd000615 	stw	r20,24(sp)
100112d4:	dc800415 	stw	r18,16(sp)
100112d8:	dfc00b15 	stw	ra,44(sp)
100112dc:	df000a15 	stw	fp,40(sp)
100112e0:	ddc00915 	stw	r23,36(sp)
100112e4:	dd400715 	stw	r21,28(sp)
100112e8:	dcc00515 	stw	r19,20(sp)
100112ec:	dc400315 	stw	r17,12(sp)
100112f0:	dc000215 	stw	r16,8(sp)
100112f4:	2025883a 	mov	r18,r4
100112f8:	2829883a 	mov	r20,r5
100112fc:	d8800115 	stw	r2,4(sp)
10011300:	05bfffc4 	movi	r22,-1
10011304:	d8800017 	ldw	r2,0(sp)
10011308:	14c05217 	ldw	r19,328(r2)
1001130c:	98001d26 	beq	r19,zero,10011384 <__call_exitprocs+0xd0>
10011310:	dd400117 	ldw	r21,4(sp)
10011314:	98800117 	ldw	r2,4(r19)
10011318:	173fffc4 	addi	fp,r2,-1
1001131c:	e0000d16 	blt	fp,zero,10011354 <__call_exitprocs+0xa0>
10011320:	14000044 	addi	r16,r2,1
10011324:	8421883a 	add	r16,r16,r16
10011328:	8421883a 	add	r16,r16,r16
1001132c:	84402004 	addi	r17,r16,128
10011330:	9c63883a 	add	r17,r19,r17
10011334:	9c21883a 	add	r16,r19,r16
10011338:	a0001e26 	beq	r20,zero,100113b4 <__call_exitprocs+0x100>
1001133c:	80804017 	ldw	r2,256(r16)
10011340:	15001c26 	beq	r2,r20,100113b4 <__call_exitprocs+0x100>
10011344:	e73fffc4 	addi	fp,fp,-1
10011348:	843fff04 	addi	r16,r16,-4
1001134c:	8c7fff04 	addi	r17,r17,-4
10011350:	e5bff91e 	bne	fp,r22,10011338 <__alt_data_end+0xf8011338>
10011354:	00800034 	movhi	r2,0
10011358:	10800004 	addi	r2,r2,0
1001135c:	10000926 	beq	r2,zero,10011384 <__call_exitprocs+0xd0>
10011360:	98800117 	ldw	r2,4(r19)
10011364:	1000311e 	bne	r2,zero,1001142c <__call_exitprocs+0x178>
10011368:	98800017 	ldw	r2,0(r19)
1001136c:	10003426 	beq	r2,zero,10011440 <__call_exitprocs+0x18c>
10011370:	9809883a 	mov	r4,r19
10011374:	a8800015 	stw	r2,0(r21)
10011378:	00000000 	call	10000000 <__alt_mem_sdram>
1001137c:	acc00017 	ldw	r19,0(r21)
10011380:	983fe41e 	bne	r19,zero,10011314 <__alt_data_end+0xf8011314>
10011384:	dfc00b17 	ldw	ra,44(sp)
10011388:	df000a17 	ldw	fp,40(sp)
1001138c:	ddc00917 	ldw	r23,36(sp)
10011390:	dd800817 	ldw	r22,32(sp)
10011394:	dd400717 	ldw	r21,28(sp)
10011398:	dd000617 	ldw	r20,24(sp)
1001139c:	dcc00517 	ldw	r19,20(sp)
100113a0:	dc800417 	ldw	r18,16(sp)
100113a4:	dc400317 	ldw	r17,12(sp)
100113a8:	dc000217 	ldw	r16,8(sp)
100113ac:	dec00c04 	addi	sp,sp,48
100113b0:	f800283a 	ret
100113b4:	98800117 	ldw	r2,4(r19)
100113b8:	80c00017 	ldw	r3,0(r16)
100113bc:	10bfffc4 	addi	r2,r2,-1
100113c0:	17001526 	beq	r2,fp,10011418 <__call_exitprocs+0x164>
100113c4:	80000015 	stw	zero,0(r16)
100113c8:	183fde26 	beq	r3,zero,10011344 <__alt_data_end+0xf8011344>
100113cc:	00800044 	movi	r2,1
100113d0:	1708983a 	sll	r4,r2,fp
100113d4:	98806217 	ldw	r2,392(r19)
100113d8:	9dc00117 	ldw	r23,4(r19)
100113dc:	2084703a 	and	r2,r4,r2
100113e0:	1000061e 	bne	r2,zero,100113fc <__call_exitprocs+0x148>
100113e4:	183ee83a 	callr	r3
100113e8:	98800117 	ldw	r2,4(r19)
100113ec:	15ffc51e 	bne	r2,r23,10011304 <__alt_data_end+0xf8011304>
100113f0:	a8800017 	ldw	r2,0(r21)
100113f4:	14ffd326 	beq	r2,r19,10011344 <__alt_data_end+0xf8011344>
100113f8:	003fc206 	br	10011304 <__alt_data_end+0xf8011304>
100113fc:	98806317 	ldw	r2,396(r19)
10011400:	2084703a 	and	r2,r4,r2
10011404:	1000061e 	bne	r2,zero,10011420 <__call_exitprocs+0x16c>
10011408:	89400017 	ldw	r5,0(r17)
1001140c:	9009883a 	mov	r4,r18
10011410:	183ee83a 	callr	r3
10011414:	003ff406 	br	100113e8 <__alt_data_end+0xf80113e8>
10011418:	9f000115 	stw	fp,4(r19)
1001141c:	003fea06 	br	100113c8 <__alt_data_end+0xf80113c8>
10011420:	89000017 	ldw	r4,0(r17)
10011424:	183ee83a 	callr	r3
10011428:	003fef06 	br	100113e8 <__alt_data_end+0xf80113e8>
1001142c:	98800017 	ldw	r2,0(r19)
10011430:	982b883a 	mov	r21,r19
10011434:	1027883a 	mov	r19,r2
10011438:	983fb61e 	bne	r19,zero,10011314 <__alt_data_end+0xf8011314>
1001143c:	003fd106 	br	10011384 <__alt_data_end+0xf8011384>
10011440:	0005883a 	mov	r2,zero
10011444:	003ffa06 	br	10011430 <__alt_data_end+0xf8011430>

10011448 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10011448:	defffd04 	addi	sp,sp,-12
1001144c:	df000215 	stw	fp,8(sp)
10011450:	df000204 	addi	fp,sp,8
10011454:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10011458:	0001883a 	nop
1001145c:	e0bfff17 	ldw	r2,-4(fp)
10011460:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10011464:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10011468:	10000226 	beq	r2,zero,10011474 <_exit+0x2c>
    ALT_SIM_FAIL();
1001146c:	002af070 	cmpltui	zero,zero,43969
10011470:	00000106 	br	10011478 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10011474:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10011478:	003fff06 	br	10011478 <__alt_data_end+0xf8011478>
